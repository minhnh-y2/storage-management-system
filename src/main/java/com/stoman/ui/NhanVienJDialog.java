/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.stoman.ui;

import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import javax.swing.GroupLayout;
import javax.swing.LayoutStyle;
import javax.swing.SwingConstants;
import javax.swing.border.*;
import com.formdev.flatlaf.FlatIntelliJLaf;
import com.stoman.dao.NhanVienDAO;
import com.stoman.entity.NhanVien;
import com.stoman.utils.Auth;
import com.stoman.utils.MsgBox;
import com.stoman.utils.XPassword;
import java.awt.Color;
import java.awt.Component;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JTable;
import javax.swing.SwingWorker;
import javax.swing.Timer;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author MinhNH
 */
public class NhanVienJDialog extends javax.swing.JDialog {

    /**
     * Creates new form NhanVienJDialog
     */
    public NhanVienJDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        init();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        pnlBackground = new javax.swing.JPanel();
        pnlTblNhanVien = new JScrollPane();
        tblNhanVien = new JTable();
        pnlThongTinNV = new JPanel();
        lblMaNV = new JLabel();
        lblHoTen = new JLabel();
        lblMatKhau = new JLabel();
        lblXacNhanMK = new JLabel();
        lblVaiTro = new JLabel();
        txtMaNV = new com.stoman.utils.JTextFieldCustom();
        txtHoTen = new com.stoman.utils.JTextFieldCustom();
        txtMatKhau = new JPasswordField();
        txtXacNhanMK = new JPasswordField();
        rdoTruongKho = new JRadioButton();
        rdoThuKho = new JRadioButton();
        pnlTimKiem = new JPanel();
        txtTimKiem = new com.stoman.utils.JTextFieldCustom(defaultSearchNhanVien);
        lblTimKiem2 = new JLabel();
        cboTimKiem = new JComboBox<>();
        pnlDieuHuongTitle = new JPanel();
        pnlDieuHuong = new JPanel();
        btnFirst = new JButton();
        btnPrev = new JButton();
        btnNext = new JButton();
        btnLast = new JButton();
        pnlChucNangTitle = new JPanel();
        pnlChucNang = new JPanel();
        btnMoi = new JButton();
        btnThem = new JButton();
        btnXoa = new JButton();
        btnSua = new JButton();
        btnGrpVaiTro = new ButtonGroup();

        //======== this ========
        setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("StoMan - Qu\u1ea3n l\u00fd nh\u00e2n vi\u00ean");
        setResizable(false);
        addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosed(WindowEvent e) {
                formWindowClosed(e);
            }
        });
        var contentPane = getContentPane();
        contentPane.setLayout(new BorderLayout());

        //======== pnlBackground ========
        {

            //======== pnlTblNhanVien ========
            {
                pnlTblNhanVien.setBorder(new TitledBorder(null, "Danh s\u00e1ch nh\u00e2n vi\u00ean", TitledBorder.LEADING, TitledBorder.DEFAULT_POSITION,
                    new Font("Segoe UI", Font.BOLD, 13)));
                pnlTblNhanVien.setOpaque(false);

                //---- tblNhanVien ----
                tblNhanVien.setFont(new Font("Segoe UI", Font.BOLD, 12));
                tblNhanVien.setModel(new DefaultTableModel(
                    new Object[][] {
                    },
                    new String[] {
                        "Title 1", "Title 2", "Title 3", "Title 4"
                    }
                ));
                tblNhanVien.setOpaque(false);
                tblNhanVien.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
                tblNhanVien.addMouseListener(new MouseAdapter() {
                    @Override
                    public void mouseClicked(MouseEvent e) {
                        tblNhanVienMouseClicked(e);
                    }
                });
                pnlTblNhanVien.setViewportView(tblNhanVien);
            }

            //======== pnlThongTinNV ========
            {
                pnlThongTinNV.setBackground(Color.white);
                pnlThongTinNV.setBorder(new TitledBorder(null, "Th\u00f4ng tin nh\u00e2n vi\u00ean", TitledBorder.LEADING, TitledBorder.DEFAULT_POSITION,
                    new Font("Segoe UI", Font.BOLD, 13)));
                pnlThongTinNV.setOpaque(false);

                //---- lblMaNV ----
                lblMaNV.setFont(new Font("Tahoma", Font.BOLD, 13));
                lblMaNV.setForeground(new Color(0x666666));
                lblMaNV.setText("M\u00e3 nh\u00e2n vi\u00ean");

                //---- lblHoTen ----
                lblHoTen.setFont(new Font("Tahoma", Font.BOLD, 13));
                lblHoTen.setForeground(new Color(0x666666));
                lblHoTen.setText("H\u1ecd v\u00e0 t\u00ean");

                //---- lblMatKhau ----
                lblMatKhau.setFont(new Font("Tahoma", Font.BOLD, 13));
                lblMatKhau.setForeground(new Color(0x666666));
                lblMatKhau.setText("M\u1eadt kh\u1ea9u");

                //---- lblXacNhanMK ----
                lblXacNhanMK.setFont(new Font("Tahoma", Font.BOLD, 13));
                lblXacNhanMK.setForeground(new Color(0x666666));
                lblXacNhanMK.setText("X\u00e1c nh\u1eadn m\u1eadt kh\u1ea9u");

                //---- lblVaiTro ----
                lblVaiTro.setFont(new Font("Tahoma", Font.BOLD, 13));
                lblVaiTro.setForeground(new Color(0x666666));
                lblVaiTro.setText("Vai tr\u00f2");

                //---- txtHoTen ----
                txtHoTen.addFocusListener(new FocusAdapter() {
                    @Override
                    public void focusGained(FocusEvent e) {
                        txtHoTenFocusGained(e);
                    }
                    @Override
                    public void focusLost(FocusEvent e) {
                        txtHoTenFocusLost(e);
                    }
                });

                //---- txtMatKhau ----
                txtMatKhau.addFocusListener(new FocusAdapter() {
                    @Override
                    public void focusGained(FocusEvent e) {
                        txtMatKhauFocusGained(e);
                    }
                });

                //---- txtXacNhanMK ----
                txtXacNhanMK.addFocusListener(new FocusAdapter() {
                    @Override
                    public void focusGained(FocusEvent e) {
                        txtXacNhanMKFocusGained(e);
                    }
                });

                //---- rdoTruongKho ----
                rdoTruongKho.setForeground(new Color(0x13615b));
                rdoTruongKho.setText("Tr\u01b0\u1edfng kho");

                //---- rdoThuKho ----
                rdoThuKho.setForeground(new Color(0xa33422));
                rdoThuKho.setSelected(true);
                rdoThuKho.setText("Th\u1ee7 kho");

                GroupLayout pnlThongTinNVLayout = new GroupLayout(pnlThongTinNV);
                pnlThongTinNV.setLayout(pnlThongTinNVLayout);
                pnlThongTinNVLayout.setHorizontalGroup(
                    pnlThongTinNVLayout.createParallelGroup()
                        .addGroup(pnlThongTinNVLayout.createSequentialGroup()
                            .addGap(12, 12, 12)
                            .addGroup(pnlThongTinNVLayout.createParallelGroup()
                                .addComponent(lblXacNhanMK)
                                .addComponent(lblMaNV)
                                .addComponent(lblHoTen)
                                .addComponent(lblMatKhau)
                                .addComponent(lblVaiTro))
                            .addGap(10, 10, 10)
                            .addGroup(pnlThongTinNVLayout.createParallelGroup(GroupLayout.Alignment.TRAILING)
                                .addComponent(txtMaNV, GroupLayout.Alignment.LEADING)
                                .addComponent(txtHoTen, GroupLayout.Alignment.LEADING)
                                .addGroup(GroupLayout.Alignment.LEADING, pnlThongTinNVLayout.createSequentialGroup()
                                    .addComponent(rdoTruongKho)
                                    .addGap(18, 18, 18)
                                    .addComponent(rdoThuKho))
                                .addComponent(txtMatKhau, GroupLayout.Alignment.LEADING)
                                .addComponent(txtXacNhanMK, GroupLayout.Alignment.LEADING))
                            .addGap(12, 12, 12))
                );
                pnlThongTinNVLayout.setVerticalGroup(
                    pnlThongTinNVLayout.createParallelGroup()
                        .addGroup(pnlThongTinNVLayout.createSequentialGroup()
                            .addGap(12, 12, 12)
                            .addGroup(pnlThongTinNVLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                .addComponent(lblMaNV)
                                .addComponent(txtMaNV, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(pnlThongTinNVLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                .addComponent(txtHoTen, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                .addComponent(lblHoTen))
                            .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(pnlThongTinNVLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                .addComponent(lblMatKhau)
                                .addComponent(txtMatKhau, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(pnlThongTinNVLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                .addComponent(lblXacNhanMK)
                                .addComponent(txtXacNhanMK, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(pnlThongTinNVLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                .addComponent(rdoTruongKho)
                                .addComponent(rdoThuKho)
                                .addComponent(lblVaiTro))
                            .addContainerGap(12, Short.MAX_VALUE))
                );
                pnlThongTinNVLayout.linkSize(SwingConstants.VERTICAL, new Component[] {txtHoTen, txtMaNV, txtMatKhau, txtXacNhanMK});
            }

            //======== pnlTimKiem ========
            {
                pnlTimKiem.setBorder(new TitledBorder(null, "T\u00ecm ki\u1ebfm", TitledBorder.LEADING, TitledBorder.DEFAULT_POSITION,
                    new Font("Segoe UI", Font.BOLD, 13)));
                pnlTimKiem.setOpaque(false);

                //---- txtTimKiem ----
                txtTimKiem.addKeyListener(new KeyAdapter() {
                    @Override
                    public void keyReleased(KeyEvent e) {
                        txtTimKiemKeyReleased(e);
                    }
                });

                //---- lblTimKiem2 ----
                lblTimKiem2.setText("theo");

                //---- cboTimKiem ----
                cboTimKiem.setModel(new DefaultComboBoxModel<>(new String[] {

                }));
                cboTimKiem.addActionListener(e -> cboTimKiemActionPerformed(e));

                GroupLayout pnlTimKiemLayout = new GroupLayout(pnlTimKiem);
                pnlTimKiem.setLayout(pnlTimKiemLayout);
                pnlTimKiemLayout.setHorizontalGroup(
                    pnlTimKiemLayout.createParallelGroup()
                        .addGroup(pnlTimKiemLayout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(txtTimKiem, GroupLayout.DEFAULT_SIZE, 243, Short.MAX_VALUE)
                            .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(lblTimKiem2)
                            .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(cboTimKiem, GroupLayout.PREFERRED_SIZE, 195, GroupLayout.PREFERRED_SIZE)
                            .addContainerGap())
                );
                pnlTimKiemLayout.setVerticalGroup(
                    pnlTimKiemLayout.createParallelGroup()
                        .addGroup(pnlTimKiemLayout.createSequentialGroup()
                            .addGap(9, 9, 9)
                            .addGroup(pnlTimKiemLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                .addComponent(txtTimKiem, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                .addComponent(lblTimKiem2)
                                .addComponent(cboTimKiem, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                            .addGap(9, 9, 9))
                );
            }

            //======== pnlDieuHuongTitle ========
            {
                pnlDieuHuongTitle.setBorder(new TitledBorder(null, "\u0110i\u1ec1u h\u01b0\u1edbng", TitledBorder.LEADING, TitledBorder.DEFAULT_POSITION,
                    new Font("Segoe UI", Font.BOLD, 13)));
                pnlDieuHuongTitle.setOpaque(false);

                //======== pnlDieuHuong ========
                {
                    pnlDieuHuong.setLayout(new GridLayout());

                    //---- btnFirst ----
                    btnFirst.setIcon(new ImageIcon(getClass().getResource("/com/stoman/icons/skip-to-start.png")));
                    btnFirst.addActionListener(e -> btnFirstActionPerformed(e));
                    pnlDieuHuong.add(btnFirst);

                    //---- btnPrev ----
                    btnPrev.setIcon(new ImageIcon(getClass().getResource("/com/stoman/icons/double-left-24.png")));
                    btnPrev.addActionListener(e -> btnPrevActionPerformed(e));
                    pnlDieuHuong.add(btnPrev);

                    //---- btnNext ----
                    btnNext.setIcon(new ImageIcon(getClass().getResource("/com/stoman/icons/double-right.png")));
                    btnNext.addActionListener(e -> btnNextActionPerformed(e));
                    pnlDieuHuong.add(btnNext);

                    //---- btnLast ----
                    btnLast.setIcon(new ImageIcon(getClass().getResource("/com/stoman/icons/skip-to-end.png")));
                    btnLast.addActionListener(e -> btnLastActionPerformed(e));
                    pnlDieuHuong.add(btnLast);
                }

                GroupLayout pnlDieuHuongTitleLayout = new GroupLayout(pnlDieuHuongTitle);
                pnlDieuHuongTitle.setLayout(pnlDieuHuongTitleLayout);
                pnlDieuHuongTitleLayout.setHorizontalGroup(
                    pnlDieuHuongTitleLayout.createParallelGroup()
                        .addGroup(pnlDieuHuongTitleLayout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(pnlDieuHuong, GroupLayout.DEFAULT_SIZE, 278, Short.MAX_VALUE)
                            .addContainerGap())
                );
                pnlDieuHuongTitleLayout.setVerticalGroup(
                    pnlDieuHuongTitleLayout.createParallelGroup()
                        .addGroup(GroupLayout.Alignment.TRAILING, pnlDieuHuongTitleLayout.createSequentialGroup()
                            .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(pnlDieuHuong, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                            .addContainerGap())
                );
            }

            //======== pnlChucNangTitle ========
            {
                pnlChucNangTitle.setBorder(new TitledBorder(null, "Ch\u1ee9c n\u0103ng", TitledBorder.LEADING, TitledBorder.DEFAULT_POSITION,
                    new Font("Segoe UI", Font.BOLD, 13)));
                pnlChucNangTitle.setForeground(new Color(0x333333));

                //======== pnlChucNang ========
                {
                    pnlChucNang.setLayout(new GridLayout(4, 1));

                    //---- btnMoi ----
                    btnMoi.setIcon(new ImageIcon(getClass().getResource("/com/stoman/icons/icons8_document_24px.png")));
                    btnMoi.setText("L\u00e0m m\u1edbi");
                    btnMoi.addActionListener(e -> btnMoiActionPerformed(e));
                    pnlChucNang.add(btnMoi);

                    //---- btnThem ----
                    btnThem.setIcon(new ImageIcon(getClass().getResource("/com/stoman/icons/icons8_add_list_24px_4.png")));
                    btnThem.setText("Th\u00eam nh\u00e2n vi\u00ean");
                    btnThem.addActionListener(e -> btnThemActionPerformed(e));
                    pnlChucNang.add(btnThem);

                    //---- btnXoa ----
                    btnXoa.setIcon(new ImageIcon(getClass().getResource("/com/stoman/icons/icons8_delete_document_24px.png")));
                    btnXoa.setText("Xo\u00e1 nh\u00e2n vi\u00ean");
                    btnXoa.addActionListener(e -> btnXoaActionPerformed(e));
                    pnlChucNang.add(btnXoa);

                    //---- btnSua ----
                    btnSua.setIcon(new ImageIcon(getClass().getResource("/com/stoman/icons/edit-property.png")));
                    btnSua.setText("S\u1eeda th\u00f4ng tin");
                    btnSua.addActionListener(e -> btnSuaActionPerformed(e));
                    pnlChucNang.add(btnSua);
                }

                GroupLayout pnlChucNangTitleLayout = new GroupLayout(pnlChucNangTitle);
                pnlChucNangTitle.setLayout(pnlChucNangTitleLayout);
                pnlChucNangTitleLayout.setHorizontalGroup(
                    pnlChucNangTitleLayout.createParallelGroup()
                        .addGroup(pnlChucNangTitleLayout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(pnlChucNang, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addContainerGap())
                );
                pnlChucNangTitleLayout.setVerticalGroup(
                    pnlChucNangTitleLayout.createParallelGroup()
                        .addGroup(pnlChucNangTitleLayout.createSequentialGroup()
                            .addComponent(pnlChucNang, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addContainerGap())
                );
            }

            GroupLayout pnlBackgroundLayout = new GroupLayout(pnlBackground);
            pnlBackground.setLayout(pnlBackgroundLayout);
            pnlBackgroundLayout.setHorizontalGroup(
                pnlBackgroundLayout.createParallelGroup()
                    .addGroup(GroupLayout.Alignment.TRAILING, pnlBackgroundLayout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addGroup(pnlBackgroundLayout.createParallelGroup()
                            .addComponent(pnlTblNhanVien, GroupLayout.Alignment.TRAILING)
                            .addGroup(pnlBackgroundLayout.createSequentialGroup()
                                .addComponent(pnlThongTinNV, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(pnlChucNangTitle, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                            .addGroup(pnlBackgroundLayout.createSequentialGroup()
                                .addComponent(pnlTimKiem, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(pnlDieuHuongTitle, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)))
                        .addGap(9, 9, 9))
            );
            pnlBackgroundLayout.setVerticalGroup(
                pnlBackgroundLayout.createParallelGroup()
                    .addGroup(pnlBackgroundLayout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addGroup(pnlBackgroundLayout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                            .addComponent(pnlThongTinNV, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(pnlChucNangTitle, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlBackgroundLayout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                            .addComponent(pnlTimKiem, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(pnlDieuHuongTitle, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pnlTblNhanVien, GroupLayout.DEFAULT_SIZE, 277, Short.MAX_VALUE)
                        .addGap(9, 9, 9))
            );
        }
        contentPane.add(pnlBackground, BorderLayout.CENTER);
        pack();
        setLocationRelativeTo(getOwner());

        //---- btnGrpVaiTro ----
        btnGrpVaiTro.add(rdoTruongKho);
        btnGrpVaiTro.add(rdoThuKho);
    }// </editor-fold>//GEN-END:initComponents

    private void tblNhanVienMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblNhanVienMouseClicked
        // TODO add your handling code here:
        this.row = tblNhanVien.getSelectedRow();
        this.edit();
    }//GEN-LAST:event_tblNhanVienMouseClicked

    private void btnXoaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnXoaActionPerformed
        // TODO add your handling code here:
        delete();
    }//GEN-LAST:event_btnXoaActionPerformed

    private void btnThemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnThemActionPerformed
        // TODO add your handling code here:
        insert();
    }//GEN-LAST:event_btnThemActionPerformed

    private void btnMoiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMoiActionPerformed
        // TODO add your handling code here:
        clearForm();
    }//GEN-LAST:event_btnMoiActionPerformed

    private void btnSuaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSuaActionPerformed
        // TODO add your handling code here:
        update();
    }//GEN-LAST:event_btnSuaActionPerformed

    private void btnFirstActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFirstActionPerformed
        // TODO add your handling code here:
        first();
    }//GEN-LAST:event_btnFirstActionPerformed

    private void btnPrevActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrevActionPerformed
        // TODO add your handling code here:
        prev();
    }//GEN-LAST:event_btnPrevActionPerformed

    private void btnNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNextActionPerformed
        // TODO add your handling code here:
        next();
    }//GEN-LAST:event_btnNextActionPerformed

    private void btnLastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLastActionPerformed
        // TODO add your handling code here:
        last();
    }//GEN-LAST:event_btnLastActionPerformed

    private void txtTimKiemKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtTimKiemKeyReleased
        // TODO add your handling code here:
        fillToTable();
        clearForm();
    }//GEN-LAST:event_txtTimKiemKeyReleased

    private void cboTimKiemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboTimKiemActionPerformed
        // TODO add your handling code here:
        txtTimKiem.setText(defaultSearchNhanVien);
        clearForm();
        fillToTable();
    }//GEN-LAST:event_cboTimKiemActionPerformed

    private void txtHoTenFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtHoTenFocusLost
        // TODO add your handling code here:
        String hoTen = txtHoTen.getText();
        if (!hoTen.isEmpty()) {
            txtHoTen.setText(capitalizeWord(hoTen));
        }
    }//GEN-LAST:event_txtHoTenFocusLost

    private void txtMatKhauFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtMatKhauFocusGained
        // TODO add your handling code here:
        txtMatKhau.selectAll();
    }//GEN-LAST:event_txtMatKhauFocusGained

    private void txtXacNhanMKFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtXacNhanMKFocusGained
        // TODO add your handling code here:
        txtXacNhanMK.selectAll();
    }//GEN-LAST:event_txtXacNhanMKFocusGained

    private void txtHoTenFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtHoTenFocusGained
        // TODO add your handling code here:
        txtHoTen.selectAll();
    }//GEN-LAST:event_txtHoTenFocusGained

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        // TODO add your handling code here:
        this.timer.stop();
    }//GEN-LAST:event_formWindowClosed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            javax.swing.UIManager.setLookAndFeel(new FlatIntelliJLaf());
        } catch (UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NhanVienJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                NhanVienJDialog dialog = new NhanVienJDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JPanel pnlBackground;
    private JScrollPane pnlTblNhanVien;
    private JTable tblNhanVien;
    private JPanel pnlThongTinNV;
    private JLabel lblMaNV;
    private JLabel lblHoTen;
    private JLabel lblMatKhau;
    private JLabel lblXacNhanMK;
    private JLabel lblVaiTro;
    private JTextField txtMaNV;
    private JTextField txtHoTen;
    private JPasswordField txtMatKhau;
    private JPasswordField txtXacNhanMK;
    private JRadioButton rdoTruongKho;
    private JRadioButton rdoThuKho;
    private JPanel pnlTimKiem;
    private JTextField txtTimKiem;
    private JLabel lblTimKiem2;
    private JComboBox<String> cboTimKiem;
    private JPanel pnlDieuHuongTitle;
    private JPanel pnlDieuHuong;
    private JButton btnFirst;
    private JButton btnPrev;
    private JButton btnNext;
    private JButton btnLast;
    private JPanel pnlChucNangTitle;
    private JPanel pnlChucNang;
    private JButton btnMoi;
    private JButton btnThem;
    private JButton btnXoa;
    private JButton btnSua;
    private ButtonGroup btnGrpVaiTro;
    // End of variables declaration//GEN-END:variables

    private NhanVienDAO DAO = new NhanVienDAO();
    private DefaultTableModel tblModel;
    private int row = -1;

    private String defaultSearchNhanVien = "Nhập từ khoá tìm kiếm nhân viên";

    private void init() {
        setLocationRelativeTo(null);
        
        this.formatTable();

        this.fillToComboBox();
        this.fillToTable();
        this.updateStatus();

        timer.start();
    }

    // Đổ dữ liệu nhân viên vào bảng
    private SwingWorker worker;
    private void fillToTable() {
        if (worker != null) {
            worker.cancel(true);
        }
        tblModel.setRowCount(0);
        try {
            worker = new SwingWorker() {
                @Override
                protected Object doInBackground() throws Exception {
                    Thread.sleep(100);
                    String keyword = txtTimKiem.getText();
                    if (keyword.equals(defaultSearchNhanVien)) {
                        keyword = "";
                    }
                    List<NhanVien> list = null;

                    if (!txtTimKiem.getText().isEmpty()) {
                        int headerIndex = cboTimKiem.getSelectedIndex();
                        list = DAO.selectByKeyword(keyword, headerIndex);
                    } else {
                        list = DAO.selectAll();
                    }
                    for (NhanVien nv : list) {
                        if (worker.isCancelled()) {
                            break;
                        }
                        tblModel.addRow(new Object[]{
                            nv.getMaNV(),
                            nv.getTenNV(),
                            nv.isVaiTro() ? "Trưởng kho" : "Thủ kho"
                        });
                    }

                    if (worker.isCancelled()) {
                        tblModel.setRowCount(0);
                    }
                    return null;
                }

                @Override
                protected void done() {
                    if(row >= 0) {
                        tblNhanVien.setRowSelectionInterval(row, row);
                    }
                }
                
            };
            worker.execute();
        } catch (Exception e) {
            MsgBox.alert(this, "Lỗi truy vấn dữ liệu!");
            e.printStackTrace();
        }
    }

    // Đổ tên bảng vào combobox tìm kiếm
    private void fillToComboBox() {
        DefaultComboBoxModel model = (DefaultComboBoxModel) cboTimKiem.getModel();
        model.removeAllElements();
        for (int i = 0; i < tblNhanVien.getColumnCount(); i++) {
            String columnName = tblNhanVien.getColumnName(i);
            model.addElement(columnName);
        }
    }

    // Tạo nhân viên mới từ form
    private NhanVien getForm() {
        NhanVien nv = new NhanVien();
        byte[] muoi = XPassword.getSalt();
        String matKhau = new String(txtMatKhau.getPassword());
        nv.setMaNV(txtMaNV.getText());
        nv.setTenNV(txtHoTen.getText());
        nv.setMatKhau(XPassword.getHashMD5(matKhau, muoi));
        nv.setVaiTro(rdoTruongKho.isSelected());
        nv.setMuoi(muoi);

        return nv;
    }

    // Hiển thị thông tin nhân viên lên form
    private void setForm(NhanVien nv) {
        txtMaNV.setText(nv.getMaNV());
        txtHoTen.setText(nv.getTenNV());
        txtMatKhau.setText(nv.getMatKhau());
        txtXacNhanMK.setText(nv.getMatKhau());
        if (nv.isVaiTro()) {
            rdoTruongKho.setSelected(true);
        } else {
            rdoThuKho.setSelected(true);
        }
    }

    // Xoá trắng form
    private void clearForm() {
        this.setForm(new NhanVien());
        this.row = -1;
        this.updateStatus();
        tblNhanVien.clearSelection();
    }

    // Hiển thị dữ liệu nhân viên đang chọn trên bảng
    private void edit() {
        String maNV = (String) tblNhanVien.getValueAt(tblNhanVien.convertRowIndexToModel(this.row), 0);
        NhanVien nv = DAO.selectByID(maNV);
        this.setForm(nv);
        this.updateStatus();
    }

    // Cập nhật trạng thái form và các nút theo hoạt động của người dùng
    private void updateStatus() {
        boolean edit = (this.row >= 0);
        boolean first = (this.row == 0);
        boolean last = (this.row == tblNhanVien.getRowCount() - 1);

        // Điều chỉnh trạng thái các nút và ô nhập text
        txtMaNV.setEditable(!edit);
        btnThem.setEnabled(!edit);
        btnSua.setEnabled(edit);
        btnXoa.setEnabled(edit);

        btnFirst.setEnabled(!first);
        btnPrev.setEnabled(!first);
        btnNext.setEnabled(!last);
        btnLast.setEnabled(!last);
    }

    // Hiển thị nhân viên đầu danh sách
    private void first() {
        this.row = 0;
        this.edit();
        tblNhanVien.setRowSelectionInterval(row, row);
    }

    // Hiển thị nhân viên kế trước
    private void prev() {
        if (this.row > 0) {
            this.row--;
            this.edit();
            tblNhanVien.setRowSelectionInterval(row, row);
        }
    }

    // Hiển thị nhân viên kế tiếp
    private void next() {
        if (this.row < (tblNhanVien.getRowCount() - 1)) {
            this.row++;
            this.edit();
            tblNhanVien.setRowSelectionInterval(row, row);
        }
    }

    // Hiển thị nhân viên cuối danh sách
    private void last() {
        this.row = tblNhanVien.getRowCount() - 1;
        this.edit();
        tblNhanVien.setRowSelectionInterval(row, row);
    }

    // Xác thực dữ liệu trên form
    private boolean isValidated() {
        String maNV = txtMaNV.getText();
        String hoTen = txtHoTen.getText();
        char[] matKhau = txtMatKhau.getPassword();
        char[] xacNhanMK = txtXacNhanMK.getPassword();

        if (maNV.isEmpty()) {
            MsgBox.alert(this, "Chưa nhập mã nhân viên!");
            txtMaNV.requestFocus();
            return false;
        }
        if (hoTen.isEmpty()) {
            MsgBox.alert(this, "Chưa nhập họ và tên!");
            txtHoTen.requestFocus();
            return false;
        }
        if (matKhau.length == 0) {
            MsgBox.alert(this, "Chưa nhập mật khẩu!");
            txtMatKhau.requestFocus();
            return false;
        }
        if (matKhau.length < 5) {
            MsgBox.alert(this, "Mật khẩu không được ngắn hơn 8 ký tự!");
            txtMatKhau.requestFocus();
            return false;
        }
        if (xacNhanMK.length == 0) {
            MsgBox.alert(this, "Chưa nhập mật khẩu xác nhận!");
            txtXacNhanMK.requestFocus();
            return false;
        }
        if (!new String(matKhau).equals(new String(xacNhanMK))) {
            MsgBox.alert(this, "Xác nhận mật khẩu không trùng khớp!");
            return false;
        }
        return true;
    }

    // Thêm nhân viên mới
    private void insert() {
        if (!isValidated()) {
            return;
        }

        if (DAO.selectByID(txtMaNV.getText()) != null) {
            MsgBox.alert(this, "Mã nhân viên đã tồn tại!");
            txtHoTen.requestFocus();
            return;
        }
        
        NhanVien nv = getForm();
        try {
            DAO.insert(nv);
            this.fillToTable();
            this.clearForm();
            MsgBox.alert(this, "Thêm mới thành công!");
        } catch (Exception e) {
            MsgBox.alert(this, "Thêm mới thất bại!");
            e.printStackTrace();
        }
    }

    // Xoá nhân viên hiện tại
    private void delete() {
        String maNV = (String) tblNhanVien.getValueAt(this.row, 0);
        if (maNV.equals(Auth.user.getMaNV())) {
            MsgBox.alert(this, "Bạn không thể xoá chính bạn!");
            return;
        }
        String message = "Các phiếu nhập xuất và kiểm kho do nhân viên này lập sẽ bị xoá!"
                + "\nBạn có chắc chắn xoá nhân viên này?";
        if (MsgBox.confirm(this, message)) {
            try {
                DAO.delete(maNV);
                this.fillToTable();
                this.clearForm();
                MsgBox.alert(this, "Xoá thành công!");
            } catch (Exception e) {
                MsgBox.alert(this, "Xoá không thành công!");
                e.printStackTrace();
            }
        }
    }

    // Cập nhật nhân viên 
    private void update() {
        if (!isValidated()) {
            return;
        }

        NhanVien nv = getForm();
        try {
            DAO.update(nv);
            this.fillToTable();
            this.updateStatus();
            MsgBox.alert(this, "Cập nhật thành công!");
        } catch (Exception e) {
            MsgBox.alert(this, "Cập nhật thất bại!");
            e.printStackTrace();
        }
    }

    // Tự động viết hoa chữ cái đầu họ và tên
    public static String capitalizeWord(String str) {
        str = str.trim();
        String[] words = str.split("\\s+");
        StringBuilder sb = new StringBuilder();

        for (int i = 0; i < words.length; i++) {
            String s = words[i].substring(0, 1).toUpperCase()
                    + words[i].substring(1).toLowerCase();
            sb.append(s);
            if (i < words.length - 1) {
                sb.append(" ");
            }
        }
        return sb.toString();
    }

    // Định dạng bảng
    private void formatTable() {
        String header[] = {"MÃ NHÂN VIÊN", "HỌ TÊN", "VAI TRÒ"};
        tblModel = new DefaultTableModel(header, 0) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
            
            Class[] types = new Class[]{
                String.class, String.class, String.class
            };

            @Override
            public Class getColumnClass(int columnIndex) {
                //return getValueAt(0, columnIndex).getClass();
                return types[columnIndex];
            }
        };
        tblNhanVien.setModel(tblModel);
        tblNhanVien.setAutoCreateRowSorter(true);

        tblNhanVien.setDefaultRenderer(String.class, new NhanVienTableCellRenderer());

    }

    public class NhanVienTableCellRenderer extends DefaultTableCellRenderer {
        @Override
        public Component getTableCellRendererComponent(JTable table, Object value,
                boolean isSelected, boolean hasFocus, int row, int column) {
            super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);

            Color color = Color.black;
            Object obj = table.getValueAt(row, 2);
            if (obj != null && "Trưởng kho".equals(obj.toString())) {
                color = new Color(19, 97, 91);
            }
            if (obj != null && "Thủ kho".equals(obj.toString())) {
                color = new Color(163, 52, 34);
            }
            if (isSelected) {
                color = Color.white;
            }
            setForeground(color);
            table.setSelectionBackground(new Color(38, 117, 191));
            return this;
        }
    }

    // Đỗ lại dữ liệu 
    public void refreshForm() {
        this.fillToComboBox();
        this.fillToTable();

        this.timer.restart();
    }

    // sau hai phút tải lại dữ liệu
    private Timer timer = new Timer(120000, (e) -> {
        refreshForm();
    });

}

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.stoman.ui;

import com.formdev.flatlaf.FlatIntelliJLaf;
import com.google.zxing.WriterException;
import com.stoman.dao.ChiTietKiemKhoDAO;
import com.stoman.dao.HangHoaDAO;
import com.stoman.dao.KhoDAO;
import com.stoman.dao.LuuTruDAO;
import com.stoman.dao.NhanVienDAO;
import com.stoman.dao.PhieuKiemKhoDAO;
import com.stoman.dao.ProcedureDAO;
import com.stoman.entity.ChiTietKiemKho;
import com.stoman.entity.HangHoa;
import com.stoman.entity.Kho;
import com.stoman.entity.LuuTru;
import com.stoman.entity.NhanVien;
import com.stoman.entity.PhieuKiemKho;
import com.stoman.utils.Auth;
import com.stoman.utils.DateComparator;
import com.stoman.utils.DateTimeComparator;
import com.stoman.utils.MsgBox;
import com.stoman.utils.QRCode;
import com.stoman.utils.XReport;
import com.stoman.utils.TableNumberCellRenderer;
import com.stoman.utils.JSpinnerEditor;
import com.stoman.utils.LowerCaseStringConverter;
import com.stoman.utils.XDate;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.JTable;
import javax.swing.RowFilter;
import javax.swing.SwingWorker;
import javax.swing.Timer;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import net.sf.jasperreports.engine.JRException;

/**
 *
 * @author Huy
 */
public class PhieuKiemKhoJDialog extends javax.swing.JDialog {

    /**
     * Creates new form PhieuKiemKhoDialog
     */
    public PhieuKiemKhoJDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        init();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        ChiTietPhieuJDialog = new javax.swing.JDialog();
        pnlBackgroundCTP = new javax.swing.JPanel();
        tabsCTP = new javax.swing.JTabbedPane();
        pnlDSKiemKho = new javax.swing.JPanel();
        pnlTblCTPhieu_ChiTiet = new javax.swing.JScrollPane();
        tblCTPhieu_ChiTiet = new javax.swing.JTable();
        btnXoaKhoiDS = new javax.swing.JButton();
        txtTimKiemCTP = new com.stoman.utils.JTextFieldCustom(defaultSearchHangHoa);
        lblTimKiemCTP = new javax.swing.JLabel();
        pnlDSHangHoa = new javax.swing.JPanel();
        pnlTblHangHoaKho = new javax.swing.JScrollPane();
        tblHangHoaKho = new javax.swing.JTable();
        btnThemVaoDS = new javax.swing.JButton();
        lblTimKiemHHKho = new javax.swing.JLabel();
        txtTimKiemHHKho = new com.stoman.utils.JTextFieldCustom(defaultSearchHangHoa);
        QRCodeDialog = new javax.swing.JDialog();
        pnlBackgroundQR = new javax.swing.JPanel();
        lblQRCodeImage = new javax.swing.JLabel();
        pnlBackground = new javax.swing.JPanel();
        tabs = new javax.swing.JTabbedPane();
        pnlChiTietPhieuKiem = new javax.swing.JPanel();
        pnlTblCTPhieu = new javax.swing.JScrollPane();
        tblCTPhieu = new javax.swing.JTable();
        pnlThongTin = new javax.swing.JPanel();
        lblTrangThai = new javax.swing.JLabel();
        lblKho = new javax.swing.JLabel();
        lblNgayLap = new javax.swing.JLabel();
        lblNgayKiem = new javax.swing.JLabel();
        lblNguoiLap = new javax.swing.JLabel();
        lblGhiChu = new javax.swing.JLabel();
        pnlTxtGhiChu = new javax.swing.JScrollPane();
        txtGhiChu = new javax.swing.JTextArea();
        chkHoanThanh = new javax.swing.JCheckBox();
        cboKho = new javax.swing.JComboBox<>();
        txtNguoiLap = new javax.swing.JTextField();
        txtNgayLap = new javax.swing.JFormattedTextField();
        txtNgayKiem = new com.toedter.calendar.JDateChooser();
        pnlTimKiemCT = new javax.swing.JPanel();
        txtTimKiemCT = new com.stoman.utils.JTextFieldCustom(defaultSearchHangHoa);
        lblTimKiemCT = new javax.swing.JLabel();
        lblTheoCT = new javax.swing.JLabel();
        cboTimKiemCT = new javax.swing.JComboBox<>();
        pnlNutDieuHuong = new javax.swing.JPanel();
        btnFirst = new javax.swing.JButton();
        btnPrev = new javax.swing.JButton();
        btnNext = new javax.swing.JButton();
        btnLast = new javax.swing.JButton();
        pnlChucNang = new javax.swing.JPanel();
        btnThem = new javax.swing.JButton();
        btnXoa = new javax.swing.JButton();
        btnHoanTac = new javax.swing.JButton();
        btnSua = new javax.swing.JButton();
        btnMoi = new javax.swing.JButton();
        btnChiTiet = new javax.swing.JButton();
        btnXuatMaPhieu = new javax.swing.JButton();
        pnlChucNangMoRong = new javax.swing.JPanel();
        btnXuatFile = new javax.swing.JButton();
        btnInPhieu = new javax.swing.JButton();
        pnlDanhSach = new javax.swing.JPanel();
        pnlTblPhieuKiemKho = new javax.swing.JScrollPane();
        tblPhieu = new javax.swing.JTable();
        pnlTimKiem = new javax.swing.JPanel();
        cboTimKiemPhieu = new javax.swing.JComboBox<>();
        lblTimKiemTheoPhieu = new javax.swing.JLabel();
        txtTimKiemPhieu = new com.stoman.utils.JTextFieldCustom(defaultSearchPhieu);
        lblTimKiemPhieu = new javax.swing.JLabel();

        ChiTietPhieuJDialog.setTitle("Chi tiết phiếu kiểm kho");
        ChiTietPhieuJDialog.setResizable(false);

        pnlBackgroundCTP.setBackground(new java.awt.Color(255, 255, 255));
        pnlBackgroundCTP.setLayout(new java.awt.BorderLayout());

        tabsCTP.setOpaque(true);

        tblCTPhieu_ChiTiet.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblCTPhieu_ChiTiet.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tblCTPhieu_ChiTiet.getTableHeader().setReorderingAllowed(false);
        tblCTPhieu_ChiTiet.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblCTPhieu_ChiTietMouseClicked(evt);
            }
        });
        tblCTPhieu_ChiTiet.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tblCTPhieu_ChiTietKeyReleased(evt);
            }
        });
        pnlTblCTPhieu_ChiTiet.setViewportView(tblCTPhieu_ChiTiet);

        btnXoaKhoiDS.setText("Xóa khỏi danh sách");
        btnXoaKhoiDS.setPreferredSize(new java.awt.Dimension(139, 22));
        btnXoaKhoiDS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnXoaKhoiDSActionPerformed(evt);
            }
        });

        txtTimKiemCTP.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtTimKiemCTPKeyReleased(evt);
            }
        });

        lblTimKiemCTP.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/stoman/icons/search_24px.png"))); // NOI18N

        javax.swing.GroupLayout pnlDSKiemKhoLayout = new javax.swing.GroupLayout(pnlDSKiemKho);
        pnlDSKiemKho.setLayout(pnlDSKiemKhoLayout);
        pnlDSKiemKhoLayout.setHorizontalGroup(
            pnlDSKiemKhoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlDSKiemKhoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlDSKiemKhoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(pnlTblCTPhieu_ChiTiet, javax.swing.GroupLayout.DEFAULT_SIZE, 604, Short.MAX_VALUE)
                    .addGroup(pnlDSKiemKhoLayout.createSequentialGroup()
                        .addComponent(lblTimKiemCTP)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtTimKiemCTP)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnXoaKhoiDS, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        pnlDSKiemKhoLayout.setVerticalGroup(
            pnlDSKiemKhoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlDSKiemKhoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlDSKiemKhoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblTimKiemCTP, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnXoaKhoiDS, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtTimKiemCTP))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlTblCTPhieu_ChiTiet, javax.swing.GroupLayout.DEFAULT_SIZE, 370, Short.MAX_VALUE)
                .addContainerGap())
        );

        tabsCTP.addTab("Danh sách kiểm kho", pnlDSKiemKho);

        tblHangHoaKho.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblHangHoaKho.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tblHangHoaKho.getTableHeader().setReorderingAllowed(false);
        pnlTblHangHoaKho.setViewportView(tblHangHoaKho);

        btnThemVaoDS.setText("Thêm vào danh sách");
        btnThemVaoDS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnThemVaoDSActionPerformed(evt);
            }
        });

        lblTimKiemHHKho.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/stoman/icons/search_24px.png"))); // NOI18N

        txtTimKiemHHKho.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtTimKiemHHKhoKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout pnlDSHangHoaLayout = new javax.swing.GroupLayout(pnlDSHangHoa);
        pnlDSHangHoa.setLayout(pnlDSHangHoaLayout);
        pnlDSHangHoaLayout.setHorizontalGroup(
            pnlDSHangHoaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlDSHangHoaLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlDSHangHoaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnlTblHangHoaKho, javax.swing.GroupLayout.DEFAULT_SIZE, 604, Short.MAX_VALUE)
                    .addGroup(pnlDSHangHoaLayout.createSequentialGroup()
                        .addComponent(lblTimKiemHHKho)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtTimKiemHHKho)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnThemVaoDS)))
                .addContainerGap())
        );
        pnlDSHangHoaLayout.setVerticalGroup(
            pnlDSHangHoaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlDSHangHoaLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlDSHangHoaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblTimKiemHHKho, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtTimKiemHHKho)
                    .addComponent(btnThemVaoDS, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlTblHangHoaKho, javax.swing.GroupLayout.DEFAULT_SIZE, 370, Short.MAX_VALUE)
                .addContainerGap())
        );

        tabsCTP.addTab("Danh sách hàng hóa trong kho", pnlDSHangHoa);

        pnlBackgroundCTP.add(tabsCTP, java.awt.BorderLayout.CENTER);

        ChiTietPhieuJDialog.getContentPane().add(pnlBackgroundCTP, java.awt.BorderLayout.CENTER);

        QRCodeDialog.setTitle("Xuất mã phiếu (QR Code)");
        QRCodeDialog.setResizable(false);

        pnlBackgroundQR.setPreferredSize(new java.awt.Dimension(300, 300));
        pnlBackgroundQR.setLayout(new java.awt.GridBagLayout());

        lblQRCodeImage.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153), 2));
        lblQRCodeImage.setPreferredSize(new java.awt.Dimension(200, 200));
        pnlBackgroundQR.add(lblQRCodeImage, new java.awt.GridBagConstraints());

        QRCodeDialog.getContentPane().add(pnlBackgroundQR, java.awt.BorderLayout.CENTER);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("StoMan - Quản lý phiếu kiểm kho");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        pnlBackground.setLayout(new java.awt.BorderLayout());

        pnlChiTietPhieuKiem.setOpaque(false);

        pnlTblCTPhieu.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Chi tiết phiếu", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 13))); // NOI18N

        tblCTPhieu.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, false, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblCTPhieu.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tblCTPhieu.getTableHeader().setReorderingAllowed(false);
        tblCTPhieu.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblCTPhieuMouseClicked(evt);
            }
        });
        tblCTPhieu.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                tblCTPhieuPropertyChange(evt);
            }
        });
        tblCTPhieu.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tblCTPhieuKeyReleased(evt);
            }
        });
        pnlTblCTPhieu.setViewportView(tblCTPhieu);

        pnlThongTin.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Thông tin phiếu", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 13))); // NOI18N
        pnlThongTin.setOpaque(false);

        lblTrangThai.setFont(new java.awt.Font("Segoe UI", 1, 13)); // NOI18N
        lblTrangThai.setText("Trạng thái");

        lblKho.setFont(new java.awt.Font("Segoe UI", 1, 13)); // NOI18N
        lblKho.setText("Kho");

        lblNgayLap.setFont(new java.awt.Font("Segoe UI", 1, 13)); // NOI18N
        lblNgayLap.setText("Ngày lập");

        lblNgayKiem.setFont(new java.awt.Font("Segoe UI", 1, 13)); // NOI18N
        lblNgayKiem.setText("Ngày kiểm");

        lblNguoiLap.setFont(new java.awt.Font("Segoe UI", 1, 13)); // NOI18N
        lblNguoiLap.setText("Người lập");

        lblGhiChu.setFont(new java.awt.Font("Segoe UI", 1, 13)); // NOI18N
        lblGhiChu.setText("Ghi chú");

        txtGhiChu.setColumns(20);
        txtGhiChu.setRows(5);
        pnlTxtGhiChu.setViewportView(txtGhiChu);

        chkHoanThanh.setText("Hoàn thành");

        cboKho.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cboKhoItemStateChanged(evt);
            }
        });
        cboKho.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboKhoActionPerformed(evt);
            }
        });

        txtNguoiLap.setEditable(false);

        txtNgayLap.setEditable(false);
        txtNgayLap.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter()));

        txtNgayKiem.setDate(new Date());
        txtNgayKiem.setOpaque(false);

        javax.swing.GroupLayout pnlThongTinLayout = new javax.swing.GroupLayout(pnlThongTin);
        pnlThongTin.setLayout(pnlThongTinLayout);
        pnlThongTinLayout.setHorizontalGroup(
            pnlThongTinLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlThongTinLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlThongTinLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblNgayLap, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblNguoiLap, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblNgayKiem))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlThongTinLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtNgayKiem, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtNguoiLap)
                    .addComponent(txtNgayLap))
                .addGap(18, 18, 18)
                .addGroup(pnlThongTinLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblKho, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblTrangThai))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlThongTinLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlThongTinLayout.createSequentialGroup()
                        .addComponent(cboKho, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(lblGhiChu))
                    .addComponent(chkHoanThanh))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlTxtGhiChu)
                .addContainerGap())
        );
        pnlThongTinLayout.setVerticalGroup(
            pnlThongTinLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlThongTinLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlThongTinLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(pnlTxtGhiChu, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(pnlThongTinLayout.createSequentialGroup()
                        .addGroup(pnlThongTinLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlThongTinLayout.createSequentialGroup()
                                .addComponent(lblGhiChu)
                                .addGap(14, 14, 14))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlThongTinLayout.createSequentialGroup()
                                .addGroup(pnlThongTinLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txtNguoiLap)
                                    .addComponent(lblNguoiLap)
                                    .addComponent(lblKho)
                                    .addComponent(cboKho, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                        .addGroup(pnlThongTinLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblNgayLap)
                            .addComponent(txtNgayLap, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblTrangThai)
                            .addComponent(chkHoanThanh))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlThongTinLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtNgayKiem, javax.swing.GroupLayout.DEFAULT_SIZE, 22, Short.MAX_VALUE)
                            .addComponent(lblNgayKiem, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );

        pnlThongTinLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {txtNgayKiem, txtNgayLap});

        pnlTimKiemCT.setOpaque(false);

        txtTimKiemCT.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtTimKiemCTKeyReleased(evt);
            }
        });

        lblTimKiemCT.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/stoman/icons/search_24px.png"))); // NOI18N

        lblTheoCT.setText("theo");

        cboTimKiemCT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboTimKiemCTActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlTimKiemCTLayout = new javax.swing.GroupLayout(pnlTimKiemCT);
        pnlTimKiemCT.setLayout(pnlTimKiemCTLayout);
        pnlTimKiemCTLayout.setHorizontalGroup(
            pnlTimKiemCTLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlTimKiemCTLayout.createSequentialGroup()
                .addGap(2, 2, 2)
                .addComponent(lblTimKiemCT)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtTimKiemCT)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblTheoCT)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cboTimKiemCT, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        pnlTimKiemCTLayout.setVerticalGroup(
            pnlTimKiemCTLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlTimKiemCTLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(pnlTimKiemCTLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblTimKiemCT)
                    .addGroup(pnlTimKiemCTLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtTimKiemCT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblTheoCT)
                        .addComponent(cboTimKiemCT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        pnlNutDieuHuong.setOpaque(false);
        pnlNutDieuHuong.setLayout(new java.awt.GridLayout(1, 0));

        btnFirst.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/stoman/icons/skip-to-start.png"))); // NOI18N
        btnFirst.setPreferredSize(new java.awt.Dimension(100, 33));
        btnFirst.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFirstActionPerformed(evt);
            }
        });
        pnlNutDieuHuong.add(btnFirst);

        btnPrev.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/stoman/icons/double-left-24.png"))); // NOI18N
        btnPrev.setPreferredSize(new java.awt.Dimension(100, 33));
        btnPrev.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrevActionPerformed(evt);
            }
        });
        pnlNutDieuHuong.add(btnPrev);

        btnNext.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/stoman/icons/double-right.png"))); // NOI18N
        btnNext.setPreferredSize(new java.awt.Dimension(100, 33));
        btnNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNextActionPerformed(evt);
            }
        });
        pnlNutDieuHuong.add(btnNext);

        btnLast.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/stoman/icons/skip-to-end.png"))); // NOI18N
        btnLast.setPreferredSize(new java.awt.Dimension(100, 33));
        btnLast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLastActionPerformed(evt);
            }
        });
        pnlNutDieuHuong.add(btnLast);

        pnlChucNang.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Chức năng", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 13))); // NOI18N
        pnlChucNang.setOpaque(false);
        pnlChucNang.setLayout(new java.awt.GridBagLayout());

        btnThem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/stoman/icons/icons8_new_copy_32px.png"))); // NOI18N
        btnThem.setText("Thêm chi tiết");
        btnThem.setPreferredSize(new java.awt.Dimension(148, 45));
        btnThem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnThemActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.ipadx = 8;
        gridBagConstraints.ipady = 8;
        pnlChucNang.add(btnThem, gridBagConstraints);

        btnXoa.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/stoman/icons/icons8_delete_document_32px.png"))); // NOI18N
        btnXoa.setText("Xoá phiếu");
        btnXoa.setPreferredSize(new java.awt.Dimension(148, 45));
        btnXoa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnXoaActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.ipadx = 8;
        gridBagConstraints.ipady = 8;
        pnlChucNang.add(btnXoa, gridBagConstraints);

        btnHoanTac.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/stoman/icons/icons8_undo_32px.png"))); // NOI18N
        btnHoanTac.setText("Huỷ thay đổi");
        btnHoanTac.setPreferredSize(new java.awt.Dimension(148, 45));
        btnHoanTac.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHoanTacActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.ipadx = 8;
        gridBagConstraints.ipady = 8;
        pnlChucNang.add(btnHoanTac, gridBagConstraints);

        btnSua.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/stoman/icons/edit-property-32.png"))); // NOI18N
        btnSua.setText("Sửa phiếu");
        btnSua.setPreferredSize(new java.awt.Dimension(148, 45));
        btnSua.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSuaActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.ipadx = 8;
        gridBagConstraints.ipady = 8;
        pnlChucNang.add(btnSua, gridBagConstraints);

        btnMoi.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/stoman/icons/icons8_document_32px.png"))); // NOI18N
        btnMoi.setText("Phiếu mới");
        btnMoi.setPreferredSize(new java.awt.Dimension(148, 45));
        btnMoi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMoiActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipadx = 8;
        gridBagConstraints.ipady = 8;
        pnlChucNang.add(btnMoi, gridBagConstraints);

        btnChiTiet.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/stoman/icons/more-details-32.png"))); // NOI18N
        btnChiTiet.setText("Chi tiết phiếu");
        btnChiTiet.setPreferredSize(new java.awt.Dimension(148, 45));
        btnChiTiet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChiTietActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.ipadx = 8;
        gridBagConstraints.ipady = 8;
        pnlChucNang.add(btnChiTiet, gridBagConstraints);

        btnXuatMaPhieu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/stoman/icons/icons8_qr_code_24px.png"))); // NOI18N
        btnXuatMaPhieu.setText("Mã phiếu QR");
        btnXuatMaPhieu.setPreferredSize(new java.awt.Dimension(148, 45));
        btnXuatMaPhieu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnXuatMaPhieuActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.ipadx = 8;
        gridBagConstraints.ipady = 8;
        pnlChucNang.add(btnXuatMaPhieu, gridBagConstraints);

        pnlChucNangMoRong.setOpaque(false);
        pnlChucNangMoRong.setLayout(new java.awt.GridLayout(1, 3));

        btnXuatFile.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/stoman/icons/open-document.png"))); // NOI18N
        btnXuatFile.setText("Xuất file");
        btnXuatFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnXuatFileActionPerformed(evt);
            }
        });
        pnlChucNangMoRong.add(btnXuatFile);

        btnInPhieu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/stoman/icons/print.png"))); // NOI18N
        btnInPhieu.setText("In phiếu");
        btnInPhieu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInPhieuActionPerformed(evt);
            }
        });
        pnlChucNangMoRong.add(btnInPhieu);

        javax.swing.GroupLayout pnlChiTietPhieuKiemLayout = new javax.swing.GroupLayout(pnlChiTietPhieuKiem);
        pnlChiTietPhieuKiem.setLayout(pnlChiTietPhieuKiemLayout);
        pnlChiTietPhieuKiemLayout.setHorizontalGroup(
            pnlChiTietPhieuKiemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlChiTietPhieuKiemLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(pnlChiTietPhieuKiemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnlThongTin, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(pnlChiTietPhieuKiemLayout.createSequentialGroup()
                        .addGroup(pnlChiTietPhieuKiemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(pnlChiTietPhieuKiemLayout.createSequentialGroup()
                                .addComponent(pnlNutDieuHuong, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 41, Short.MAX_VALUE)
                                .addComponent(pnlChucNangMoRong, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(pnlTblCTPhieu)
                            .addComponent(pnlTimKiemCT, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pnlChucNang, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(10, 10, 10))
        );
        pnlChiTietPhieuKiemLayout.setVerticalGroup(
            pnlChiTietPhieuKiemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlChiTietPhieuKiemLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(pnlThongTin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlChiTietPhieuKiemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlChiTietPhieuKiemLayout.createSequentialGroup()
                        .addComponent(pnlTimKiemCT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pnlTblCTPhieu, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addGap(10, 10, 10)
                        .addGroup(pnlChiTietPhieuKiemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(pnlChucNangMoRong, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(pnlNutDieuHuong, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(pnlChucNang, javax.swing.GroupLayout.DEFAULT_SIZE, 411, Short.MAX_VALUE))
                .addGap(10, 10, 10))
        );

        tabs.addTab("Thông tin phiếu kiểm", pnlChiTietPhieuKiem);

        pnlDanhSach.setOpaque(false);

        pnlTblPhieuKiemKho.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Danh sách phiếu", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 13))); // NOI18N

        tblPhieu.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblPhieu.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tblPhieu.getTableHeader().setReorderingAllowed(false);
        tblPhieu.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblPhieuMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                tblPhieuMousePressed(evt);
            }
        });
        tblPhieu.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                tblPhieuPropertyChange(evt);
            }
        });
        pnlTblPhieuKiemKho.setViewportView(tblPhieu);

        pnlTimKiem.setOpaque(false);

        cboTimKiemPhieu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboTimKiemPhieuActionPerformed(evt);
            }
        });

        lblTimKiemTheoPhieu.setText("theo");

        txtTimKiemPhieu.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtTimKiemPhieuKeyReleased(evt);
            }
        });

        lblTimKiemPhieu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/stoman/icons/search_24px.png"))); // NOI18N

        javax.swing.GroupLayout pnlTimKiemLayout = new javax.swing.GroupLayout(pnlTimKiem);
        pnlTimKiem.setLayout(pnlTimKiemLayout);
        pnlTimKiemLayout.setHorizontalGroup(
            pnlTimKiemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlTimKiemLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblTimKiemPhieu)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtTimKiemPhieu)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblTimKiemTheoPhieu)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cboTimKiemPhieu, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        pnlTimKiemLayout.setVerticalGroup(
            pnlTimKiemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlTimKiemLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(pnlTimKiemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTimKiemPhieu)
                    .addComponent(txtTimKiemPhieu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblTimKiemTheoPhieu)
                    .addComponent(cboTimKiemPhieu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        javax.swing.GroupLayout pnlDanhSachLayout = new javax.swing.GroupLayout(pnlDanhSach);
        pnlDanhSach.setLayout(pnlDanhSachLayout);
        pnlDanhSachLayout.setHorizontalGroup(
            pnlDanhSachLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlDanhSachLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlDanhSachLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnlTblPhieuKiemKho, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 865, Short.MAX_VALUE)
                    .addComponent(pnlTimKiem, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        pnlDanhSachLayout.setVerticalGroup(
            pnlDanhSachLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlDanhSachLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlTimKiem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlTblPhieuKiemKho, javax.swing.GroupLayout.DEFAULT_SIZE, 518, Short.MAX_VALUE)
                .addContainerGap())
        );

        tabs.addTab("Danh sách phiếu kiểm", pnlDanhSach);

        pnlBackground.add(tabs, java.awt.BorderLayout.CENTER);

        getContentPane().add(pnlBackground, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tblPhieuMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblPhieuMouseClicked
        if (evt.getClickCount() < 2 || tblPhieu.getSelectedColumn() == 3) {
            return;
        }
        this.rowPhieu = tblPhieu.getSelectedRow();
        edit();
    }//GEN-LAST:event_tblPhieuMouseClicked

    private void btnChiTietActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChiTietActionPerformed
        // TODO add your handling code here:
        this.ChiTietPhieuJDialog.setVisible(true);
    }//GEN-LAST:event_btnChiTietActionPerformed

    private void btnThemVaoDSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnThemVaoDSActionPerformed
        // TODO add your handling code here:
        this.insertCT();
    }//GEN-LAST:event_btnThemVaoDSActionPerformed

    private void btnXoaKhoiDSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnXoaKhoiDSActionPerformed
        // TODO add your handling code here:
        this.deleteCT();
    }//GEN-LAST:event_btnXoaKhoiDSActionPerformed

    private void btnThemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnThemActionPerformed
        // TODO add your handling code here:
        this.insertPhieu();
    }//GEN-LAST:event_btnThemActionPerformed

    private void btnXoaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnXoaActionPerformed
        // TODO add your handling code here:
        this.deletePhieu();
    }//GEN-LAST:event_btnXoaActionPerformed

    private void btnSuaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSuaActionPerformed
        // TODO add your handling code here:
        this.updatePhieu();
    }//GEN-LAST:event_btnSuaActionPerformed

    private void btnMoiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMoiActionPerformed
        // TODO add your handling code here:
        this.clearForm();
        this.fillToTableHHkho();
        btnChiTiet.setEnabled(true);
        tabsCTP.setSelectedIndex(1);
        ChiTietPhieuJDialog.setVisible(true);
    }//GEN-LAST:event_btnMoiActionPerformed

    private void cboKhoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cboKhoItemStateChanged
        // TODO add your handling code here:
        this.fillToTableCTPhieu();
        this.fillToTableHHkho();
    }//GEN-LAST:event_cboKhoItemStateChanged

    private void btnXuatMaPhieuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnXuatMaPhieuActionPerformed
        // TODO add your handling code here:
        createQRCode();
    }//GEN-LAST:event_btnXuatMaPhieuActionPerformed

    private void btnXuatFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnXuatFileActionPerformed
        // TODO add your handling code here:
        exportReportExcel();
    }//GEN-LAST:event_btnXuatFileActionPerformed

    private void btnPrevActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrevActionPerformed
        // TODO add your handling code here:
        prev();
    }//GEN-LAST:event_btnPrevActionPerformed

    private void btnFirstActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFirstActionPerformed
        // TODO add your handling code here:
        first();
    }//GEN-LAST:event_btnFirstActionPerformed

    private void btnNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNextActionPerformed
        // TODO add your handling code here:
        next();
    }//GEN-LAST:event_btnNextActionPerformed

    private void btnLastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLastActionPerformed
        // TODO add your handling code here:
        last();
    }//GEN-LAST:event_btnLastActionPerformed

    private void btnInPhieuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInPhieuActionPerformed
        // TODO add your handling code here:
        printReport();
    }//GEN-LAST:event_btnInPhieuActionPerformed

    private void cboKhoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboKhoActionPerformed
        // TODO add your handling code here:
        cboKho.setEnabled(!isUpdate);
    }//GEN-LAST:event_cboKhoActionPerformed

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        // TODO add your handling code here:
        this.timer.stop();
    }//GEN-LAST:event_formWindowClosed
    private void txtTimKiemCTKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtTimKiemCTKeyReleased
        // TODO add your handling code here:
        searchCTPhieu();
    }//GEN-LAST:event_txtTimKiemCTKeyReleased

    private void cboTimKiemCTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboTimKiemCTActionPerformed
        // TODO add your handling code here:
        txtTimKiemCT.setText(defaultSearchHangHoa);
        searchCTPhieu();
    }//GEN-LAST:event_cboTimKiemCTActionPerformed

    private void txtTimKiemPhieuKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtTimKiemPhieuKeyReleased
        // TODO add your handling code here:
        searchPhieu();
    }//GEN-LAST:event_txtTimKiemPhieuKeyReleased

    private void cboTimKiemPhieuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboTimKiemPhieuActionPerformed
        // TODO add your handling code here:
        txtTimKiemPhieu.setText(defaultSearchPhieu);
        searchPhieu();
    }//GEN-LAST:event_cboTimKiemPhieuActionPerformed

    private void txtTimKiemCTPKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtTimKiemCTPKeyReleased
        // TODO add your handling code here:
        searchCTPhieu_ChiTiet();
    }//GEN-LAST:event_txtTimKiemCTPKeyReleased

    private void txtTimKiemHHKhoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtTimKiemHHKhoKeyReleased
        // TODO add your handling code here:
        searchHangHoaKho();
    }//GEN-LAST:event_txtTimKiemHHKhoKeyReleased

    private void tblPhieuPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_tblPhieuPropertyChange
        // TODO add your handling code here:
        if (rowPhieu < 0) {
            return;
        }
        if ("tableCellEditor".equals(evt.getPropertyName())) {
            updateTrangThaiPhieu();
        }
    }//GEN-LAST:event_tblPhieuPropertyChange

    private void tblPhieuMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblPhieuMousePressed
        // TODO add your handling code here:
        this.rowPhieu = tblPhieu.getSelectedRow();
    }//GEN-LAST:event_tblPhieuMousePressed

    private void tblCTPhieu_ChiTietMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblCTPhieu_ChiTietMouseClicked
        // TODO add your handling code here:
        this.rowCTPhieu = tblCTPhieu_ChiTiet.getSelectedRow();
        mapSelectionTable(tblCTPhieu_ChiTiet, tblCTPhieu);
    }//GEN-LAST:event_tblCTPhieu_ChiTietMouseClicked

    private void tblCTPhieuMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblCTPhieuMouseClicked
        // TODO add your handling code here:
        this.rowCTPhieu = tblCTPhieu.getSelectedRow();
        mapSelectionTable(tblCTPhieu, tblCTPhieu_ChiTiet);
    }//GEN-LAST:event_tblCTPhieuMouseClicked

    private void tblCTPhieuKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tblCTPhieuKeyReleased
        // TODO add your handling code here:
        disableEnterCellNextLine(tblCTPhieu);
        //updateSoLuongThuc(tblCTPhieu, tblCTPhieu.getSelectedRow());
    }//GEN-LAST:event_tblCTPhieuKeyReleased

    private void tblCTPhieu_ChiTietKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tblCTPhieu_ChiTietKeyReleased
        // TODO add your handling code here:
        disableEnterCellNextLine(tblCTPhieu_ChiTiet);
        //updateSoLuongThuc(tblCTPhieu_ChiTiet, tblCTPhieu_ChiTiet.getSelectedRow());
    }//GEN-LAST:event_tblCTPhieu_ChiTietKeyReleased

    private void tblCTPhieuPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_tblCTPhieuPropertyChange
        // TODO add your handling code here:
        /*
        if(tblCTPhieu.getSelectedRow() >= 0) {
            updateSoLuongThuc(tblCTPhieu, tblCTPhieu.getSelectedRow());
        }
        */
    }//GEN-LAST:event_tblCTPhieuPropertyChange

    private void btnHoanTacActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHoanTacActionPerformed
        // TODO add your handling code here:
        edit();
    }//GEN-LAST:event_btnHoanTacActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            javax.swing.UIManager.setLookAndFeel(new FlatIntelliJLaf());
        } catch (UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PhieuKiemKhoJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                PhieuKiemKhoJDialog dialog = new PhieuKiemKhoJDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JDialog ChiTietPhieuJDialog;
    private javax.swing.JDialog QRCodeDialog;
    private javax.swing.JButton btnChiTiet;
    private javax.swing.JButton btnFirst;
    private javax.swing.JButton btnHoanTac;
    private javax.swing.JButton btnInPhieu;
    private javax.swing.JButton btnLast;
    private javax.swing.JButton btnMoi;
    private javax.swing.JButton btnNext;
    private javax.swing.JButton btnPrev;
    private javax.swing.JButton btnSua;
    private javax.swing.JButton btnThem;
    private javax.swing.JButton btnThemVaoDS;
    private javax.swing.JButton btnXoa;
    private javax.swing.JButton btnXoaKhoiDS;
    private javax.swing.JButton btnXuatFile;
    private javax.swing.JButton btnXuatMaPhieu;
    private javax.swing.JComboBox<String> cboKho;
    private javax.swing.JComboBox<String> cboTimKiemCT;
    private javax.swing.JComboBox<String> cboTimKiemPhieu;
    private javax.swing.JCheckBox chkHoanThanh;
    private javax.swing.JLabel lblGhiChu;
    private javax.swing.JLabel lblKho;
    private javax.swing.JLabel lblNgayKiem;
    private javax.swing.JLabel lblNgayLap;
    private javax.swing.JLabel lblNguoiLap;
    private javax.swing.JLabel lblQRCodeImage;
    private javax.swing.JLabel lblTheoCT;
    private javax.swing.JLabel lblTimKiemCT;
    private javax.swing.JLabel lblTimKiemCTP;
    private javax.swing.JLabel lblTimKiemHHKho;
    private javax.swing.JLabel lblTimKiemPhieu;
    private javax.swing.JLabel lblTimKiemTheoPhieu;
    private javax.swing.JLabel lblTrangThai;
    private javax.swing.JPanel pnlBackground;
    private javax.swing.JPanel pnlBackgroundCTP;
    private javax.swing.JPanel pnlBackgroundQR;
    private javax.swing.JPanel pnlChiTietPhieuKiem;
    private javax.swing.JPanel pnlChucNang;
    private javax.swing.JPanel pnlChucNangMoRong;
    private javax.swing.JPanel pnlDSHangHoa;
    private javax.swing.JPanel pnlDSKiemKho;
    private javax.swing.JPanel pnlDanhSach;
    private javax.swing.JPanel pnlNutDieuHuong;
    private javax.swing.JScrollPane pnlTblCTPhieu;
    private javax.swing.JScrollPane pnlTblCTPhieu_ChiTiet;
    private javax.swing.JScrollPane pnlTblHangHoaKho;
    private javax.swing.JScrollPane pnlTblPhieuKiemKho;
    private javax.swing.JPanel pnlThongTin;
    private javax.swing.JPanel pnlTimKiem;
    private javax.swing.JPanel pnlTimKiemCT;
    private javax.swing.JScrollPane pnlTxtGhiChu;
    private javax.swing.JTabbedPane tabs;
    private javax.swing.JTabbedPane tabsCTP;
    private javax.swing.JTable tblCTPhieu;
    private javax.swing.JTable tblCTPhieu_ChiTiet;
    private javax.swing.JTable tblHangHoaKho;
    private javax.swing.JTable tblPhieu;
    private javax.swing.JTextArea txtGhiChu;
    private com.toedter.calendar.JDateChooser txtNgayKiem;
    private javax.swing.JFormattedTextField txtNgayLap;
    private javax.swing.JTextField txtNguoiLap;
    private javax.swing.JTextField txtTimKiemCT;
    private javax.swing.JTextField txtTimKiemCTP;
    private javax.swing.JTextField txtTimKiemHHKho;
    private javax.swing.JTextField txtTimKiemPhieu;
    // End of variables declaration//GEN-END:variables

    private KhoDAO kDAO = new KhoDAO();
    private HangHoaDAO hhDAO = new HangHoaDAO();
    private PhieuKiemKhoDAO pkkDAO = new PhieuKiemKhoDAO();
    private ChiTietKiemKhoDAO ctkkDAO = new ChiTietKiemKhoDAO();
    private LuuTruDAO ltDAO = new LuuTruDAO();
    private ProcedureDAO spDAO = new ProcedureDAO();
    private NhanVienDAO nvDAO = new NhanVienDAO();

    private DefaultTableModel modelPhieu;
    private DefaultTableModel modelCTPhieuKiem;
    private DefaultTableModel modelHangHoaKho;

    private ArrayList<Integer> listCT = new ArrayList<>();
    private TableRowSorter<TableModel> sorterPhieu;
    private TableRowSorter<TableModel> sorterCTPhieu;
    private TableRowSorter<TableModel> sorterCTPhieu_ChiTiet;
    private TableRowSorter<TableModel> sorterHHKho;

    private String dateFormat = "dd-MM-yyyy";
    private String dateTimeFormat = "dd-MM-yyyy HH:mm:ss";

    private int rowPhieu = -1;
    private int rowCTPhieu = -1;

    private String defaultSearchHangHoa = "Nhập từ khoá tìm kiếm hàng hoá";
    private String defaultSearchPhieu = "Nhập từ khoá tìm kiếm phiếu";

    private boolean isUpdate = false;

    private void init() {
        this.setLocationRelativeTo(null);
        this.setModal(false);
        this.initDialogOther();
        
        this.formatTable();
        this.fillToComboBoxTimKiemPhieu();
        this.fillToComboBoxTimKiemCT();
        this.fillToComboBoxKho();
        this.fillToTablePhieu();
        this.fillToTableHHkho();

        tabs.setSelectedIndex(1);

        this.updateStatus();

        timer.start();
    }
    

    private void initDialogOther() {
        ChiTietPhieuJDialog.pack();
        ChiTietPhieuJDialog.setLocationRelativeTo(null);
        ChiTietPhieuJDialog.setModalityType(ModalityType.APPLICATION_MODAL);
        ChiTietPhieuJDialog.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
        
        QRCodeDialog.pack();
        QRCodeDialog.setLocationRelativeTo(null);
        QRCodeDialog.setModalityType(ModalityType.APPLICATION_MODAL);
        QRCodeDialog.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
    }

    // Đổ dữ liệu vào ComboBox kho
    private void fillToComboBoxKho() {
        DefaultComboBoxModel model = new DefaultComboBoxModel();
        model.removeAllElements();
        try {
            List<Kho> list = kDAO.selectAll();
            for (Kho k : list) {
                model.addElement(k);
            }
            cboKho.setModel(model);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // Đổ dữ liệu vào bảng phiếu kiểm
    private SwingWorker workerPhieu;

    private void fillToTablePhieu() {

        if (workerPhieu != null) {
            workerPhieu.cancel(true);
        }
        modelPhieu.setRowCount(0);
        try {
            workerPhieu = new SwingWorker() {
                @Override
                protected Object doInBackground() throws Exception {
                    Thread.sleep(100);
                    List<PhieuKiemKho> list = pkkDAO.selectAll();
                    int i = 1;
                    for (PhieuKiemKho pkk : list) {
                        if (isCancelled()) {
                            break;
                        }
                        int maLT = ctkkDAO.getOnlyOneMaLT(pkk.getMaKK());
                        if (maLT == 0) {
                            continue;
                        }
                        int maKho = ltDAO.getMaKho(maLT);
                        NhanVien nv = nvDAO.selectByID(pkk.getMaNV());
                        modelPhieu.addRow(new Object[]{
                            i++,
                            maKho,
                            XDate.toString(pkk.getNgayKiem(), dateFormat),
                            pkk.isTrangThai(),
                            nv.getTenNV(),
                            XDate.toString(pkk.getNgayLap(), dateTimeFormat),
                            pkk.getMaKK()
                        });
                    }
                    if (isCancelled()) {
                        modelPhieu.setRowCount(0);
                    }
                    return null;
                }

                @Override
                protected void done() {
                    if (rowPhieu < 0) {
                        return;
                    }
                    tblPhieu.setRowSelectionInterval(rowPhieu, rowPhieu);
                }

            };
            workerPhieu.execute();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    // Đỗ dữ liệu vào bảng chi tiết
    private SwingWorker workerCTPhieu;

    private void fillToTableCTPhieu() {
        if (workerCTPhieu != null) {
            workerCTPhieu.cancel(true);
        }
        modelCTPhieuKiem.setRowCount(0);
        listCT.clear();
        String maPhieu = tblCTPhieu.getToolTipText();
        if (maPhieu == null) {
            return;
        }

        try {
            workerCTPhieu = new SwingWorker() {
                @Override
                protected Object doInBackground() throws Exception {
                    Thread.sleep(100);
                    List<ChiTietKiemKho> list = ctkkDAO.selectByMaPhieu(Integer.parseInt(maPhieu));
                    int i = 1;
                    for (ChiTietKiemKho ctkk : list) {
                        if (isCancelled()) {
                            break;
                        }
                        listCT.add(ctkk.getMaLT());
                        LuuTru lt = ltDAO.selectByID(ctkk.getMaLT());
                        HangHoa hh = hhDAO.selectByID(lt.getMaHH());
                        modelCTPhieuKiem.addRow(new Object[]{
                            i++,
                            hh,
                            ctkk.getSoLuongTon(),
                            ctkk.getSoLuongThuc(),
                            ctkk.getMaCTKK(),
                            ctkk.getMaLT()
                        });
                    }
                    if (isCancelled()) {
                        modelCTPhieuKiem.setRowCount(0);
                    }

                    return null;
                }

                @Override
                protected void done() {
                    fillToTableHHkho();
                }

            };
            workerCTPhieu.execute();

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // Đỗ dữ liệu vào bảng hàng hóa trong kho
    private SwingWorker workerHHKho;
    private void fillToTableHHkho() {
        if (workerHHKho != null) {
            workerHHKho.cancel(true);
        }
        modelHangHoaKho.setRowCount(0);
        //String keyword
        if (cboKho.getItemCount() == 0) return;
        int maKho = ((Kho) cboKho.getSelectedItem()).getMaKho();
        try {
            workerHHKho = new SwingWorker() {
                @Override
                protected Object doInBackground() throws Exception {
                    Thread.sleep(100);
                    List<LuuTru> list = ltDAO.selectNotInList(maKho, listCT);
                    int i = 1;
                    for (LuuTru lt : list) {
                        if (isCancelled()) {
                            break;
                        }
                        HangHoa hh = hhDAO.selectByID(lt.getMaHH());
                        modelHangHoaKho.addRow(new Object[]{
                            i++,
                            hh,
                            lt.getSoLuong(),
                            lt.getMaLT()
                        });
                    }
                    if (isCancelled()) {
                        modelHangHoaKho.setRowCount(0);
                    }
                    return null;
                }
            };
            workerHHKho.execute();

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // Lấy dữ liệu từ form phiếu nhập
    private PhieuKiemKho getFormPhieu() {
        PhieuKiemKho pkk = new PhieuKiemKho();
        pkk.setMaNV(txtNguoiLap.getToolTipText());
        pkk.setNgayKiem(txtNgayKiem.getDate());
        pkk.setNgayLap(XDate.toDate(txtNgayLap.getText(), dateTimeFormat));
        pkk.setTrangThai(chkHoanThanh.isSelected());
        pkk.setGhiChu(txtGhiChu.getText());

        return pkk;
    }

    // Nhập dữ liệu vào form phiếu nhập
    private void setFormPhieu(PhieuKiemKho pkk) {
        int rowPhieuModel = tblPhieu.convertRowIndexToModel(rowPhieu);
        int maKho = (int) modelPhieu.getValueAt(rowPhieuModel, 1);
        Kho k = kDAO.selectByID(maKho);
        NhanVien nv = nvDAO.selectByID(pkk.getMaNV());

        txtNguoiLap.setText(nv.getTenNV());
        txtNguoiLap.setToolTipText(pkk.getMaNV());
        txtNgayKiem.setDate(pkk.getNgayLap());
        txtNgayLap.setText(XDate.toString(pkk.getNgayLap(), dateTimeFormat));
        cboKho.getModel().setSelectedItem(k);
        chkHoanThanh.setSelected(pkk.isTrangThai());
        txtGhiChu.setText(pkk.getGhiChu());

        tblCTPhieu.setToolTipText(String.valueOf(pkk.getMaKK()));

        this.fillToTableCTPhieu();
    }

    // Thêm hàng hóa vào bảng Chi tiết
    private void insertCT() {
        if (tblHangHoaKho.getSelectedRow() < 0) {
            MsgBox.alert(this, "Chọn một hàng hoá muốn thêm!");
            return;
        }
        
        int selectRow = tblHangHoaKho.convertRowIndexToModel(tblHangHoaKho.getSelectedRow());
        int maLT = (Integer) modelHangHoaKho.getValueAt(selectRow, 3);
        modelCTPhieuKiem.addRow(new Object[]{
            tblCTPhieu_ChiTiet.getRowCount() + 1,
            (HangHoa) modelHangHoaKho.getValueAt(selectRow, 1),
            (Double) modelHangHoaKho.getValueAt(selectRow, 2),
            0.0,
            0,
            maLT
        });

        this.listCT.add(maLT);
        this.fillToTableHHkho();
    }

    // Xóa hàng hóa khỏi chi tiết
    private ArrayList<ChiTietKiemKho> delCTP = new ArrayList<>();

    private void deleteCT() {
        if (tblCTPhieu_ChiTiet.getSelectedRow() < 0) {
            MsgBox.alert(this, "Chọn một hàng hoá muốn xoá!");
            return;
        }
        
        int delRow = tblCTPhieu_ChiTiet.convertRowIndexToModel(tblCTPhieu_ChiTiet.getSelectedRow());
        ChiTietKiemKho ctkk = this.getFormCTPhieu(delRow);

        if (isUpdate && ctkk.getMaLT() != 0) {
            delCTP.add(ctkk);
            this.listCT.remove(new Integer(ctkk.getMaLT()));
        }
        
        modelCTPhieuKiem.removeRow(delRow);

        for (int i = 0; i < modelCTPhieuKiem.getRowCount(); i++) {
            modelCTPhieuKiem.setValueAt(i + 1, i, 0);
        }

        this.fillToTableHHkho();
    }

    // Lấy dữ liệu từ form chi tiết phiếu
    private ChiTietKiemKho getFormCTPhieu(int row) {
        ChiTietKiemKho ctkk = new ChiTietKiemKho();

        ctkk.setSoLuongTon((double) modelCTPhieuKiem.getValueAt(row, 2));
        ctkk.setSoLuongThuc((double) modelCTPhieuKiem.getValueAt(row, 3));

        ctkk.setMaCTKK((Integer) modelCTPhieuKiem.getValueAt(row, 4));
        ctkk.setMaLT((Integer) modelCTPhieuKiem.getValueAt(row, 5));

        return ctkk;
    }

    // Nhập phiếu kiểm mới vào hệ thống và cập nhật thông tin hàng hóa
    private void insertPhieu() {
        if (!isValidated()) {
            return;
        }
        PhieuKiemKho pkk = this.getFormPhieu();
        ChiTietKiemKho ctkk;
        pkkDAO.insert(pkk);

        int maKK = pkkDAO.getMaPhieuByNVandCreatedDate(pkk.getMaNV(), pkk.getNgayLap());

        int rows = modelCTPhieuKiem.getRowCount();

        if (rows < 1) {
            MsgBox.alert(this, "Danh sách hàng hoá kiểm trống!");
            return;
        }

        for (int i = 0; i < rows; i++) {
            ctkk = getFormCTPhieu(i);

            spDAO.insertPhieuKiem(ctkk, maKK);
        }

        this.clearForm();
        this.fillToTablePhieu();

        this.updateStatus();
        MsgBox.alert(this, "Thêm phiếu kiểm thành công!");
    }

    // Cập nhật phiếu vào hệ thống và cập nhật thông tin hàng hóa
    private void updatePhieu() {
        if (!isValidated()) {
            return;
        }
        PhieuKiemKho pkk = this.getFormPhieu();
        String maKK = tblCTPhieu.getToolTipText();

        if (maKK == null) {
            return;
        }

        pkk.setMaKK(Integer.valueOf(maKK));
        pkkDAO.update(pkk);

        ChiTietKiemKho ctkk;
        int rows = modelCTPhieuKiem.getRowCount();
        for (int i = 0; i < rows; i++) {
            ctkk = getFormCTPhieu(i);

            if (ctkk.getMaCTKK() != 0) {
                spDAO.updatePhieuKiem(ctkk);
            } else {
                spDAO.insertPhieuKiem(ctkk, pkk.getMaKK());
            }
        }
        for (ChiTietKiemKho ctpkDel : delCTP) {
            spDAO.deletePhieuKiem(ctpkDel);
        }

        this.fillToTablePhieu();
        this.fillToTableCTPhieu();

        MsgBox.alert(this, "Cập nhật phiếu kiểm thành công!");
    }

    private void updateTrangThaiPhieu() {
        boolean isHoanThanh = (boolean) modelPhieu.getValueAt(rowPhieu, 3);
        int maPhieu = (int) modelPhieu.getValueAt(rowPhieu, 6);
        PhieuKiemKho pkk = pkkDAO.selectByID(maPhieu);
        pkk.setTrangThai(isHoanThanh);
        pkkDAO.update(pkk);
    }
    
    private void updateSoLuongThuc(JTable table, int row) {
        Double soLuongThuc = (Double) table.getValueAt(row, 3);
        int maChiTiet = (int) table.getModel().getValueAt(table.convertRowIndexToModel(row), 4);
        ChiTietKiemKho ctkk = ctkkDAO.selectByID(maChiTiet);
        ctkk.setSoLuongThuc(soLuongThuc);
        ctkkDAO.update(ctkk);
    }

    // Xóa phiếu kiểm khỏi hệ thống
    private void deletePhieu() {
        String maKK = tblCTPhieu.getToolTipText();

        if (maKK == null) {
            return;
        }

        int rows = modelCTPhieuKiem.getRowCount();
        ChiTietKiemKho ctpk;
        for (ChiTietKiemKho ctpkDel : delCTP) {
            spDAO.deletePhieuKiem(ctpkDel);
        }
        for (int i = 0; i < rows; i++) {
            ctpk = getFormCTPhieu(i);
            if (ctpk.getMaCTKK() != 0) {
                spDAO.deletePhieuKiem(ctpk);
            }
        }

        pkkDAO.delete(Integer.valueOf(maKK));

        this.clearForm();
        this.fillToTablePhieu();

        MsgBox.alert(this, "Xóa phiếu kiểm thành công!");
    }

    // Xóa trắng form
    private void clearForm() {
        Date NgayLap = new Date(System.currentTimeMillis());
        
        txtNguoiLap.setToolTipText(Auth.user.getMaNV());
        txtNguoiLap.setText(Auth.user.getTenNV());
        txtNgayLap.setText(XDate.toString(NgayLap, dateTimeFormat));
        txtGhiChu.setText(null);
        tblCTPhieu.setToolTipText(null);
        txtNgayKiem.setDate(new Date());
        chkHoanThanh.setSelected(false);
        if (cboKho.getItemCount() > 0){
            cboKho.setSelectedIndex(0);
        }
        
        this.fillToTableCTPhieu();

        isUpdate = false;

        this.rowPhieu = -1;
        this.rowCTPhieu = -1;

        this.updateStatus();
    }

    private void formatTable() {
        String[] headerPhieuKiem = {"STT", "KHO", "NGÀY KIỂM", "HOÀN THÀNH", "NGƯỜI LẬP", "NGÀY LẬP", "MÃ PHIẾU"};
        this.modelPhieu = new DefaultTableModel(headerPhieuKiem, 0) {
            @Override
            public boolean isCellEditable(int row, int column) {
                if (column == 3) {
                    return true;
                }
                return false;
            }

            Class[] types = new Class[]{
                Integer.class, Integer.class, String.class, Boolean.class,
                String.class, String.class, Integer.class
            };

            @Override
            public Class getColumnClass(int columnIndex) {
                //return getValueAt(0, columnIndex).getClass();
                return types[columnIndex];
            }
        };

        String[] headerCTPhieuKiem = {"STT", "HÀNG HOÁ", "SỐ LƯỢNG TỒN", "SỐ LƯỢNG THỰC", "MÃ CHI TIẾT", "MÃ LƯU TRỮ"};
        this.modelCTPhieuKiem = new DefaultTableModel(headerCTPhieuKiem, 0) {
            @Override
            public boolean isCellEditable(int row, int column) {
                if (column == 3) {
                    return true;
                }
                return false;
            }

            Class[] types = new Class[]{
                Integer.class, HangHoa.class, Integer.class, Integer.class,
                Integer.class, Integer.class
            };

            @Override
            public Class getColumnClass(int columnIndex) {
                return types[columnIndex];
            }
        };

        String[] headerHangHoaKho = {"STT", "HÀNG HOÁ", "SỐ LƯỢNG TỒN", "LƯU TRỮ"};
        this.modelHangHoaKho = new DefaultTableModel(headerHangHoaKho, 0) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }

            Class[] types = new Class[]{
                Integer.class, HangHoa.class, Integer.class, Integer.class,
                Integer.class
            };

            @Override
            public Class getColumnClass(int columnIndex) {
                return types[columnIndex];
            }
        };

        tblPhieu.setModel(modelPhieu);
        tblCTPhieu_ChiTiet.setModel(modelCTPhieuKiem);
        tblCTPhieu.setModel(modelCTPhieuKiem);
        tblHangHoaKho.setModel(modelHangHoaKho);
        
        // Cài đặt bộ lọc cho bảng
        sorterPhieu = new TableRowSorter<>(modelPhieu);
        sorterPhieu.setStringConverter(new LowerCaseStringConverter());
        sorterPhieu.setComparator(2, new DateComparator(dateFormat));
        sorterPhieu.setComparator(5, new DateTimeComparator(dateTimeFormat));

        sorterCTPhieu = new TableRowSorter<>(modelCTPhieuKiem);
        sorterCTPhieu.setStringConverter(new LowerCaseStringConverter());

        sorterCTPhieu_ChiTiet = new TableRowSorter<>(modelCTPhieuKiem);
        sorterCTPhieu_ChiTiet.setStringConverter(new LowerCaseStringConverter());

        sorterHHKho = new TableRowSorter<>(modelHangHoaKho);
        sorterHHKho.setStringConverter(new LowerCaseStringConverter());

        tblPhieu.setRowSorter(sorterPhieu);
        tblCTPhieu.setRowSorter(sorterCTPhieu);
        tblCTPhieu_ChiTiet.setRowSorter(sorterCTPhieu_ChiTiet);
        tblHangHoaKho.setRowSorter(sorterHHKho);

        // Giấu cột
        tblPhieu.getColumnModel().removeColumn(tblPhieu.getColumnModel().getColumn(6));
        tblCTPhieu_ChiTiet.getColumnModel().removeColumn(tblCTPhieu_ChiTiet.getColumnModel().getColumn(5));
        tblCTPhieu_ChiTiet.getColumnModel().removeColumn(tblCTPhieu_ChiTiet.getColumnModel().getColumn(4));
        tblCTPhieu.getColumnModel().removeColumn(tblCTPhieu.getColumnModel().getColumn(5));
        tblCTPhieu.getColumnModel().removeColumn(tblCTPhieu.getColumnModel().getColumn(4));
        tblHangHoaKho.getColumnModel().removeColumn(tblHangHoaKho.getColumnModel().getColumn(3));

        // Chỉnh độ rộng hàng trong bảng
        tblPhieu.setRowHeight(25);
        tblCTPhieu_ChiTiet.setRowHeight(25);
        tblCTPhieu.setRowHeight(25);

        // Thêm chức năng nhập cho bảng
        JSpinnerEditor spinnerEditor = new JSpinnerEditor(0.0, 0.0, 10000000.0, 1.0);
        
        tblCTPhieu_ChiTiet.getColumnModel().getColumn(3).setCellEditor(spinnerEditor);
        tblCTPhieu.getColumnModel().getColumn(3).setCellEditor(spinnerEditor);

        // Chỉnh size cột các bảng
        tblCTPhieu.getColumnModel().getColumn(0).setPreferredWidth(47);
        tblCTPhieu.getColumnModel().getColumn(1).setPreferredWidth(400);
        tblCTPhieu.getColumnModel().getColumn(2).setPreferredWidth(120);
        tblCTPhieu.getColumnModel().getColumn(3).setPreferredWidth(120);

        tblHangHoaKho.getColumnModel().getColumn(0).setPreferredWidth(46);
        tblHangHoaKho.getColumnModel().getColumn(1).setPreferredWidth(380);
        tblHangHoaKho.getColumnModel().getColumn(2).setPreferredWidth(150);

        tblCTPhieu_ChiTiet.getColumnModel().getColumn(0).setPreferredWidth(46);
        tblCTPhieu_ChiTiet.getColumnModel().getColumn(1).setPreferredWidth(330);
        tblCTPhieu_ChiTiet.getColumnModel().getColumn(2).setPreferredWidth(100);
        tblCTPhieu_ChiTiet.getColumnModel().getColumn(3).setPreferredWidth(100);

        tblPhieu.getColumnModel().getColumn(0).setPreferredWidth(46);
        tblPhieu.getColumnModel().getColumn(1).setPreferredWidth(46);
        tblPhieu.getColumnModel().getColumn(2).setPreferredWidth(185);
        tblPhieu.getColumnModel().getColumn(3).setPreferredWidth(185);
        tblPhieu.getColumnModel().getColumn(4).setPreferredWidth(185);
        tblPhieu.getColumnModel().getColumn(5).setPreferredWidth(186);

        // Định dạng form
        tblCTPhieu.getColumnModel().getColumn(0).setCellRenderer(TableNumberCellRenderer.getIntegerRenderer());
        tblCTPhieu.getColumnModel().getColumn(2).setCellRenderer(TableNumberCellRenderer.getIntegerRenderer());
        tblCTPhieu.getColumnModel().getColumn(3).setCellRenderer(TableNumberCellRenderer.getIntegerRenderer());
        tblCTPhieu_ChiTiet.getColumnModel().getColumn(0).setCellRenderer(TableNumberCellRenderer.getIntegerRenderer());
        tblCTPhieu_ChiTiet.getColumnModel().getColumn(2).setCellRenderer(TableNumberCellRenderer.getIntegerRenderer());
        tblCTPhieu_ChiTiet.getColumnModel().getColumn(3).setCellRenderer(TableNumberCellRenderer.getIntegerRenderer());
        tblHangHoaKho.getColumnModel().getColumn(0).setCellRenderer(TableNumberCellRenderer.getIntegerRenderer());
        tblHangHoaKho.getColumnModel().getColumn(2).setCellRenderer(TableNumberCellRenderer.getIntegerRenderer());
        tblPhieu.getColumnModel().getColumn(0).setCellRenderer(TableNumberCellRenderer.getIntegerRenderer());
        tblPhieu.getColumnModel().getColumn(1).setCellRenderer(TableNumberCellRenderer.getIntegerRenderer());

        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(JLabel.CENTER);
        tblPhieu.getColumnModel().getColumn(2).setCellRenderer(centerRenderer);
        tblPhieu.getColumnModel().getColumn(5).setCellRenderer(centerRenderer);
        tblPhieu.getColumnModel().getColumn(4).setCellRenderer(centerRenderer);
    }

    private void createQRCode() {
        int rowPhieuModel = tblPhieu.convertRowIndexToModel(rowPhieu);
        if (rowPhieuModel < 0) {
            MsgBox.alert(this, "Chưa chọn chi tiết phiếu!");
        } else {
            int maPhieu = (int) this.modelPhieu.getValueAt(rowPhieuModel, 6);
            try {
                BufferedImage bi = QRCode.generateQRCodeImage(String.valueOf(maPhieu));
                lblQRCodeImage.setIcon(new ImageIcon(bi));
                QRCodeDialog.setVisible(true);
            } catch (WriterException ex) {
                MsgBox.alert(this, "Lỗi tạo mã QR không thành công!");
                ex.printStackTrace();
            }
        }
    }

    // Xuất file excel
    private final String reportPath = "/com/stoman/reports/InPhieuKiemKho.jrxml";

    private void exportReportExcel() {
        int rowPhieuModel = tblPhieu.convertRowIndexToModel(rowPhieu);
        if (rowPhieuModel < 0) {
            MsgBox.alert(this, "Chưa chọn phiếu!");
            return;
        }

        try {
            int maKK = (int) this.modelPhieu.getValueAt(rowPhieuModel, 6);

            // Truyền tham số vào báo cáo
            HashMap parameters = new HashMap();
            parameters.put("MAKK", maKK);

            String fileName = "PhieuKiemKhoSo" + maKK;
            XReport.exportFile(fileName, reportPath, parameters);
        } catch (SQLException | JRException | IOException e) {
            MsgBox.alert(this, "Xuất file thất bại!");
            e.printStackTrace();
        }
    }

    // In báo báo
    private void printReport() {
        int rowPhieuModel = tblPhieu.convertRowIndexToModel(rowPhieu);
        if (rowPhieuModel < 0) {
            MsgBox.alert(this, "Chưa chọn phiếu!");
            return;
        }

        try {
            int maKK = (int) this.modelPhieu.getValueAt(rowPhieuModel, 6);

            // Truyền tham số vào báo cáo
            HashMap parameters = new HashMap();
            parameters.put("MAKK", maKK);

            String fileName = "PhieuKiemKhoSo" + maKK;
            XReport.printReport(fileName, reportPath, parameters);
        } catch (SQLException | JRException e) {
            MsgBox.alert(this, "In phiếu thất bại!");
            e.printStackTrace();
        }
    }

    // Cập nhật giao diện form theo hoạt động của người dùng
    private void updateStatus() {
        // Kiểm tra trạng thái chọn phiếu trên bảng
        boolean edit = (this.rowPhieu >= 0);
        boolean first = (this.rowPhieu == 0);
        boolean last = (this.rowPhieu == tblPhieu.getRowCount() - 1);

        btnThem.setEnabled(!edit);
        btnSua.setEnabled(edit);
        btnXoa.setEnabled(edit);
        btnXuatMaPhieu.setEnabled(edit);
        btnInPhieu.setEnabled(edit);
        btnXuatFile.setEnabled(edit);
        btnChiTiet.setEnabled(edit);

        btnFirst.setEnabled(edit && !first);
        btnPrev.setEnabled(edit && !first);
        btnNext.setEnabled(edit && !last);
        btnLast.setEnabled(edit && !last);

        // Kiểm tra vai trò người dùng, hạn chế quyền thủ kho
        boolean isManager = Auth.isManager();
        btnXoa.setVisible(isManager);

        // Cập nhật trạng thái update phiếu
        cboKho.setEnabled(!isUpdate);
    }

    private boolean isValidated() {
        if (txtNgayKiem.getDate() == null) {
            MsgBox.alert(this, "Chưa nhập ngày thực hiện!");
            txtNgayKiem.requestFocus();
            return false;
        }

        Date ngayLap = XDate.toDate(txtNgayLap.getText(), dateFormat);
        if (txtNgayKiem.getDate().before(ngayLap)) {
            MsgBox.alert(this, "Ngày kiểm kho không nhỏ hơn ngày lập phiếu!");
            txtNgayKiem.requestFocus();
            return false;
        }
        return true;
    }

    private void edit() {
        if (this.rowPhieu < 0) {
            return;
        }
        
        delCTP.clear();

        int rowPhieuModel = tblPhieu.convertRowIndexToModel(this.rowPhieu);
        int maPkk = (Integer) this.modelPhieu.getValueAt(rowPhieuModel, 6);
        PhieuKiemKho pkk = pkkDAO.selectByID(maPkk);
        this.setFormPhieu(pkk);
        tabs.setSelectedIndex(0);

        isUpdate = true;
        this.updateStatus();
        tblPhieu.setRowSelectionInterval(rowPhieu, rowPhieu);
    }

    // Hiển thị phiếu đầu danh sách
    private void first() {
        this.rowPhieu = 0;
        this.edit();
    }

    // Hiển thị phiếu kế trước
    private void prev() {
        if (this.rowPhieu > 0) {
            this.rowPhieu--;
            this.edit();
        }
    }

    // Hiển thị phiếu kế tiếp
    private void next() {
        if (this.rowPhieu < (tblPhieu.getRowCount() - 1)) {
            this.rowPhieu++;
            this.edit();
        }
    }

    // Hiển thị phiếu cuối danh sách
    private void last() {
        this.rowPhieu = tblPhieu.getRowCount() - 1;
        this.edit();
    }

    // Đổ lại dữ liệu 
    public void refreshForm() {

        this.fillToComboBoxKho();
        this.fillToTablePhieu();
        this.fillToTableCTPhieu();
        this.fillToTableHHkho();

        this.timer.restart();
    }

    // sau hai phút tải lại dữ liệu
    private Timer timer = new Timer(120000, (e) -> {
        refreshForm();
    });

    // Đổ tên bảng vào combobox tìm kiếm
    private void fillToComboBoxTimKiemCT() {
        DefaultComboBoxModel model = (DefaultComboBoxModel) cboTimKiemCT.getModel();
        model.removeAllElements();
        for (int i = 0; i < tblCTPhieu.getColumnCount(); i++) {
            String columnName = tblCTPhieu.getColumnName(i);
            model.addElement(columnName);
        }
    }

    // Lọc bảng theo từ khoá phiếu
    private void searchCTPhieu() {
        int columnFilter = cboTimKiemCT.getSelectedIndex();
        String keyword = txtTimKiemCT.getText();
        if (keyword.equals(defaultSearchHangHoa)) {
            keyword = "";
        }

        RowFilter<TableModel, Object> rf = null;
        try {
            rf = RowFilter.regexFilter(keyword.toLowerCase(), columnFilter);
        } catch (Exception e) {
            return;
        }
        sorterCTPhieu.setRowFilter(rf);
    }

    private void searchCTPhieu_ChiTiet() {
        String keyword = txtTimKiemCTP.getText();
        if (keyword.equals(defaultSearchHangHoa)) {
            keyword = "";
        }

        RowFilter<TableModel, Object> rf = null;
        try {
            rf = RowFilter.regexFilter(keyword.toLowerCase());
        } catch (Exception e) {
            return;
        }
        sorterCTPhieu_ChiTiet.setRowFilter(rf);
    }

    private void searchHangHoaKho() {
        String keyword = txtTimKiemHHKho.getText();
        if (keyword.equals(defaultSearchHangHoa)) {
            keyword = "";
        }

        RowFilter<TableModel, Object> rf = null;
        try {
            rf = RowFilter.regexFilter(keyword.toLowerCase());
        } catch (Exception e) {
            return;
        }
        sorterHHKho.setRowFilter(rf);
    }

    // Đổ tên bảng vào combobox tìm kiếm
    private void fillToComboBoxTimKiemPhieu() {
        DefaultComboBoxModel model = (DefaultComboBoxModel) cboTimKiemPhieu.getModel();
        model.removeAllElements();
        for (int i = 0; i < tblPhieu.getColumnCount(); i++) {
            String columnName = tblPhieu.getColumnName(i);
            if (tblPhieu.getColumnName(i).equalsIgnoreCase("HOÀN THÀNH")) {
                continue;
            }
            model.addElement(columnName);
        }
    }
//
    // Lọc bảng theo từ khoá phiếu

    private void searchPhieu() {
        int columnFilter = cboTimKiemPhieu.getSelectedIndex();
        if (columnFilter > 2) {
            columnFilter++;
        }
        String keyword = txtTimKiemPhieu.getText();
        if (keyword.equals(defaultSearchPhieu)) {
            keyword = "";
        }

        RowFilter<TableModel, Object> rf = null;
        try {
            rf = RowFilter.regexFilter(keyword.toLowerCase(), columnFilter);
        } catch (Exception e) {
            return;
        }
        sorterPhieu.setRowFilter(rf);
    }

    // Ánh xạ dòng được chọn của bảng này sang bảng khác
    private void mapSelectionTable(JTable TableToClick, JTable TableToMap) {
        int rowTableToClick = TableToClick.convertRowIndexToModel(TableToClick.getSelectedRow());
        int rowTableToMap = TableToMap.convertRowIndexToView(rowTableToClick);
        TableToMap.setRowSelectionInterval(rowTableToMap, rowTableToMap);
    }
    
    // Nhấn enter không xuống dòng tiếp theo khi đang sửa ô trong table
    private void disableEnterCellNextLine(JTable table) {
        int row = table.getSelectedRow();
        if (row == 0) {
            row = table.getRowCount() - 1;
        } else {
            row--;
        }
        table.setRowSelectionInterval(row, row);
    }
    
}

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.stoman.ui;

import com.formdev.flatlaf.FlatIntelliJLaf;
import com.stoman.dao.HangHoaDAO;
import com.stoman.dao.LoaiHangHoaDAO;
import com.stoman.entity.HangHoa;
import com.stoman.entity.LoaiHangHoa;
import com.stoman.utils.Auth;
import com.stoman.utils.DoubleComparator;
import com.stoman.utils.MsgBox;
import com.stoman.utils.JSpinnerStringEditor;
import com.stoman.utils.LowerCaseStringConverter;
import com.stoman.utils.XNumber;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JLabel;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.RowFilter;
import javax.swing.SwingWorker;
import javax.swing.Timer;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author MinhNH
 */
public class HangHoaJDialog extends javax.swing.JDialog {

    /**
     * Creates new form HangHoaJDialog
     */
    public HangHoaJDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        init();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        pnlBackground = new javax.swing.JPanel();
        pnlThongTinHangHoa = new javax.swing.JPanel();
        lblMaHangHoa = new javax.swing.JLabel();
        lblTenHangHoa = new javax.swing.JLabel();
        lblDonViTinh = new javax.swing.JLabel();
        lblDonGia = new javax.swing.JLabel();
        txtMaHH = new com.stoman.utils.JTextFieldCustom();
        txtTenHH = new com.stoman.utils.JTextFieldCustom();
        txtDonViTinh = new com.stoman.utils.JTextFieldCustom();
        txtDonGia = new javax.swing.JFormattedTextField();
        pnlTimKiem = new javax.swing.JPanel();
        txtTimKiemHangHoa = new com.stoman.utils.JTextFieldCustom(defaultSearchHangHoa);
        lblTimKiem2 = new javax.swing.JLabel();
        cboTimKiemHangHoa = new javax.swing.JComboBox<>();
        lblLHH1 = new javax.swing.JLabel();
        pnlDieuHuongTitle = new javax.swing.JPanel();
        pnlDieuHuong = new javax.swing.JPanel();
        btnFirst = new javax.swing.JButton();
        btnPrev = new javax.swing.JButton();
        btnNext = new javax.swing.JButton();
        btnLast = new javax.swing.JButton();
        pnlTblHangHoa = new javax.swing.JScrollPane();
        tblHangHoa = new javax.swing.JTable();
        pnlLoaiHangHoa = new javax.swing.JPanel();
        pnlLstLoaiHangHoa = new javax.swing.JScrollPane();
        lstLHH = new javax.swing.JList<>();
        pnlButtonLoaiHH = new javax.swing.JPanel();
        btnThemLHH = new javax.swing.JButton();
        btnXoaLHH = new javax.swing.JButton();
        btnSuaLHH = new javax.swing.JButton();
        lblLHH = new javax.swing.JLabel();
        txtTimKiemLHH = new com.stoman.utils.JTextFieldCustom(defaultSearchLoaiHH);
        pnlChucNang = new javax.swing.JPanel();
        btnThem = new javax.swing.JButton();
        btnXoa = new javax.swing.JButton();
        btnSua = new javax.swing.JButton();
        btnMoi = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("StoMan - Quản lý hàng hoá");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        pnlThongTinHangHoa.setBackground(new java.awt.Color(255, 255, 255));
        pnlThongTinHangHoa.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Thông tin hàng hoá", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 13))); // NOI18N
        pnlThongTinHangHoa.setForeground(new java.awt.Color(255, 255, 255));
        pnlThongTinHangHoa.setOpaque(false);

        lblMaHangHoa.setFont(new java.awt.Font("Segoe UI", 1, 13)); // NOI18N
        lblMaHangHoa.setForeground(new java.awt.Color(102, 102, 102));
        lblMaHangHoa.setText("Mã hàng hoá");

        lblTenHangHoa.setFont(new java.awt.Font("Segoe UI", 1, 13)); // NOI18N
        lblTenHangHoa.setForeground(new java.awt.Color(102, 102, 102));
        lblTenHangHoa.setText("Tên hàng hoá");

        lblDonViTinh.setFont(new java.awt.Font("Segoe UI", 1, 13)); // NOI18N
        lblDonViTinh.setForeground(new java.awt.Color(102, 102, 102));
        lblDonViTinh.setText("Đơn vị tính");

        lblDonGia.setFont(new java.awt.Font("Segoe UI", 1, 13)); // NOI18N
        lblDonGia.setForeground(new java.awt.Color(102, 102, 102));
        lblDonGia.setText("Đơn giá");

        txtDonGia.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,##0"))));
        txtDonGia.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtDonGiaFocusGained(evt);
            }
        });

        javax.swing.GroupLayout pnlThongTinHangHoaLayout = new javax.swing.GroupLayout(pnlThongTinHangHoa);
        pnlThongTinHangHoa.setLayout(pnlThongTinHangHoaLayout);
        pnlThongTinHangHoaLayout.setHorizontalGroup(
            pnlThongTinHangHoaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlThongTinHangHoaLayout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(pnlThongTinHangHoaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblTenHangHoa)
                    .addComponent(lblMaHangHoa)
                    .addComponent(lblDonViTinh)
                    .addComponent(lblDonGia))
                .addGap(10, 10, 10)
                .addGroup(pnlThongTinHangHoaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtDonViTinh)
                    .addComponent(txtMaHH)
                    .addComponent(txtTenHH)
                    .addComponent(txtDonGia))
                .addGap(12, 12, 12))
        );
        pnlThongTinHangHoaLayout.setVerticalGroup(
            pnlThongTinHangHoaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlThongTinHangHoaLayout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(pnlThongTinHangHoaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblMaHangHoa)
                    .addComponent(txtMaHH, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlThongTinHangHoaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTenHangHoa)
                    .addComponent(txtTenHH, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlThongTinHangHoaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblDonViTinh)
                    .addComponent(txtDonViTinh, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlThongTinHangHoaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblDonGia)
                    .addComponent(txtDonGia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(12, Short.MAX_VALUE))
        );

        pnlTimKiem.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Tìm kiếm", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 13))); // NOI18N
        pnlTimKiem.setOpaque(false);

        txtTimKiemHangHoa.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtTimKiemHangHoaKeyReleased(evt);
            }
        });

        lblTimKiem2.setText("theo");

        cboTimKiemHangHoa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboTimKiemHangHoaActionPerformed(evt);
            }
        });

        lblLHH1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/stoman/icons/search_24px.png"))); // NOI18N

        javax.swing.GroupLayout pnlTimKiemLayout = new javax.swing.GroupLayout(pnlTimKiem);
        pnlTimKiem.setLayout(pnlTimKiemLayout);
        pnlTimKiemLayout.setHorizontalGroup(
            pnlTimKiemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlTimKiemLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblLHH1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtTimKiemHangHoa, javax.swing.GroupLayout.DEFAULT_SIZE, 350, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblTimKiem2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cboTimKiemHangHoa, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        pnlTimKiemLayout.setVerticalGroup(
            pnlTimKiemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlTimKiemLayout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addGroup(pnlTimKiemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblLHH1)
                    .addGroup(pnlTimKiemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtTimKiemHangHoa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblTimKiem2)
                        .addComponent(cboTimKiemHangHoa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(9, 9, 9))
        );

        pnlDieuHuongTitle.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Điều hướng", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 13))); // NOI18N
        pnlDieuHuongTitle.setOpaque(false);

        pnlDieuHuong.setLayout(new java.awt.GridLayout(1, 0));

        btnFirst.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/stoman/icons/skip-to-start.png"))); // NOI18N
        btnFirst.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFirstActionPerformed(evt);
            }
        });
        pnlDieuHuong.add(btnFirst);

        btnPrev.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/stoman/icons/double-left-24.png"))); // NOI18N
        btnPrev.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrevActionPerformed(evt);
            }
        });
        pnlDieuHuong.add(btnPrev);

        btnNext.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/stoman/icons/double-right.png"))); // NOI18N
        btnNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNextActionPerformed(evt);
            }
        });
        pnlDieuHuong.add(btnNext);

        btnLast.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/stoman/icons/skip-to-end.png"))); // NOI18N
        btnLast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLastActionPerformed(evt);
            }
        });
        pnlDieuHuong.add(btnLast);

        javax.swing.GroupLayout pnlDieuHuongTitleLayout = new javax.swing.GroupLayout(pnlDieuHuongTitle);
        pnlDieuHuongTitle.setLayout(pnlDieuHuongTitleLayout);
        pnlDieuHuongTitleLayout.setHorizontalGroup(
            pnlDieuHuongTitleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlDieuHuongTitleLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlDieuHuong, javax.swing.GroupLayout.DEFAULT_SIZE, 258, Short.MAX_VALUE)
                .addContainerGap())
        );
        pnlDieuHuongTitleLayout.setVerticalGroup(
            pnlDieuHuongTitleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlDieuHuongTitleLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlDieuHuong, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pnlTblHangHoa.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Danh sách hàng hoá", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 13))); // NOI18N
        pnlTblHangHoa.setOpaque(false);

        tblHangHoa.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mã hàng hoá", "Tên hàng hoá", "Đơn vị tính", "Đơn giá"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblHangHoa.setOpaque(false);
        tblHangHoa.setRowHeight(25);
        tblHangHoa.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tblHangHoa.getTableHeader().setReorderingAllowed(false);
        tblHangHoa.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                tblHangHoaFocusGained(evt);
            }
        });
        tblHangHoa.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblHangHoaMouseClicked(evt);
            }
        });
        tblHangHoa.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                tblHangHoaPropertyChange(evt);
            }
        });
        tblHangHoa.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tblHangHoaKeyReleased(evt);
            }
        });
        pnlTblHangHoa.setViewportView(tblHangHoa);

        pnlLoaiHangHoa.setBackground(new java.awt.Color(255, 255, 255));
        pnlLoaiHangHoa.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Loại hàng hoá", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 13))); // NOI18N
        pnlLoaiHangHoa.setOpaque(false);

        lstLHH.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lstLHHMouseClicked(evt);
            }
        });
        pnlLstLoaiHangHoa.setViewportView(lstLHH);

        pnlButtonLoaiHH.setLayout(new java.awt.GridLayout(1, 0));

        btnThemLHH.setText("Thêm");
        btnThemLHH.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnThemLHHActionPerformed(evt);
            }
        });
        pnlButtonLoaiHH.add(btnThemLHH);

        btnXoaLHH.setText("Xoá");
        btnXoaLHH.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnXoaLHHActionPerformed(evt);
            }
        });
        pnlButtonLoaiHH.add(btnXoaLHH);

        btnSuaLHH.setText("Sửa");
        btnSuaLHH.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSuaLHHActionPerformed(evt);
            }
        });
        pnlButtonLoaiHH.add(btnSuaLHH);

        lblLHH.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/stoman/icons/search_24px.png"))); // NOI18N

        txtTimKiemLHH.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtTimKiemLHHKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout pnlLoaiHangHoaLayout = new javax.swing.GroupLayout(pnlLoaiHangHoa);
        pnlLoaiHangHoa.setLayout(pnlLoaiHangHoaLayout);
        pnlLoaiHangHoaLayout.setHorizontalGroup(
            pnlLoaiHangHoaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlLoaiHangHoaLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlLoaiHangHoaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnlButtonLoaiHH, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnlLstLoaiHangHoa)
                    .addGroup(pnlLoaiHangHoaLayout.createSequentialGroup()
                        .addComponent(lblLHH)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtTimKiemLHH)))
                .addContainerGap())
        );
        pnlLoaiHangHoaLayout.setVerticalGroup(
            pnlLoaiHangHoaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlLoaiHangHoaLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlLoaiHangHoaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblLHH)
                    .addComponent(txtTimKiemLHH, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlLstLoaiHangHoa, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlButtonLoaiHH, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pnlChucNang.setBackground(new java.awt.Color(255, 255, 255));
        pnlChucNang.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Chức năng", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 13))); // NOI18N
        pnlChucNang.setOpaque(false);
        pnlChucNang.setLayout(new java.awt.GridBagLayout());

        btnThem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/stoman/icons/icons8_add_list_24px_4.png"))); // NOI18N
        btnThem.setText("Thêm hàng hoá");
        btnThem.setPreferredSize(new java.awt.Dimension(145, 35));
        btnThem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnThemActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        pnlChucNang.add(btnThem, gridBagConstraints);

        btnXoa.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/stoman/icons/icons8_delete_document_24px.png"))); // NOI18N
        btnXoa.setText("Xoá hàng hoá");
        btnXoa.setPreferredSize(new java.awt.Dimension(145, 35));
        btnXoa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnXoaActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        pnlChucNang.add(btnXoa, gridBagConstraints);

        btnSua.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/stoman/icons/edit-property.png"))); // NOI18N
        btnSua.setText("Sửa hàng hoá");
        btnSua.setPreferredSize(new java.awt.Dimension(145, 35));
        btnSua.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSuaActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        pnlChucNang.add(btnSua, gridBagConstraints);

        btnMoi.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/stoman/icons/icons8_document_24px.png"))); // NOI18N
        btnMoi.setText("Làm mới");
        btnMoi.setPreferredSize(new java.awt.Dimension(145, 35));
        btnMoi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMoiActionPerformed(evt);
            }
        });
        pnlChucNang.add(btnMoi, new java.awt.GridBagConstraints());

        javax.swing.GroupLayout pnlBackgroundLayout = new javax.swing.GroupLayout(pnlBackground);
        pnlBackground.setLayout(pnlBackgroundLayout);
        pnlBackgroundLayout.setHorizontalGroup(
            pnlBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlBackgroundLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlLoaiHangHoa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlThongTinHangHoa, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlChucNang, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlBackgroundLayout.createSequentialGroup()
                .addGroup(pnlBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(pnlBackgroundLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(pnlTimKiem, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pnlDieuHuongTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlBackgroundLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(pnlTblHangHoa)))
                .addGap(10, 10, 10))
        );
        pnlBackgroundLayout.setVerticalGroup(
            pnlBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlBackgroundLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(pnlThongTinHangHoa, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnlLoaiHangHoa, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnlChucNang, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(pnlTimKiem, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnlDieuHuongTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlTblHangHoa, javax.swing.GroupLayout.DEFAULT_SIZE, 280, Short.MAX_VALUE)
                .addContainerGap())
        );

        getContentPane().add(pnlBackground, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tblHangHoaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblHangHoaMouseClicked
        this.row = tblHangHoa.getSelectedRow();
        this.edit();
    }//GEN-LAST:event_tblHangHoaMouseClicked

    private void lstLHHMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lstLHHMouseClicked
        // TODO add your handling code here:
        cboTimKiemHangHoa.setSelectedIndex(0);
        this.fillToTableHangHoa();
        this.clearForm();
        this.updateStatus();
    }//GEN-LAST:event_lstLHHMouseClicked

    private void btnFirstActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFirstActionPerformed
        // TODO add your handling code here:
        first();
    }//GEN-LAST:event_btnFirstActionPerformed

    private void btnPrevActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrevActionPerformed
        // TODO add your handling code here:
        prev();
    }//GEN-LAST:event_btnPrevActionPerformed

    private void btnNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNextActionPerformed
        // TODO add your handling code here:
        next();
    }//GEN-LAST:event_btnNextActionPerformed

    private void btnMoiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMoiActionPerformed
        // TODO add your handling code here:
        clearForm();
    }//GEN-LAST:event_btnMoiActionPerformed

    private void btnThemLHHActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnThemLHHActionPerformed
        // TODO add your handling code here:
        insertLHH();
    }//GEN-LAST:event_btnThemLHHActionPerformed

    private void btnXoaLHHActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnXoaLHHActionPerformed
        // TODO add your handling code here:
        deleteLHH();
    }//GEN-LAST:event_btnXoaLHHActionPerformed

    private void btnThemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnThemActionPerformed
        // TODO add your handling code here:
        insert();
    }//GEN-LAST:event_btnThemActionPerformed

    private void btnXoaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnXoaActionPerformed
        // TODO add your handling code here:
        delete();
    }//GEN-LAST:event_btnXoaActionPerformed

    private void btnSuaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSuaActionPerformed
        // TODO add your handling code here:
        update();
    }//GEN-LAST:event_btnSuaActionPerformed

    private void btnLastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLastActionPerformed
        // TODO add your handling code here:
        last();
    }//GEN-LAST:event_btnLastActionPerformed

    private void cboTimKiemHangHoaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboTimKiemHangHoaActionPerformed
        // TODO add your handling code here:
        if (!lstLHH.isSelectionEmpty()) {
            txtTimKiemHangHoa.setText(defaultSearchHangHoa);
            searchPhieu();
            clearForm();
        }
    }//GEN-LAST:event_cboTimKiemHangHoaActionPerformed

    private void txtTimKiemHangHoaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtTimKiemHangHoaKeyReleased
        // TODO add your handling code here:
        if (!lstLHH.isSelectionEmpty()) {
            searchPhieu();
            clearForm();
        }
    }//GEN-LAST:event_txtTimKiemHangHoaKeyReleased

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        // TODO add your handling code here:
        this.timer.stop();
    }//GEN-LAST:event_formWindowClosed

    private void btnSuaLHHActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSuaLHHActionPerformed
        // TODO add your handling code here:
        updateLHH();
    }//GEN-LAST:event_btnSuaLHHActionPerformed

    private void txtTimKiemLHHKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtTimKiemLHHKeyReleased
        // TODO add your handling code here:
        fillToListLoaiHangHoa();
    }//GEN-LAST:event_txtTimKiemLHHKeyReleased

    private void txtDonGiaFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDonGiaFocusGained
        // TODO add your handling code here:
        txtDonGia.selectAll();
    }//GEN-LAST:event_txtDonGiaFocusGained

    private void tblHangHoaPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_tblHangHoaPropertyChange
        // TODO add your handling code here:
        if (this.row >= 0) {
            updateDonGia();
        }
    }//GEN-LAST:event_tblHangHoaPropertyChange

    private void tblHangHoaFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tblHangHoaFocusGained
        // TODO add your handling code here:
        this.row = tblHangHoa.getSelectedRow();
        this.edit();
    }//GEN-LAST:event_tblHangHoaFocusGained

    private void tblHangHoaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tblHangHoaKeyReleased
        // TODO add your handling code here:
        disableEnterCellNextLine(tblHangHoa);
        updateDonGia();
    }//GEN-LAST:event_tblHangHoaKeyReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            javax.swing.UIManager.setLookAndFeel(new FlatIntelliJLaf());
        } catch (UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(HangHoaJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                HangHoaJDialog dialog = new HangHoaJDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnFirst;
    private javax.swing.JButton btnLast;
    private javax.swing.JButton btnMoi;
    private javax.swing.JButton btnNext;
    private javax.swing.JButton btnPrev;
    private javax.swing.JButton btnSua;
    private javax.swing.JButton btnSuaLHH;
    private javax.swing.JButton btnThem;
    private javax.swing.JButton btnThemLHH;
    private javax.swing.JButton btnXoa;
    private javax.swing.JButton btnXoaLHH;
    private javax.swing.JComboBox<String> cboTimKiemHangHoa;
    private javax.swing.JLabel lblDonGia;
    private javax.swing.JLabel lblDonViTinh;
    private javax.swing.JLabel lblLHH;
    private javax.swing.JLabel lblLHH1;
    private javax.swing.JLabel lblMaHangHoa;
    private javax.swing.JLabel lblTenHangHoa;
    private javax.swing.JLabel lblTimKiem2;
    private javax.swing.JList<LoaiHangHoa> lstLHH;
    private javax.swing.JPanel pnlBackground;
    private javax.swing.JPanel pnlButtonLoaiHH;
    private javax.swing.JPanel pnlChucNang;
    private javax.swing.JPanel pnlDieuHuong;
    private javax.swing.JPanel pnlDieuHuongTitle;
    private javax.swing.JPanel pnlLoaiHangHoa;
    private javax.swing.JScrollPane pnlLstLoaiHangHoa;
    private javax.swing.JScrollPane pnlTblHangHoa;
    private javax.swing.JPanel pnlThongTinHangHoa;
    private javax.swing.JPanel pnlTimKiem;
    private javax.swing.JTable tblHangHoa;
    private javax.swing.JFormattedTextField txtDonGia;
    private javax.swing.JTextField txtDonViTinh;
    private javax.swing.JTextField txtMaHH;
    private javax.swing.JTextField txtTenHH;
    private javax.swing.JTextField txtTimKiemHangHoa;
    private javax.swing.JTextField txtTimKiemLHH;
    // End of variables declaration//GEN-END:variables

    private HangHoaDAO hhDAO = new HangHoaDAO();
    private LoaiHangHoaDAO lhhDAO = new LoaiHangHoaDAO();
    private DefaultListModel<LoaiHangHoa> lstModel = new DefaultListModel<>();
    private int row = -1;

    private String numPattern = "#,##0";
    private DefaultTableModel modelHangHoa;
    private TableRowSorter<TableModel> sorterHangHoa;

    private String defaultSearchLoaiHH = "Nhập từ khoá tìm kiếm loại hàng hoá";
    private String defaultSearchHangHoa = "Nhập từ khoá tìm kiếm hàng hoá";

    private void init() {
        this.setLocationRelativeTo(null);

        this.formatTable();
        this.fillToComboboxTimKiemHH();
        this.fillToListLoaiHangHoa();
        this.updateStatus();

        timer.start();
    }

    // Đổ dữ liệu vào bảng.
    private SwingWorker workerHangHoa;

    private void fillToTableHangHoa() {
        if (workerHangHoa != null) {
            workerHangHoa.cancel(true);
        }
        modelHangHoa.setRowCount(0);

        workerHangHoa = new SwingWorker() {
            @Override
            protected Object doInBackground() throws Exception {
                Thread.sleep(200);
                int maLHH = lstLHH.getSelectedValue().getMaLHH();
                String keyword = txtTimKiemHangHoa.getText();
                if (keyword.equals(defaultSearchHangHoa)) {
                    keyword = "";
                }

                List<HangHoa> list = hhDAO.selectByLoaiHangHoa(maLHH);
                int i = 1;
                for (HangHoa hh : list) {
                    if (workerHangHoa.isCancelled()) {
                        break;
                    }
                    Object[] row = {
                        i++,
                        hh.getMaHH(),
                        hh.getTenHH(),
                        XNumber.toString(hh.getDonGia(), numPattern),
                        hh.getDonViTinh()
                    };
                    modelHangHoa.addRow(row);
                }

                if (workerHangHoa.isCancelled()) {
                    modelHangHoa.setRowCount(0);
                }
                return null;
            }

            @Override
            protected void done() {
                if (row >= 0) {
                    tblHangHoa.setRowSelectionInterval(row, row);
                }
            }
        };
        workerHangHoa.execute();

        try {

        } catch (Exception e) {
            MsgBox.alert(this, "Lỗi truy vấn dữ liệu");
            e.printStackTrace();
        }
    }

    //Đổ dữ liệu vào List.
    private void fillToListLoaiHangHoa() {
        lstModel.removeAllElements();
        String keyword = txtTimKiemLHH.getText();
        if (keyword.equals(defaultSearchLoaiHH)) {
            keyword = "";
        }
        try {
            List<LoaiHangHoa> list = lhhDAO.selectByKeyword(keyword);
            for (LoaiHangHoa lhh : list) {
                lstModel.addElement(lhh);
            }
            lstLHH.setModel(lstModel);
        } catch (Exception e) {
            MsgBox.alert(this, "Lỗi truy vấn dữ liệu");
            e.printStackTrace();
        }
    }

    // Đổ tên bảng vào ComboBox tìm kiếm
    private void fillToComboboxTimKiemHH() {
        DefaultComboBoxModel model = (DefaultComboBoxModel) cboTimKiemHangHoa.getModel();
        model.removeAllElements();
        for (int i = 0; i < tblHangHoa.getColumnCount(); i++) {
            String columnName = tblHangHoa.getColumnName(i);
            model.addElement(columnName);
        }
    }

    // Lấy dữ liệu từ form
    private HangHoa getForm() {
        HangHoa hh = new HangHoa();
        hh.setMaHH(txtMaHH.getText());
        hh.setTenHH(txtTenHH.getText().trim());
        hh.setDonViTinh(txtDonViTinh.getText());
        hh.setDonGia(XNumber.toDouble(txtDonGia.getText(), numPattern));
        hh.setMaLHH(lstLHH.getSelectedValue().getMaLHH());
        return hh;
    }

    // Làm mới form
    private void clearForm() {
        this.setForm(new HangHoa());
        this.row = -1;
        tblHangHoa.clearSelection();
        this.updateStatus();
    }

    // Đưa dữ liệu lên form
    private void setForm(HangHoa hh) {
        txtMaHH.setText(hh.getMaHH());
        txtTenHH.setText(hh.getTenHH());
        txtDonViTinh.setText(hh.getDonViTinh());
        txtDonGia.setText(XNumber.toString(hh.getDonGia(), numPattern));
    }

    //Code phương thức updateStatus.
    private void updateStatus() {
        boolean isSelectedList = !lstLHH.isSelectionEmpty();
        boolean edit = (this.row >= 0);
        boolean first = (this.row == 0);
        boolean last = (this.row == tblHangHoa.getRowCount() - 1);
        
        btnSuaLHH.setEnabled(isSelectedList);
        btnXoaLHH.setEnabled(isSelectedList);
        txtDonGia.setEnabled(isSelectedList);
        txtDonViTinh.setEnabled(isSelectedList);
        txtTenHH.setEnabled(isSelectedList);

        txtMaHH.setEditable(!edit && isSelectedList);
        btnThem.setEnabled(!edit && isSelectedList);
        btnSua.setEnabled(edit && isSelectedList);
        btnXoa.setEnabled(edit && isSelectedList);
        btnXoa.setVisible(Auth.isManager());
        btnMoi.setEnabled(isSelectedList);

        btnFirst.setEnabled(isSelectedList && !first);
        btnPrev.setEnabled(isSelectedList && !first);
        btnNext.setEnabled(isSelectedList && !last);
        btnLast.setEnabled(isSelectedList && !last);
    }

    // Hiển thị dữ liệu hàng hoá được chọn trên bảng lên form
    private void edit() {
        int rowModel = tblHangHoa.convertRowIndexToModel(row);
        String maHH = (String) tblHangHoa.getModel().getValueAt(rowModel, 1);
        HangHoa hh = hhDAO.selectByID(maHH);
        this.setForm(hh);
        this.updateStatus();
        tblHangHoa.setRowSelectionInterval(row, row);
    }

    // Hiển thị hàng hoá đầu danh sách bảng
    private void first() {
        this.row = 0;
        this.edit();
    }

    // Hiển thị hàng hoá kế trước
    private void prev() {
        if (this.row > 0) {
            this.row--;
            this.edit();
        }
    }

    // Hiển thị hàng hoá tiếp theo
    private void next() {
        if (this.row < (tblHangHoa.getRowCount() - 1)) {
            this.row++;
            this.edit();
        }
    }

    // Hiển thị hàng hoá cuối danh sách bảng
    private void last() {
        this.row = tblHangHoa.getRowCount() - 1;
        this.edit();
    }

    // Thêm mới loại hàng hoá
    private void insertLHH() {
        String tenLHH = MsgBox.prompt(this, "Nhập tên loại hàng hoá mới:");
        if (tenLHH != null && !tenLHH.isEmpty()) {
            LoaiHangHoa lhh = new LoaiHangHoa(tenLHH);
            try {
                lhhDAO.insert(lhh);
                this.fillToListLoaiHangHoa();
                this.clearForm();
                modelHangHoa.setRowCount(0);
                MsgBox.alert(this, "Thêm mới thành công!");
            } catch (Exception e) {
                MsgBox.alert(this, "Thêm mới thất bại!");
                e.printStackTrace();
            }
        }
    }

    // Thêm loại đối tác vào danh sách
    private void updateLHH() {
        if (lstLHH.isSelectionEmpty()) {
            MsgBox.alert(this, "Chưa chọn loại hàng hoá!");
            return;
        }
        String tenLHH = MsgBox.prompt(this, "Tên loại hàng hoá mới:");
        if (tenLHH != null && !tenLHH.isEmpty()) {
            LoaiHangHoa lhh = lstLHH.getSelectedValue();
            lhh.setTenLHH(tenLHH);
            try {
                lhhDAO.update(lhh);
                this.fillToListLoaiHangHoa();
                MsgBox.alert(this, "Đổi tên thành công!");
            } catch (Exception e) {
                MsgBox.alert(this, "Đổi tên thất bại!");
                e.printStackTrace();
            }
        }
    }

    // Xoá loại hàng hoá
    private void deleteLHH() {
        if (lstLHH.isSelectionEmpty()) {
            MsgBox.alert(this, "Chưa chọn loại hàng hoá!");
            return;
        }
        String message = "Các hàng hoá thuộc loại hàng hoá này sẽ bị xoá!"
                + "\nBạn có muốn tiếp tục xoá không?";
        if (MsgBox.confirm(this, message)) {
            LoaiHangHoa lhh = lstLHH.getSelectedValue();
            try {
                lhhDAO.delete(lhh.getMaLHH());
                this.fillToListLoaiHangHoa();
                this.clearForm();
                modelHangHoa.setRowCount(0);
                MsgBox.alert(this, "Xoá thành công!");
            } catch (Exception e) {
                MsgBox.alert(this, "Không thể xoá danh mục đang có sản phẩm!");
                e.printStackTrace();
            }
        }
    }

    // Xác thực dữ liệu form
    private boolean isValidated() {
        if (txtMaHH.getText().isEmpty()) {
            MsgBox.alert(this, "Chưa nhập mã hàng hoá!");
            txtMaHH.requestFocus();
            return false;
        }
        if (txtTenHH.getText().isEmpty()) {
            MsgBox.alert(this, "Chưa nhập tên hàng hoá!");
            txtTenHH.requestFocus();
            return false;
        }
        if (txtDonViTinh.getText().isEmpty()) {
            MsgBox.alert(this, "Chưa nhập đơn vị tính!");
            txtDonViTinh.requestFocus();
            return false;
        }
        if (txtDonGia.getText().isEmpty()) {
            MsgBox.alert(this, "Chưa nhập đơn giá!");
            txtDonGia.requestFocus();
            return false;
        }
        return true;
    }

    // Thêm hàng hoá mới
    private void insert() {
        if (!isValidated()) {
            return;
        }

        if (hhDAO.selectByID(txtMaHH.getText()) != null) {
            MsgBox.alert(this, "Mã hàng hoá đã tồn tại!");
            txtMaHH.requestFocus();
            return;
        }

        HangHoa hh = getForm();
        try {
            hhDAO.insert(hh);
            this.fillToTableHangHoa();
            this.clearForm();
            MsgBox.alert(this, "Thêm mới thành công!");
        } catch (Exception e) {
            MsgBox.alert(this, "Thêm mới thất bại!");
            e.printStackTrace();
        }
    }

    // Xoá hàng hoá
    private void delete() {
        if (MsgBox.confirm(this, "Bạn có chắc chắc muốn xoá hàng hoá này?")) {
            int rowModel = tblHangHoa.convertRowIndexToModel(this.row);
            String maHH = (String) tblHangHoa.getValueAt(rowModel, 1);
            try {
                hhDAO.delete(maHH);
                this.fillToTableHangHoa();
                this.clearForm();
                MsgBox.alert(this, "Xoá thành công!");
            } catch (Exception e) {
                MsgBox.alert(this, "Xoá thất bại!");
                e.printStackTrace();
            }
        }
    }

    // Cập nhật hàng hoá
    private void update() {
        if (!isValidated()) {
            return;
        }
        HangHoa hh = getForm();
        try {
            hhDAO.update(hh);
            this.fillToTableHangHoa();
            this.updateStatus();
            MsgBox.alert(this, "Cập nhật thành công!");
        } catch (Exception e) {
            MsgBox.alert(this, "Cập nhật thất bại!");
            e.printStackTrace();
        }
    }

    // Định dạng bảng
    private void formatTable() {
        String header[] = {"STT", "MÃ HÀNG HOÁ", "TÊN HÀNG HOÁ", "ĐƠN GIÁ", "ĐƠN VỊ TÍNH"};
        this.modelHangHoa = new DefaultTableModel(header, 0) {

            @Override
            public boolean isCellEditable(int row, int column) {
                if (column == 3) {
                    return true;
                }
                return false;
            }

            Class[] types = new Class[]{
                Integer.class, String.class, String.class, String.class,
                String.class
            };

            @Override
            public Class getColumnClass(int columnIndex) {
                return types[columnIndex];
            }

        };

        tblHangHoa.setModel(modelHangHoa);

        // Set Table Sorter
        sorterHangHoa = new TableRowSorter<>(modelHangHoa);
        sorterHangHoa.setStringConverter(new LowerCaseStringConverter());
        sorterHangHoa.setComparator(3, new DoubleComparator(numPattern));
        tblHangHoa.setRowSorter(sorterHangHoa);

        // Set size column
        tblHangHoa.getColumnModel().getColumn(0).setPreferredWidth(40);
        tblHangHoa.getColumnModel().getColumn(1).setPreferredWidth(100);
        tblHangHoa.getColumnModel().getColumn(2).setPreferredWidth(424);
        tblHangHoa.getColumnModel().getColumn(3).setPreferredWidth(125);
        tblHangHoa.getColumnModel().getColumn(4).setPreferredWidth(125);

        tblHangHoa.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

        tblHangHoa.getColumnModel().getColumn(3).setCellEditor(new JSpinnerStringEditor(0, 0, 1000000000, 100000, numPattern));

        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(JLabel.CENTER);
        tblHangHoa.getColumnModel().getColumn(0).setCellRenderer(centerRenderer);
        tblHangHoa.getColumnModel().getColumn(1).setCellRenderer(centerRenderer);
        tblHangHoa.getColumnModel().getColumn(3).setCellRenderer(centerRenderer);
        tblHangHoa.getColumnModel().getColumn(4).setCellRenderer(centerRenderer);
    }

    private void updateDonGia() {
        double donGia = XNumber.toDouble((String) tblHangHoa.getValueAt(row, 3), numPattern);
        String maHH = (String) tblHangHoa.getValueAt(row, 1);
        HangHoa hh = hhDAO.selectByID(maHH);
        hh.setDonGia(donGia);
        hhDAO.update(hh);
        edit();
    }

    private void searchPhieu() {
        int columnFilter = cboTimKiemHangHoa.getSelectedIndex();
        String keyword = txtTimKiemHangHoa.getText();

        if (keyword.equals(defaultSearchHangHoa)) {
            keyword = "";
        }

        RowFilter<TableModel, Object> rf = null;
        try {
            rf = RowFilter.regexFilter(keyword.toLowerCase(), columnFilter);
        } catch (Exception e) {
            return;
        }
        sorterHangHoa.setRowFilter(rf);
    }

    // Đỗ lại dữ liệu 
    public void refreshForm() {
        this.fillToComboboxTimKiemHH();
        this.fillToTableHangHoa();

        this.timer.restart();
    }

    // sau hai phút tải lại dữ liệu
    private Timer timer = new Timer(300000, (e) -> {
        refreshForm();
    });

    // Nhấn enter không xuống dòng tiếp theo khi đang sửa ô trong table
    private void disableEnterCellNextLine(JTable table) {
        int row = table.getSelectedRow();
        if (row == 0) {
            row = table.getRowCount() - 1;
        } else {
            row--;
        }
        table.setRowSelectionInterval(row, row);
    }
}

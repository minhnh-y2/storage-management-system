/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.stoman.ui;

import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import javax.swing.GroupLayout;
import javax.swing.LayoutStyle;
import javax.swing.border.*;
import com.formdev.flatlaf.FlatIntelliJLaf;
import com.stoman.dao.HangHoaDAO;
import com.stoman.dao.LoaiHangHoaDAO;
import com.stoman.entity.HangHoa;
import com.stoman.entity.LoaiHangHoa;
import com.stoman.utils.Auth;
import com.stoman.utils.DoubleComparator;
import com.stoman.utils.MsgBox;
import com.stoman.utils.JSpinnerStringEditor;
import com.stoman.utils.LowerCaseStringConverter;
import com.stoman.utils.XNumber;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JLabel;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.RowFilter;
import javax.swing.SwingWorker;
import javax.swing.Timer;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author MinhNH
 */
public class HangHoaJDialog extends javax.swing.JDialog {

    /**
     * Creates new form HangHoaJDialog
     */
    public HangHoaJDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        init();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        pnlBackground = new JPanel();
        pnlThongTinHangHoa = new JPanel();
        lblMaHangHoa = new JLabel();
        lblTenHangHoa = new JLabel();
        lblDonViTinh = new JLabel();
        lblDonGia = new JLabel();
        txtMaHH = new com.stoman.utils.JTextFieldCustom();
        txtTenHH = new com.stoman.utils.JTextFieldCustom();
        txtDonViTinh = new com.stoman.utils.JTextFieldCustom();
        txtDonGia = new JFormattedTextField();
        pnlTimKiem = new JPanel();
        txtTimKiemHangHoa = new com.stoman.utils.JTextFieldCustom(defaultSearchHangHoa);
        lblTimKiem2 = new JLabel();
        cboTimKiemHangHoa = new JComboBox<>();
        lblLHH1 = new JLabel();
        pnlDieuHuongTitle = new JPanel();
        pnlDieuHuong = new JPanel();
        btnFirst = new JButton();
        btnPrev = new JButton();
        btnNext = new JButton();
        btnLast = new JButton();
        pnlTblHangHoa = new JScrollPane();
        tblHangHoa = new JTable();
        pnlLoaiHangHoa = new JPanel();
        pnlLstLoaiHangHoa = new JScrollPane();
        lstLHH = new JList<>();
        pnlButtonLoaiHH = new JPanel();
        btnThemLHH = new JButton();
        btnXoaLHH = new JButton();
        btnSuaLHH = new JButton();
        lblLHH = new JLabel();
        txtTimKiemLHH = new com.stoman.utils.JTextFieldCustom(defaultSearchLoaiHH);
        pnlChucNang = new JPanel();
        btnThem = new JButton();
        btnXoa = new JButton();
        btnSua = new JButton();
        btnMoi = new JButton();

        //======== this ========
        setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("StoMan - Qu\u1ea3n l\u00fd h\u00e0ng ho\u00e1");
        setResizable(false);
        addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosed(WindowEvent e) {
                formWindowClosed(e);
            }
        });
        var contentPane = getContentPane();
        contentPane.setLayout(new BorderLayout());

        //======== pnlBackground ========
        {

            //======== pnlThongTinHangHoa ========
            {
                pnlThongTinHangHoa.setBackground(Color.white);
                pnlThongTinHangHoa.setBorder(new TitledBorder(null, "Th\u00f4ng tin h\u00e0ng ho\u00e1", TitledBorder.LEADING, TitledBorder.DEFAULT_POSITION,
                    new Font("Segoe UI", Font.BOLD, 13)));
                pnlThongTinHangHoa.setForeground(Color.white);
                pnlThongTinHangHoa.setOpaque(false);

                //---- lblMaHangHoa ----
                lblMaHangHoa.setFont(new Font("Segoe UI", Font.BOLD, 13));
                lblMaHangHoa.setForeground(new Color(0x666666));
                lblMaHangHoa.setText("M\u00e3 h\u00e0ng ho\u00e1");

                //---- lblTenHangHoa ----
                lblTenHangHoa.setFont(new Font("Segoe UI", Font.BOLD, 13));
                lblTenHangHoa.setForeground(new Color(0x666666));
                lblTenHangHoa.setText("T\u00ean h\u00e0ng ho\u00e1");

                //---- lblDonViTinh ----
                lblDonViTinh.setFont(new Font("Segoe UI", Font.BOLD, 13));
                lblDonViTinh.setForeground(new Color(0x666666));
                lblDonViTinh.setText("\u0110\u01a1n v\u1ecb t\u00ednh");

                //---- lblDonGia ----
                lblDonGia.setFont(new Font("Segoe UI", Font.BOLD, 13));
                lblDonGia.setForeground(new Color(0x666666));
                lblDonGia.setText("\u0110\u01a1n gi\u00e1");

                //---- txtDonGia ----
                txtDonGia.addFocusListener(new FocusAdapter() {
                    @Override
                    public void focusGained(FocusEvent e) {
                        txtDonGiaFocusGained(e);
                    }
                });

                GroupLayout pnlThongTinHangHoaLayout = new GroupLayout(pnlThongTinHangHoa);
                pnlThongTinHangHoa.setLayout(pnlThongTinHangHoaLayout);
                pnlThongTinHangHoaLayout.setHorizontalGroup(
                    pnlThongTinHangHoaLayout.createParallelGroup()
                        .addGroup(pnlThongTinHangHoaLayout.createSequentialGroup()
                            .addGap(12, 12, 12)
                            .addGroup(pnlThongTinHangHoaLayout.createParallelGroup()
                                .addComponent(lblTenHangHoa)
                                .addComponent(lblMaHangHoa)
                                .addComponent(lblDonViTinh)
                                .addComponent(lblDonGia))
                            .addGap(10, 10, 10)
                            .addGroup(pnlThongTinHangHoaLayout.createParallelGroup()
                                .addComponent(txtDonViTinh)
                                .addComponent(txtMaHH)
                                .addComponent(txtTenHH)
                                .addComponent(txtDonGia))
                            .addGap(12, 12, 12))
                );
                pnlThongTinHangHoaLayout.setVerticalGroup(
                    pnlThongTinHangHoaLayout.createParallelGroup()
                        .addGroup(pnlThongTinHangHoaLayout.createSequentialGroup()
                            .addGap(12, 12, 12)
                            .addGroup(pnlThongTinHangHoaLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                .addComponent(lblMaHangHoa)
                                .addComponent(txtMaHH, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                            .addGroup(pnlThongTinHangHoaLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                .addComponent(lblTenHangHoa)
                                .addComponent(txtTenHH, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                            .addGroup(pnlThongTinHangHoaLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                .addComponent(lblDonViTinh)
                                .addComponent(txtDonViTinh, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                            .addGroup(pnlThongTinHangHoaLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                .addComponent(lblDonGia)
                                .addComponent(txtDonGia, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                            .addContainerGap(12, Short.MAX_VALUE))
                );
            }

            //======== pnlTimKiem ========
            {
                pnlTimKiem.setBorder(new TitledBorder(null, "T\u00ecm ki\u1ebfm", TitledBorder.LEADING, TitledBorder.DEFAULT_POSITION,
                    new Font("Segoe UI", Font.BOLD, 13)));
                pnlTimKiem.setOpaque(false);

                //---- txtTimKiemHangHoa ----
                txtTimKiemHangHoa.addKeyListener(new KeyAdapter() {
                    @Override
                    public void keyReleased(KeyEvent e) {
                        txtTimKiemHangHoaKeyReleased(e);
                    }
                });

                //---- lblTimKiem2 ----
                lblTimKiem2.setText("theo");

                //---- cboTimKiemHangHoa ----
                cboTimKiemHangHoa.setModel(new DefaultComboBoxModel<>(new String[] {

                }));
                cboTimKiemHangHoa.addActionListener(e -> cboTimKiemHangHoaActionPerformed(e));

                //---- lblLHH1 ----
                lblLHH1.setIcon(new ImageIcon(getClass().getResource("/com/stoman/icons/search_24px.png")));

                GroupLayout pnlTimKiemLayout = new GroupLayout(pnlTimKiem);
                pnlTimKiem.setLayout(pnlTimKiemLayout);
                pnlTimKiemLayout.setHorizontalGroup(
                    pnlTimKiemLayout.createParallelGroup()
                        .addGroup(pnlTimKiemLayout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(lblLHH1)
                            .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(txtTimKiemHangHoa, GroupLayout.DEFAULT_SIZE, 350, Short.MAX_VALUE)
                            .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(lblTimKiem2)
                            .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(cboTimKiemHangHoa, GroupLayout.PREFERRED_SIZE, 195, GroupLayout.PREFERRED_SIZE)
                            .addContainerGap())
                );
                pnlTimKiemLayout.setVerticalGroup(
                    pnlTimKiemLayout.createParallelGroup()
                        .addGroup(pnlTimKiemLayout.createSequentialGroup()
                            .addGap(9, 9, 9)
                            .addGroup(pnlTimKiemLayout.createParallelGroup(GroupLayout.Alignment.TRAILING)
                                .addComponent(lblLHH1)
                                .addGroup(pnlTimKiemLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                    .addComponent(txtTimKiemHangHoa, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblTimKiem2)
                                    .addComponent(cboTimKiemHangHoa, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)))
                            .addGap(9, 9, 9))
                );
            }

            //======== pnlDieuHuongTitle ========
            {
                pnlDieuHuongTitle.setBorder(new TitledBorder(null, "\u0110i\u1ec1u h\u01b0\u1edbng", TitledBorder.LEADING, TitledBorder.DEFAULT_POSITION,
                    new Font("Segoe UI", Font.BOLD, 13)));
                pnlDieuHuongTitle.setOpaque(false);

                //======== pnlDieuHuong ========
                {
                    pnlDieuHuong.setLayout(new GridLayout());

                    //---- btnFirst ----
                    btnFirst.setIcon(new ImageIcon(getClass().getResource("/com/stoman/icons/skip-to-start.png")));
                    btnFirst.addActionListener(e -> btnFirstActionPerformed(e));
                    pnlDieuHuong.add(btnFirst);

                    //---- btnPrev ----
                    btnPrev.setIcon(new ImageIcon(getClass().getResource("/com/stoman/icons/double-left-24.png")));
                    btnPrev.addActionListener(e -> btnPrevActionPerformed(e));
                    pnlDieuHuong.add(btnPrev);

                    //---- btnNext ----
                    btnNext.setIcon(new ImageIcon(getClass().getResource("/com/stoman/icons/double-right.png")));
                    btnNext.addActionListener(e -> btnNextActionPerformed(e));
                    pnlDieuHuong.add(btnNext);

                    //---- btnLast ----
                    btnLast.setIcon(new ImageIcon(getClass().getResource("/com/stoman/icons/skip-to-end.png")));
                    btnLast.addActionListener(e -> btnLastActionPerformed(e));
                    pnlDieuHuong.add(btnLast);
                }

                GroupLayout pnlDieuHuongTitleLayout = new GroupLayout(pnlDieuHuongTitle);
                pnlDieuHuongTitle.setLayout(pnlDieuHuongTitleLayout);
                pnlDieuHuongTitleLayout.setHorizontalGroup(
                    pnlDieuHuongTitleLayout.createParallelGroup()
                        .addGroup(pnlDieuHuongTitleLayout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(pnlDieuHuong, GroupLayout.DEFAULT_SIZE, 258, Short.MAX_VALUE)
                            .addContainerGap())
                );
                pnlDieuHuongTitleLayout.setVerticalGroup(
                    pnlDieuHuongTitleLayout.createParallelGroup()
                        .addGroup(pnlDieuHuongTitleLayout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(pnlDieuHuong, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addContainerGap())
                );
            }

            //======== pnlTblHangHoa ========
            {
                pnlTblHangHoa.setBorder(new TitledBorder(null, "Danh s\u00e1ch h\u00e0ng ho\u00e1", TitledBorder.LEADING, TitledBorder.DEFAULT_POSITION,
                    new Font("Segoe UI", Font.BOLD, 13)));
                pnlTblHangHoa.setOpaque(false);

                //---- tblHangHoa ----
                tblHangHoa.setModel(new DefaultTableModel(
                    new Object[][] {
                    },
                    new String[] {
                        "M\u00e3 h\u00e0ng ho\u00e1", "T\u00ean h\u00e0ng ho\u00e1", "\u0110\u01a1n v\u1ecb t\u00ednh", "\u0110\u01a1n gi\u00e1"
                    }
                ) {
                    boolean[] columnEditable = new boolean[] {
                        false, false, false, false
                    };
                    @Override
                    public boolean isCellEditable(int rowIndex, int columnIndex) {
                        return columnEditable[columnIndex];
                    }
                });
                tblHangHoa.setOpaque(false);
                tblHangHoa.setRowHeight(25);
                tblHangHoa.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
                tblHangHoa.addFocusListener(new FocusAdapter() {
                    @Override
                    public void focusGained(FocusEvent e) {
                        tblHangHoaFocusGained(e);
                    }
                });
                tblHangHoa.addMouseListener(new MouseAdapter() {
                    @Override
                    public void mouseClicked(MouseEvent e) {
                        tblHangHoaMouseClicked(e);
                    }
                });
                tblHangHoa.addPropertyChangeListener(e -> tblHangHoaPropertyChange(e));
                tblHangHoa.addKeyListener(new KeyAdapter() {
                    @Override
                    public void keyReleased(KeyEvent e) {
                        tblHangHoaKeyReleased(e);
                    }
                });
                pnlTblHangHoa.setViewportView(tblHangHoa);
            }

            //======== pnlLoaiHangHoa ========
            {
                pnlLoaiHangHoa.setBackground(Color.white);
                pnlLoaiHangHoa.setBorder(new TitledBorder(null, "Lo\u1ea1i h\u00e0ng ho\u00e1", TitledBorder.LEADING, TitledBorder.DEFAULT_POSITION,
                    new Font("Segoe UI", Font.BOLD, 13)));
                pnlLoaiHangHoa.setOpaque(false);

                //======== pnlLstLoaiHangHoa ========
                {

                    //---- lstLHH ----
                    lstLHH.addMouseListener(new MouseAdapter() {
                        @Override
                        public void mouseClicked(MouseEvent e) {
                            lstLHHMouseClicked(e);
                        }
                    });
                    pnlLstLoaiHangHoa.setViewportView(lstLHH);
                }

                //======== pnlButtonLoaiHH ========
                {
                    pnlButtonLoaiHH.setLayout(new GridLayout());

                    //---- btnThemLHH ----
                    btnThemLHH.setText("Th\u00eam");
                    btnThemLHH.addActionListener(e -> btnThemLHHActionPerformed(e));
                    pnlButtonLoaiHH.add(btnThemLHH);

                    //---- btnXoaLHH ----
                    btnXoaLHH.setText("Xo\u00e1");
                    btnXoaLHH.addActionListener(e -> btnXoaLHHActionPerformed(e));
                    pnlButtonLoaiHH.add(btnXoaLHH);

                    //---- btnSuaLHH ----
                    btnSuaLHH.setText("S\u1eeda");
                    btnSuaLHH.addActionListener(e -> btnSuaLHHActionPerformed(e));
                    pnlButtonLoaiHH.add(btnSuaLHH);
                }

                //---- lblLHH ----
                lblLHH.setIcon(new ImageIcon(getClass().getResource("/com/stoman/icons/search_24px.png")));

                //---- txtTimKiemLHH ----
                txtTimKiemLHH.addKeyListener(new KeyAdapter() {
                    @Override
                    public void keyReleased(KeyEvent e) {
                        txtTimKiemLHHKeyReleased(e);
                    }
                });

                GroupLayout pnlLoaiHangHoaLayout = new GroupLayout(pnlLoaiHangHoa);
                pnlLoaiHangHoa.setLayout(pnlLoaiHangHoaLayout);
                pnlLoaiHangHoaLayout.setHorizontalGroup(
                    pnlLoaiHangHoaLayout.createParallelGroup()
                        .addGroup(pnlLoaiHangHoaLayout.createSequentialGroup()
                            .addContainerGap()
                            .addGroup(pnlLoaiHangHoaLayout.createParallelGroup()
                                .addComponent(pnlButtonLoaiHH, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(pnlLstLoaiHangHoa)
                                .addGroup(pnlLoaiHangHoaLayout.createSequentialGroup()
                                    .addComponent(lblLHH)
                                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(txtTimKiemLHH)))
                            .addContainerGap())
                );
                pnlLoaiHangHoaLayout.setVerticalGroup(
                    pnlLoaiHangHoaLayout.createParallelGroup()
                        .addGroup(pnlLoaiHangHoaLayout.createSequentialGroup()
                            .addContainerGap()
                            .addGroup(pnlLoaiHangHoaLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                .addComponent(lblLHH)
                                .addComponent(txtTimKiemLHH, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(pnlLstLoaiHangHoa, GroupLayout.DEFAULT_SIZE, 0, Short.MAX_VALUE)
                            .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(pnlButtonLoaiHH, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                            .addContainerGap())
                );
            }

            //======== pnlChucNang ========
            {
                pnlChucNang.setBackground(Color.white);
                pnlChucNang.setBorder(new TitledBorder(null, "Ch\u1ee9c n\u0103ng", TitledBorder.LEADING, TitledBorder.DEFAULT_POSITION,
                    new Font("Segoe UI", Font.BOLD, 13)));
                pnlChucNang.setOpaque(false);
                pnlChucNang.setLayout(new GridBagLayout());

                //---- btnThem ----
                btnThem.setIcon(new ImageIcon(getClass().getResource("/com/stoman/icons/icons8_add_list_24px_4.png")));
                btnThem.setText("Th\u00eam h\u00e0ng ho\u00e1");
                btnThem.setPreferredSize(new Dimension(145, 35));
                btnThem.addActionListener(e -> btnThemActionPerformed(e));
                pnlChucNang.add(btnThem, new GridBagConstraints(0, 1, 1, 1, 0.0, 0.0,
                    GridBagConstraints.CENTER, GridBagConstraints.NONE,
                    new Insets(0, 0, 0, 0), 0, 0));

                //---- btnXoa ----
                btnXoa.setIcon(new ImageIcon(getClass().getResource("/com/stoman/icons/icons8_delete_document_24px.png")));
                btnXoa.setText("Xo\u00e1 h\u00e0ng ho\u00e1");
                btnXoa.setPreferredSize(new Dimension(145, 35));
                btnXoa.addActionListener(e -> btnXoaActionPerformed(e));
                pnlChucNang.add(btnXoa, new GridBagConstraints(0, 2, 1, 1, 0.0, 0.0,
                    GridBagConstraints.CENTER, GridBagConstraints.NONE,
                    new Insets(0, 0, 0, 0), 0, 0));

                //---- btnSua ----
                btnSua.setIcon(new ImageIcon(getClass().getResource("/com/stoman/icons/edit-property.png")));
                btnSua.setText("S\u1eeda h\u00e0ng ho\u00e1");
                btnSua.setPreferredSize(new Dimension(145, 35));
                btnSua.addActionListener(e -> btnSuaActionPerformed(e));
                pnlChucNang.add(btnSua, new GridBagConstraints(0, 3, 1, 1, 0.0, 0.0,
                    GridBagConstraints.CENTER, GridBagConstraints.NONE,
                    new Insets(0, 0, 0, 0), 0, 0));

                //---- btnMoi ----
                btnMoi.setIcon(new ImageIcon(getClass().getResource("/com/stoman/icons/icons8_document_24px.png")));
                btnMoi.setText("L\u00e0m m\u1edbi");
                btnMoi.setPreferredSize(new Dimension(145, 35));
                btnMoi.addActionListener(e -> btnMoiActionPerformed(e));
                pnlChucNang.add(btnMoi, new GridBagConstraints(0, 0, 1, 1, 0.0, 0.0,
                    GridBagConstraints.CENTER, GridBagConstraints.NONE,
                    new Insets(0, 0, 0, 0), 0, 0));
            }

            GroupLayout pnlBackgroundLayout = new GroupLayout(pnlBackground);
            pnlBackground.setLayout(pnlBackgroundLayout);
            pnlBackgroundLayout.setHorizontalGroup(
                pnlBackgroundLayout.createParallelGroup()
                    .addGroup(GroupLayout.Alignment.TRAILING, pnlBackgroundLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(pnlLoaiHangHoa, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pnlThongTinHangHoa, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pnlChucNang, GroupLayout.PREFERRED_SIZE, 183, GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(GroupLayout.Alignment.TRAILING, pnlBackgroundLayout.createSequentialGroup()
                        .addGroup(pnlBackgroundLayout.createParallelGroup(GroupLayout.Alignment.TRAILING)
                            .addGroup(pnlBackgroundLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(pnlTimKiem, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(pnlDieuHuongTitle, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                            .addGroup(pnlBackgroundLayout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(pnlTblHangHoa)))
                        .addGap(10, 10, 10))
            );
            pnlBackgroundLayout.setVerticalGroup(
                pnlBackgroundLayout.createParallelGroup()
                    .addGroup(pnlBackgroundLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(pnlBackgroundLayout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                            .addComponent(pnlThongTinHangHoa, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(pnlLoaiHangHoa, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(pnlChucNang, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlBackgroundLayout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                            .addComponent(pnlTimKiem, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(pnlDieuHuongTitle, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pnlTblHangHoa, GroupLayout.DEFAULT_SIZE, 280, Short.MAX_VALUE)
                        .addContainerGap())
            );
        }
        contentPane.add(pnlBackground, BorderLayout.CENTER);
        pack();
        setLocationRelativeTo(getOwner());
    }// </editor-fold>//GEN-END:initComponents

    private void tblHangHoaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblHangHoaMouseClicked
        this.row = tblHangHoa.getSelectedRow();
        this.edit();
    }//GEN-LAST:event_tblHangHoaMouseClicked

    private void lstLHHMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lstLHHMouseClicked
        // TODO add your handling code here:
        cboTimKiemHangHoa.setSelectedIndex(0);
        this.fillToTableHangHoa();
        this.clearForm();
        this.updateStatus();
    }//GEN-LAST:event_lstLHHMouseClicked

    private void btnFirstActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFirstActionPerformed
        // TODO add your handling code here:
        first();
    }//GEN-LAST:event_btnFirstActionPerformed

    private void btnPrevActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrevActionPerformed
        // TODO add your handling code here:
        prev();
    }//GEN-LAST:event_btnPrevActionPerformed

    private void btnNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNextActionPerformed
        // TODO add your handling code here:
        next();
    }//GEN-LAST:event_btnNextActionPerformed

    private void btnMoiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMoiActionPerformed
        // TODO add your handling code here:
        clearForm();
    }//GEN-LAST:event_btnMoiActionPerformed

    private void btnThemLHHActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnThemLHHActionPerformed
        // TODO add your handling code here:
        insertLHH();
    }//GEN-LAST:event_btnThemLHHActionPerformed

    private void btnXoaLHHActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnXoaLHHActionPerformed
        // TODO add your handling code here:
        deleteLHH();
    }//GEN-LAST:event_btnXoaLHHActionPerformed

    private void btnThemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnThemActionPerformed
        // TODO add your handling code here:
        insert();
    }//GEN-LAST:event_btnThemActionPerformed

    private void btnXoaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnXoaActionPerformed
        // TODO add your handling code here:
        delete();
    }//GEN-LAST:event_btnXoaActionPerformed

    private void btnSuaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSuaActionPerformed
        // TODO add your handling code here:
        update();
    }//GEN-LAST:event_btnSuaActionPerformed

    private void btnLastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLastActionPerformed
        // TODO add your handling code here:
        last();
    }//GEN-LAST:event_btnLastActionPerformed

    private void cboTimKiemHangHoaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboTimKiemHangHoaActionPerformed
        // TODO add your handling code here:
        if (!lstLHH.isSelectionEmpty()) {
            txtTimKiemHangHoa.setText(defaultSearchHangHoa);
            searchPhieu();
            clearForm();
        }
    }//GEN-LAST:event_cboTimKiemHangHoaActionPerformed

    private void txtTimKiemHangHoaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtTimKiemHangHoaKeyReleased
        // TODO add your handling code here:
        if (!lstLHH.isSelectionEmpty()) {
            searchPhieu();
            clearForm();
        }
    }//GEN-LAST:event_txtTimKiemHangHoaKeyReleased

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        // TODO add your handling code here:
        this.timer.stop();
    }//GEN-LAST:event_formWindowClosed

    private void btnSuaLHHActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSuaLHHActionPerformed
        // TODO add your handling code here:
        updateLHH();
    }//GEN-LAST:event_btnSuaLHHActionPerformed

    private void txtTimKiemLHHKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtTimKiemLHHKeyReleased
        // TODO add your handling code here:
        fillToListLoaiHangHoa();
    }//GEN-LAST:event_txtTimKiemLHHKeyReleased

    private void txtDonGiaFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDonGiaFocusGained
        // TODO add your handling code here:
        txtDonGia.selectAll();
    }//GEN-LAST:event_txtDonGiaFocusGained

    private void tblHangHoaPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_tblHangHoaPropertyChange
        // TODO add your handling code here:
        if (this.row >= 0) {
            updateDonGia();
        }
    }//GEN-LAST:event_tblHangHoaPropertyChange

    private void tblHangHoaFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tblHangHoaFocusGained
        // TODO add your handling code here:
        this.row = tblHangHoa.getSelectedRow();
        this.edit();
    }//GEN-LAST:event_tblHangHoaFocusGained

    private void tblHangHoaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tblHangHoaKeyReleased
        // TODO add your handling code here:
        disableEnterCellNextLine(tblHangHoa);
        updateDonGia();
    }//GEN-LAST:event_tblHangHoaKeyReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            javax.swing.UIManager.setLookAndFeel(new FlatIntelliJLaf());
        } catch (UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(HangHoaJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                HangHoaJDialog dialog = new HangHoaJDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JPanel pnlBackground;
    private JPanel pnlThongTinHangHoa;
    private JLabel lblMaHangHoa;
    private JLabel lblTenHangHoa;
    private JLabel lblDonViTinh;
    private JLabel lblDonGia;
    private JTextField txtMaHH;
    private JTextField txtTenHH;
    private JTextField txtDonViTinh;
    private JFormattedTextField txtDonGia;
    private JPanel pnlTimKiem;
    private JTextField txtTimKiemHangHoa;
    private JLabel lblTimKiem2;
    private JComboBox<String> cboTimKiemHangHoa;
    private JLabel lblLHH1;
    private JPanel pnlDieuHuongTitle;
    private JPanel pnlDieuHuong;
    private JButton btnFirst;
    private JButton btnPrev;
    private JButton btnNext;
    private JButton btnLast;
    private JScrollPane pnlTblHangHoa;
    private JTable tblHangHoa;
    private JPanel pnlLoaiHangHoa;
    private JScrollPane pnlLstLoaiHangHoa;
    private JList<LoaiHangHoa> lstLHH;
    private JPanel pnlButtonLoaiHH;
    private JButton btnThemLHH;
    private JButton btnXoaLHH;
    private JButton btnSuaLHH;
    private JLabel lblLHH;
    private JTextField txtTimKiemLHH;
    private JPanel pnlChucNang;
    private JButton btnThem;
    private JButton btnXoa;
    private JButton btnSua;
    private JButton btnMoi;
    // End of variables declaration//GEN-END:variables

    private HangHoaDAO hhDAO = new HangHoaDAO();
    private LoaiHangHoaDAO lhhDAO = new LoaiHangHoaDAO();
    private DefaultListModel<LoaiHangHoa> lstModel = new DefaultListModel<>();
    private int row = -1;

    private String numPattern = "#,##0";
    private DefaultTableModel modelHangHoa;
    private TableRowSorter<TableModel> sorterHangHoa;

    private String defaultSearchLoaiHH = "Nhập từ khoá tìm kiếm loại hàng hoá";
    private String defaultSearchHangHoa = "Nhập từ khoá tìm kiếm hàng hoá";

    private void init() {
        this.setLocationRelativeTo(null);

        this.formatTable();
        this.fillToComboboxTimKiemHH();
        this.fillToListLoaiHangHoa();
        this.updateStatus();

        timer.start();
    }

    // Đổ dữ liệu vào bảng.
    private SwingWorker workerHangHoa;

    private void fillToTableHangHoa() {
        if (workerHangHoa != null) {
            workerHangHoa.cancel(true);
        }
        modelHangHoa.setRowCount(0);

        workerHangHoa = new SwingWorker() {
            @Override
            protected Object doInBackground() throws Exception {
                Thread.sleep(200);
                int maLHH = lstLHH.getSelectedValue().getMaLHH();
                String keyword = txtTimKiemHangHoa.getText();
                if (keyword.equals(defaultSearchHangHoa)) {
                    keyword = "";
                }

                List<HangHoa> list = hhDAO.selectByLoaiHangHoa(maLHH);
                int i = 1;
                for (HangHoa hh : list) {
                    if (workerHangHoa.isCancelled()) {
                        break;
                    }
                    Object[] row = {
                        i++,
                        hh.getMaHH(),
                        hh.getTenHH(),
                        XNumber.toString(hh.getDonGia(), numPattern),
                        hh.getDonViTinh()
                    };
                    modelHangHoa.addRow(row);
                }

                if (workerHangHoa.isCancelled()) {
                    modelHangHoa.setRowCount(0);
                }
                return null;
            }

            @Override
            protected void done() {
                if (row >= 0) {
                    tblHangHoa.setRowSelectionInterval(row, row);
                }
            }
        };
        workerHangHoa.execute();

        try {

        } catch (Exception e) {
            MsgBox.alert(this, "Lỗi truy vấn dữ liệu");
            e.printStackTrace();
        }
    }

    //Đổ dữ liệu vào List.
    private void fillToListLoaiHangHoa() {
        lstModel.removeAllElements();
        String keyword = txtTimKiemLHH.getText();
        if (keyword.equals(defaultSearchLoaiHH)) {
            keyword = "";
        }
        try {
            List<LoaiHangHoa> list = lhhDAO.selectByKeyword(keyword);
            for (LoaiHangHoa lhh : list) {
                lstModel.addElement(lhh);
            }
            lstLHH.setModel(lstModel);
        } catch (Exception e) {
            MsgBox.alert(this, "Lỗi truy vấn dữ liệu");
            e.printStackTrace();
        }
    }

    // Đổ tên bảng vào ComboBox tìm kiếm
    private void fillToComboboxTimKiemHH() {
        DefaultComboBoxModel model = (DefaultComboBoxModel) cboTimKiemHangHoa.getModel();
        model.removeAllElements();
        for (int i = 0; i < tblHangHoa.getColumnCount(); i++) {
            String columnName = tblHangHoa.getColumnName(i);
            model.addElement(columnName);
        }
    }

    // Lấy dữ liệu từ form
    private HangHoa getForm() {
        HangHoa hh = new HangHoa();
        hh.setMaHH(txtMaHH.getText());
        hh.setTenHH(txtTenHH.getText().trim());
        hh.setDonViTinh(txtDonViTinh.getText());
        hh.setDonGia(XNumber.toDouble(txtDonGia.getText(), numPattern));
        hh.setMaLHH(lstLHH.getSelectedValue().getMaLHH());
        return hh;
    }

    // Làm mới form
    private void clearForm() {
        this.setForm(new HangHoa());
        this.row = -1;
        tblHangHoa.clearSelection();
        this.updateStatus();
    }

    // Đưa dữ liệu lên form
    private void setForm(HangHoa hh) {
        txtMaHH.setText(hh.getMaHH());
        txtTenHH.setText(hh.getTenHH());
        txtDonViTinh.setText(hh.getDonViTinh());
        txtDonGia.setText(XNumber.toString(hh.getDonGia(), numPattern));
    }

    //Code phương thức updateStatus.
    private void updateStatus() {
        boolean isSelectedList = !lstLHH.isSelectionEmpty();
        boolean edit = (this.row >= 0);
        boolean first = (this.row == 0);
        boolean last = (this.row == tblHangHoa.getRowCount() - 1);
        
        btnSuaLHH.setEnabled(isSelectedList);
        btnXoaLHH.setEnabled(isSelectedList);
        txtDonGia.setEnabled(isSelectedList);
        txtDonViTinh.setEnabled(isSelectedList);
        txtTenHH.setEnabled(isSelectedList);

        txtMaHH.setEditable(!edit && isSelectedList);
        btnThem.setEnabled(!edit && isSelectedList);
        btnSua.setEnabled(edit && isSelectedList);
        btnXoa.setEnabled(edit && isSelectedList);
        btnXoa.setVisible(Auth.isManager());
        btnMoi.setEnabled(isSelectedList);

        btnFirst.setEnabled(isSelectedList && !first);
        btnPrev.setEnabled(isSelectedList && !first);
        btnNext.setEnabled(isSelectedList && !last);
        btnLast.setEnabled(isSelectedList && !last);
    }

    // Hiển thị dữ liệu hàng hoá được chọn trên bảng lên form
    private void edit() {
        int rowModel = tblHangHoa.convertRowIndexToModel(row);
        String maHH = (String) tblHangHoa.getModel().getValueAt(rowModel, 1);
        HangHoa hh = hhDAO.selectByID(maHH);
        this.setForm(hh);
        this.updateStatus();
        tblHangHoa.setRowSelectionInterval(row, row);
    }

    // Hiển thị hàng hoá đầu danh sách bảng
    private void first() {
        this.row = 0;
        this.edit();
    }

    // Hiển thị hàng hoá kế trước
    private void prev() {
        if (this.row > 0) {
            this.row--;
            this.edit();
        }
    }

    // Hiển thị hàng hoá tiếp theo
    private void next() {
        if (this.row < (tblHangHoa.getRowCount() - 1)) {
            this.row++;
            this.edit();
        }
    }

    // Hiển thị hàng hoá cuối danh sách bảng
    private void last() {
        this.row = tblHangHoa.getRowCount() - 1;
        this.edit();
    }

    // Thêm mới loại hàng hoá
    private void insertLHH() {
        String tenLHH = MsgBox.prompt(this, "Nhập tên loại hàng hoá mới:");
        if (tenLHH != null && !tenLHH.isEmpty()) {
            LoaiHangHoa lhh = new LoaiHangHoa(tenLHH);
            try {
                lhhDAO.insert(lhh);
                this.fillToListLoaiHangHoa();
                this.clearForm();
                modelHangHoa.setRowCount(0);
                MsgBox.alert(this, "Thêm mới thành công!");
            } catch (Exception e) {
                MsgBox.alert(this, "Thêm mới thất bại!");
                e.printStackTrace();
            }
        }
    }

    // Thêm loại đối tác vào danh sách
    private void updateLHH() {
        if (lstLHH.isSelectionEmpty()) {
            MsgBox.alert(this, "Chưa chọn loại hàng hoá!");
            return;
        }
        String tenLHH = MsgBox.prompt(this, "Tên loại hàng hoá mới:");
        if (tenLHH != null && !tenLHH.isEmpty()) {
            LoaiHangHoa lhh = lstLHH.getSelectedValue();
            lhh.setTenLHH(tenLHH);
            try {
                lhhDAO.update(lhh);
                this.fillToListLoaiHangHoa();
                MsgBox.alert(this, "Đổi tên thành công!");
            } catch (Exception e) {
                MsgBox.alert(this, "Đổi tên thất bại!");
                e.printStackTrace();
            }
        }
    }

    // Xoá loại hàng hoá
    private void deleteLHH() {
        if (lstLHH.isSelectionEmpty()) {
            MsgBox.alert(this, "Chưa chọn loại hàng hoá!");
            return;
        }
        String message = "Các hàng hoá thuộc loại hàng hoá này sẽ bị xoá!"
                + "\nBạn có muốn tiếp tục xoá không?";
        if (MsgBox.confirm(this, message)) {
            LoaiHangHoa lhh = lstLHH.getSelectedValue();
            try {
                lhhDAO.delete(lhh.getMaLHH());
                this.fillToListLoaiHangHoa();
                this.clearForm();
                modelHangHoa.setRowCount(0);
                MsgBox.alert(this, "Xoá thành công!");
            } catch (Exception e) {
                MsgBox.alert(this, "Không thể xoá danh mục đang có sản phẩm!");
                e.printStackTrace();
            }
        }
    }

    // Xác thực dữ liệu form
    private boolean isValidated() {
        if (txtMaHH.getText().isEmpty()) {
            MsgBox.alert(this, "Chưa nhập mã hàng hoá!");
            txtMaHH.requestFocus();
            return false;
        }
        if (txtTenHH.getText().isEmpty()) {
            MsgBox.alert(this, "Chưa nhập tên hàng hoá!");
            txtTenHH.requestFocus();
            return false;
        }
        if (txtDonViTinh.getText().isEmpty()) {
            MsgBox.alert(this, "Chưa nhập đơn vị tính!");
            txtDonViTinh.requestFocus();
            return false;
        }
        if (txtDonGia.getText().isEmpty()) {
            MsgBox.alert(this, "Chưa nhập đơn giá!");
            txtDonGia.requestFocus();
            return false;
        }
        return true;
    }

    // Thêm hàng hoá mới
    private void insert() {
        if (!isValidated()) {
            return;
        }

        if (hhDAO.selectByID(txtMaHH.getText()) != null) {
            MsgBox.alert(this, "Mã hàng hoá đã tồn tại!");
            txtMaHH.requestFocus();
            return;
        }

        HangHoa hh = getForm();
        try {
            hhDAO.insert(hh);
            this.fillToTableHangHoa();
            this.clearForm();
            MsgBox.alert(this, "Thêm mới thành công!");
        } catch (Exception e) {
            MsgBox.alert(this, "Thêm mới thất bại!");
            e.printStackTrace();
        }
    }

    // Xoá hàng hoá
    private void delete() {
        if (MsgBox.confirm(this, "Bạn có chắc chắc muốn xoá hàng hoá này?")) {
            int rowModel = tblHangHoa.convertRowIndexToModel(this.row);
            String maHH = (String) tblHangHoa.getValueAt(rowModel, 1);
            try {
                hhDAO.delete(maHH);
                this.fillToTableHangHoa();
                this.clearForm();
                MsgBox.alert(this, "Xoá thành công!");
            } catch (Exception e) {
                MsgBox.alert(this, "Xoá thất bại!");
                e.printStackTrace();
            }
        }
    }

    // Cập nhật hàng hoá
    private void update() {
        if (!isValidated()) {
            return;
        }
        HangHoa hh = getForm();
        try {
            hhDAO.update(hh);
            this.fillToTableHangHoa();
            this.updateStatus();
            MsgBox.alert(this, "Cập nhật thành công!");
        } catch (Exception e) {
            MsgBox.alert(this, "Cập nhật thất bại!");
            e.printStackTrace();
        }
    }

    // Định dạng bảng
    private void formatTable() {
        String header[] = {"STT", "MÃ HÀNG HOÁ", "TÊN HÀNG HOÁ", "ĐƠN GIÁ", "ĐƠN VỊ TÍNH"};
        this.modelHangHoa = new DefaultTableModel(header, 0) {

            @Override
            public boolean isCellEditable(int row, int column) {
                if (column == 3) {
                    return true;
                }
                return false;
            }

            Class[] types = new Class[]{
                Integer.class, String.class, String.class, String.class,
                String.class
            };

            @Override
            public Class getColumnClass(int columnIndex) {
                return types[columnIndex];
            }

        };

        tblHangHoa.setModel(modelHangHoa);

        // Set Table Sorter
        sorterHangHoa = new TableRowSorter<>(modelHangHoa);
        sorterHangHoa.setStringConverter(new LowerCaseStringConverter());
        sorterHangHoa.setComparator(3, new DoubleComparator(numPattern));
        tblHangHoa.setRowSorter(sorterHangHoa);

        // Set size column
        tblHangHoa.getColumnModel().getColumn(0).setPreferredWidth(40);
        tblHangHoa.getColumnModel().getColumn(1).setPreferredWidth(100);
        tblHangHoa.getColumnModel().getColumn(2).setPreferredWidth(424);
        tblHangHoa.getColumnModel().getColumn(3).setPreferredWidth(125);
        tblHangHoa.getColumnModel().getColumn(4).setPreferredWidth(125);

        tblHangHoa.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

        tblHangHoa.getColumnModel().getColumn(3).setCellEditor(new JSpinnerStringEditor(0, 0, 1000000000, 100000, numPattern));

        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(JLabel.CENTER);
        tblHangHoa.getColumnModel().getColumn(0).setCellRenderer(centerRenderer);
        tblHangHoa.getColumnModel().getColumn(1).setCellRenderer(centerRenderer);
        tblHangHoa.getColumnModel().getColumn(3).setCellRenderer(centerRenderer);
        tblHangHoa.getColumnModel().getColumn(4).setCellRenderer(centerRenderer);
    }

    private void updateDonGia() {
        double donGia = XNumber.toDouble((String) tblHangHoa.getValueAt(row, 3), numPattern);
        String maHH = (String) tblHangHoa.getValueAt(row, 1);
        HangHoa hh = hhDAO.selectByID(maHH);
        hh.setDonGia(donGia);
        hhDAO.update(hh);
        edit();
    }

    private void searchPhieu() {
        int columnFilter = cboTimKiemHangHoa.getSelectedIndex();
        String keyword = txtTimKiemHangHoa.getText();

        if (keyword.equals(defaultSearchHangHoa)) {
            keyword = "";
        }

        RowFilter<TableModel, Object> rf = null;
        try {
            rf = RowFilter.regexFilter(keyword.toLowerCase(), columnFilter);
        } catch (Exception e) {
            return;
        }
        sorterHangHoa.setRowFilter(rf);
    }

    // Đỗ lại dữ liệu 
    public void refreshForm() {
        this.fillToComboboxTimKiemHH();
        this.fillToTableHangHoa();

        this.timer.restart();
    }

    // sau hai phút tải lại dữ liệu
    private Timer timer = new Timer(300000, (e) -> {
        refreshForm();
    });

    // Nhấn enter không xuống dòng tiếp theo khi đang sửa ô trong table
    private void disableEnterCellNextLine(JTable table) {
        int row = table.getSelectedRow();
        if (row == 0) {
            row = table.getRowCount() - 1;
        } else {
            row--;
        }
        table.setRowSelectionInterval(row, row);
    }
}

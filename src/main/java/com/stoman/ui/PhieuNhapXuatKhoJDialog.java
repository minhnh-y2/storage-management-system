/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.stoman.ui;

import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import javax.swing.GroupLayout;
import javax.swing.LayoutStyle;
import javax.swing.border.*;
import com.formdev.flatlaf.FlatIntelliJLaf;
import com.google.zxing.WriterException;
import com.stoman.dao.ChiTietPhieuDAO;
import com.stoman.dao.DoiTacDAO;
import com.stoman.dao.HangHoaDAO;
import com.stoman.dao.KhoDAO;
import com.stoman.dao.LoaiDoiTacDAO;
import com.stoman.dao.LoaiHangHoaDAO;
import com.stoman.dao.LuuTruDAO;
import com.stoman.dao.NhanVienDAO;
import com.stoman.dao.PhieuDAO;
import com.stoman.dao.ProcedureDAO;
import com.stoman.entity.ChiTietPhieu;
import com.stoman.entity.DoiTac;
import com.stoman.entity.HangHoa;
import com.stoman.entity.Kho;
import com.stoman.entity.LoaiDoiTac;
import com.stoman.entity.LoaiHangHoa;
import com.stoman.entity.LuuTru;
import com.stoman.entity.NhanVien;
import com.stoman.entity.Phieu;
import com.stoman.utils.Auth;
import com.stoman.utils.DateComparator;
import com.stoman.utils.DateTimeComparator;
import com.stoman.utils.DoubleComparator;
import com.stoman.utils.TableDateCellRenderer;
import com.stoman.utils.XReport;
import com.stoman.utils.MsgBox;
import com.stoman.utils.QRCode;
import com.stoman.utils.JSpinnerEditor;
import com.stoman.utils.JSpinnerStringEditor;
import com.stoman.utils.LowerCaseStringConverter;
import com.stoman.utils.TableNumberCellRenderer;
import com.stoman.utils.XDate;
import com.stoman.utils.XNumber;
import java.awt.Color;
import java.awt.Component;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.JTable;
import javax.swing.RowFilter;
import javax.swing.SwingWorker;
import javax.swing.Timer;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.event.CellEditorListener;
import javax.swing.event.ChangeEvent;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import com.toedter.calendar.*;
import net.sf.jasperreports.engine.JRException;

/**
 *
 * @author Huy
 */
public class PhieuNhapXuatKhoJDialog extends javax.swing.JDialog {

    /**
     * Creates new form PhieuKiemKhoDialog
     */
    public PhieuNhapXuatKhoJDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        init();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        pnlBackground = new JPanel();
        tabs = new JTabbedPane();
        pnlChiTiet = new JPanel();
        peparator = new JSeparator();
        lblTimKiemCT = new JLabel();
        lblTimKiemCT2 = new JLabel();
        txtTimKiemCTPhieu = new JTextField();
        cboTimKiemCTPhieu = new JComboBox<>();
        pnlTblCTPhieu_sub = new JScrollPane();
        tblCTPhieu = new JTable();
        pnlNutDieuHuong = new JPanel();
        btnFirst = new JButton();
        btnPrev = new JButton();
        btnNext = new JButton();
        btnLast = new JButton();
        pnlChucNang = new JPanel();
        btnMoi = new JButton();
        btnXoa = new JButton();
        btnSua = new JButton();
        btnChiTiet = new JButton();
        btnXuatMaPhieu = new JButton();
        btnHoanTac = new JButton();
        pnlChucNangMoRong = new JPanel();
        btnXuatFile = new JButton();
        btnInPhieu = new JButton();
        lblCTP = new JLabel();
        lblChucNang = new JLabel();
        lblThongTinPhieu = new JLabel();
        pnlThongTinKhac = new JPanel();
        jSeparator3 = new JSeparator();
        jSeparator4 = new JSeparator();
        txtDaThanhToan = new JFormattedTextField();
        lblTongTien = new JLabel();
        chkThanhToan = new JCheckBox();
        lblDaThanhToan = new JLabel();
        chkChuyenHang = new JCheckBox();
        lblTongTienTitle = new JLabel();
        lblTrangThai = new JLabel();
        jSeparator2 = new JSeparator();
        pnlThongTin = new JPanel();
        lblDoiTac = new JLabel();
        txtNgayHoanThanh = new JDateChooser();
        lblMaNV = new JLabel();
        txtNgayThucHien = new JDateChooser();
        lblLoaiDT = new JLabel();
        lblLoaiPhieu = new JLabel();
        lblGhiChu = new JLabel();
        lblNgayHoanThanh = new JLabel();
        rdoPhieuXuat = new JRadioButton();
        lblNgayHoanThanh1 = new JLabel();
        lblNgayThucHien = new JLabel();
        cboKho = new JComboBox<>();
        cboLoaiDT = new JComboBox<>();
        lblNgayLap = new JLabel();
        txtNgayLap = new JFormattedTextField();
        rdoPhieuNhap = new JRadioButton();
        pnlGhiChu = new JScrollPane();
        txtGhiChu = new JTextArea();
        cboDoiTac = new JComboBox<>();
        txtMaNV = new JTextField();
        pnlDanhSach = new JPanel();
        scrollPane2 = new JScrollPane();
        tblPhieu = new JTable();
        lblTimKiemCT1 = new JLabel();
        txtTimKiemPhieu = new JTextField();
        lblTimKiemPhieu2 = new JLabel();
        cboTimKiemPhieu = new JComboBox<>();
        lblDanhSachPhieu = new JLabel();
        pnlChuThich = new JPanel();
        lblMau2 = new JLabel();
        txtMau3 = new JTextField();
        lblMau4 = new JLabel();
        txtMau4 = new JTextField();
        lblMau1 = new JLabel();
        txtMau1 = new JTextField();
        txtMau2 = new JTextField();
        lblMau3 = new JLabel();
        pnlThongKe = new JPanel();
        pnlHoanThanh = new JPanel();
        lblHoanThanh = new JLabel();
        lblSoLuongHoanThanh = new JLabel();
        pnlChuaThanhToan = new JPanel();
        lblThanhToan = new JLabel();
        lblSoLuongThanhToan = new JLabel();
        pnlChuaChuyenHang = new JPanel();
        lblChuyenHang = new JLabel();
        lblSoLuongChuyenHang = new JLabel();
        jSeparator5 = new JSeparator();
        pnlTongPhieu = new JPanel();
        lblTongPhieu = new JLabel();
        lblSoLuongPhieu = new JLabel();
        pnlLoaiPhieu = new JPanel();
        pnlPhieuNhap = new JPanel();
        lblPhieuNhap = new JLabel();
        pnlPhieuXuat = new JPanel();
        lblPhieuXuat = new JLabel();
        ChiTietPhieuDialog = new JDialog();
        pnlBackgroundDialog = new JPanel();
        pnlTblCTPhieu_main = new JScrollPane();
        tblCTPhieu_ChiTiet = new JTable();
        pnlThongTinCTP = new JPanel();
        lblLoaiHH = new JLabel();
        lblTenHH = new JLabel();
        cboLoaiHH = new JComboBox<>();
        cboHangHoa = new JComboBox<>();
        pnlChucNangCTP = new JPanel();
        btnThemCTP = new JButton();
        btnXoaCTP = new JButton();
        QRCodeDialog = new JDialog();
        pnlBackgroundQR = new JPanel();
        lblQRCodeImage = new JLabel();
        btnGrpLoaiPhieu = new ButtonGroup();

        //======== this ========
        setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("StoMan - Qu\u1ea3n l\u00fd phi\u1ebfu nh\u1eadp xu\u1ea5t kho");
        setFocusCycleRoot(false);
        setResizable(false);
        addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosed(WindowEvent e) {
                formWindowClosed(e);
            }
        });
        var contentPane = getContentPane();

        //======== pnlBackground ========
        {
            pnlBackground.setLayout(new BorderLayout());

            //======== tabs ========
            {

                //======== pnlChiTiet ========
                {

                    //---- lblTimKiemCT ----
                    lblTimKiemCT.setText("T\u00ecm ki\u1ebfm");

                    //---- lblTimKiemCT2 ----
                    lblTimKiemCT2.setText("theo");

                    //---- txtTimKiemCTPhieu ----
                    txtTimKiemCTPhieu.addKeyListener(new KeyAdapter() {
                        @Override
                        public void keyReleased(KeyEvent e) {
                            txtTimKiemCTPhieuKeyReleased(e);
                        }
                    });

                    //---- cboTimKiemCTPhieu ----
                    cboTimKiemCTPhieu.addActionListener(e -> cboTimKiemCTPhieuActionPerformed(e));

                    //======== pnlTblCTPhieu_sub ========
                    {
                        pnlTblCTPhieu_sub.setOpaque(false);

                        //---- tblCTPhieu ----
                        tblCTPhieu.setModel(new DefaultTableModel(
                            new Object[][] {
                            },
                            new String[] {
                                "null", "Title 2", "Title 3", "Title 4"
                            }
                        ));
                        tblCTPhieu.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
                        tblCTPhieu.addMouseListener(new MouseAdapter() {
                            @Override
                            public void mouseClicked(MouseEvent e) {
                                tblCTPhieuMouseClicked(e);
                            }
                        });
                        tblCTPhieu.addPropertyChangeListener(e -> tblCTPhieuPropertyChange(e));
                        tblCTPhieu.addKeyListener(new KeyAdapter() {
                            @Override
                            public void keyReleased(KeyEvent e) {
                                tblCTPhieuKeyReleased(e);
                            }
                        });
                        pnlTblCTPhieu_sub.setViewportView(tblCTPhieu);
                    }

                    //======== pnlNutDieuHuong ========
                    {
                        pnlNutDieuHuong.setOpaque(false);
                        pnlNutDieuHuong.setLayout(new GridLayout());

                        //---- btnFirst ----
                        btnFirst.setIcon(new ImageIcon(getClass().getResource("/com/stoman/icons/skip-to-start.png")));
                        btnFirst.setPreferredSize(new Dimension(100, 33));
                        btnFirst.addActionListener(e -> btnFirstActionPerformed(e));
                        pnlNutDieuHuong.add(btnFirst);

                        //---- btnPrev ----
                        btnPrev.setIcon(new ImageIcon(getClass().getResource("/com/stoman/icons/double-left-24.png")));
                        btnPrev.setPreferredSize(new Dimension(100, 33));
                        btnPrev.addActionListener(e -> btnPrevActionPerformed(e));
                        pnlNutDieuHuong.add(btnPrev);

                        //---- btnNext ----
                        btnNext.setIcon(new ImageIcon(getClass().getResource("/com/stoman/icons/double-right.png")));
                        btnNext.setPreferredSize(new Dimension(100, 33));
                        btnNext.addActionListener(e -> btnNextActionPerformed(e));
                        pnlNutDieuHuong.add(btnNext);

                        //---- btnLast ----
                        btnLast.setIcon(new ImageIcon(getClass().getResource("/com/stoman/icons/skip-to-end.png")));
                        btnLast.setPreferredSize(new Dimension(100, 33));
                        btnLast.addActionListener(e -> btnLastActionPerformed(e));
                        pnlNutDieuHuong.add(btnLast);
                    }

                    //======== pnlChucNang ========
                    {
                        pnlChucNang.setBackground(new Color(0x9999ff));
                        pnlChucNang.setOpaque(false);
                        pnlChucNang.setLayout(new GridBagLayout());

                        //---- btnMoi ----
                        btnMoi.setIcon(new ImageIcon(getClass().getResource("/com/stoman/icons/icons8_document_32px.png")));
                        btnMoi.setText("Phi\u1ebfu m\u1edbi");
                        btnMoi.setPreferredSize(new Dimension(148, 40));
                        btnMoi.addActionListener(e -> btnMoiActionPerformed(e));
                        pnlChucNang.add(btnMoi, new GridBagConstraints(0, 0, 1, 1, 0.0, 0.0,
                            GridBagConstraints.CENTER, GridBagConstraints.NONE,
                            new Insets(0, 0, 0, 0), 0, 27));

                        //---- btnXoa ----
                        btnXoa.setIcon(new ImageIcon(getClass().getResource("/com/stoman/icons/icons8_delete_document_32px.png")));
                        btnXoa.setText("Xo\u00e1 phi\u1ebfu");
                        btnXoa.setPreferredSize(new Dimension(148, 40));
                        btnXoa.addActionListener(e -> btnXoaActionPerformed(e));
                        pnlChucNang.add(btnXoa, new GridBagConstraints(0, 2, 1, 1, 0.0, 0.0,
                            GridBagConstraints.CENTER, GridBagConstraints.NONE,
                            new Insets(0, 0, 0, 0), 0, 27));

                        //---- btnSua ----
                        btnSua.setIcon(new ImageIcon(getClass().getResource("/com/stoman/icons/edit-property-32.png")));
                        btnSua.setText("S\u1eeda phi\u1ebfu");
                        btnSua.setPreferredSize(new Dimension(148, 40));
                        btnSua.addActionListener(e -> btnSuaActionPerformed(e));
                        pnlChucNang.add(btnSua, new GridBagConstraints(0, 3, 1, 1, 0.0, 0.0,
                            GridBagConstraints.CENTER, GridBagConstraints.NONE,
                            new Insets(0, 0, 0, 0), 0, 27));

                        //---- btnChiTiet ----
                        btnChiTiet.setIcon(new ImageIcon(getClass().getResource("/com/stoman/icons/more-details-32.png")));
                        btnChiTiet.setText("Chi ti\u1ebft phi\u1ebfu");
                        btnChiTiet.setPreferredSize(new Dimension(148, 40));
                        btnChiTiet.addActionListener(e -> btnChiTietActionPerformed(e));
                        pnlChucNang.add(btnChiTiet, new GridBagConstraints(0, 5, 1, 1, 0.0, 0.0,
                            GridBagConstraints.CENTER, GridBagConstraints.NONE,
                            new Insets(0, 0, 0, 0), 0, 27));

                        //---- btnXuatMaPhieu ----
                        btnXuatMaPhieu.setIcon(new ImageIcon(getClass().getResource("/com/stoman/icons/icons8_qr_code_24px.png")));
                        btnXuatMaPhieu.setText("M\u00e3 phi\u1ebfu QR");
                        btnXuatMaPhieu.setPreferredSize(new Dimension(148, 40));
                        btnXuatMaPhieu.addActionListener(e -> btnXuatMaPhieuActionPerformed(e));
                        pnlChucNang.add(btnXuatMaPhieu, new GridBagConstraints(0, 6, 1, 1, 0.0, 0.0,
                            GridBagConstraints.CENTER, GridBagConstraints.NONE,
                            new Insets(0, 0, 0, 0), 0, 27));

                        //---- btnHoanTac ----
                        btnHoanTac.setIcon(new ImageIcon(getClass().getResource("/com/stoman/icons/icons8_undo_32px.png")));
                        btnHoanTac.setText("Hu\u1ef7 thay \u0111\u1ed5i");
                        btnHoanTac.setPreferredSize(new Dimension(148, 40));
                        btnHoanTac.addActionListener(e -> btnHoanTacActionPerformed(e));
                        pnlChucNang.add(btnHoanTac, new GridBagConstraints(0, 4, 1, 1, 0.0, 0.0,
                            GridBagConstraints.CENTER, GridBagConstraints.NONE,
                            new Insets(0, 0, 0, 0), 0, 27));
                    }

                    //======== pnlChucNangMoRong ========
                    {
                        pnlChucNangMoRong.setOpaque(false);
                        pnlChucNangMoRong.setLayout(new GridLayout(1, 2));

                        //---- btnXuatFile ----
                        btnXuatFile.setIcon(new ImageIcon(getClass().getResource("/com/stoman/icons/open-document.png")));
                        btnXuatFile.setText("Xu\u1ea5t file");
                        btnXuatFile.addActionListener(e -> btnXuatFileActionPerformed(e));
                        pnlChucNangMoRong.add(btnXuatFile);

                        //---- btnInPhieu ----
                        btnInPhieu.setIcon(new ImageIcon(getClass().getResource("/com/stoman/icons/print.png")));
                        btnInPhieu.setText("In phi\u1ebfu");
                        btnInPhieu.addActionListener(e -> btnInPhieuActionPerformed(e));
                        pnlChucNangMoRong.add(btnInPhieu);
                    }

                    //---- lblCTP ----
                    lblCTP.setFont(new Font("Tahoma", Font.BOLD, 14));
                    lblCTP.setHorizontalAlignment(SwingConstants.CENTER);
                    lblCTP.setText("CHI TI\u1ebeT PHI\u1ebeU");

                    //---- lblChucNang ----
                    lblChucNang.setFont(new Font("Tahoma", Font.BOLD, 14));
                    lblChucNang.setHorizontalAlignment(SwingConstants.CENTER);
                    lblChucNang.setText("CH\u1ee8C N\u0102NG");

                    //---- lblThongTinPhieu ----
                    lblThongTinPhieu.setFont(new Font("Tahoma", Font.BOLD, 14));
                    lblThongTinPhieu.setHorizontalAlignment(SwingConstants.CENTER);
                    lblThongTinPhieu.setText("TH\u00d4NG TIN PHI\u1ebeU");

                    //======== pnlThongTinKhac ========
                    {

                        //---- txtDaThanhToan ----
                        txtDaThanhToan.setText("0.0");
                        txtDaThanhToan.setFont(new Font("Segoe UI", Font.PLAIN, 14));

                        //---- lblTongTien ----
                        lblTongTien.setFont(new Font("Segoe UI", Font.BOLD, 14));
                        lblTongTien.setText("0.0");
                        lblTongTien.setBorder(new EmptyBorder(1, 7, 1, 1));

                        //---- chkThanhToan ----
                        chkThanhToan.setText("Ho\u00e0n th\u00e0nh thanh to\u00e1n cho \u0111\u1ed1i t\u00e1c");
                        chkThanhToan.addActionListener(e -> chkThanhToanActionPerformed(e));

                        //---- lblDaThanhToan ----
                        lblDaThanhToan.setFont(new Font("Segoe UI", Font.BOLD, 13));
                        lblDaThanhToan.setText("\u0110\u00e3 thanh to\u00e1n cho \u0111\u1ed1i t\u00e1c");

                        //---- chkChuyenHang ----
                        chkChuyenHang.setText("Ho\u00e0n th\u00e0nh nh\u1eadp h\u00e0ng");
                        chkChuyenHang.addMouseListener(new MouseAdapter() {
                            @Override
                            public void mouseClicked(MouseEvent e) {
                                chkChuyenHangMouseClicked(e);
                            }
                        });

                        //---- lblTongTienTitle ----
                        lblTongTienTitle.setFont(new Font("Segoe UI", Font.BOLD, 13));
                        lblTongTienTitle.setText("T\u1ed5ng ti\u1ec1n c\u1ea7n thanh to\u00e1n");

                        //---- lblTrangThai ----
                        lblTrangThai.setFont(new Font("Segoe UI", Font.BOLD, 13));
                        lblTrangThai.setText("Tr\u1ea1ng th\u00e1i");

                        GroupLayout pnlThongTinKhacLayout = new GroupLayout(pnlThongTinKhac);
                        pnlThongTinKhac.setLayout(pnlThongTinKhacLayout);
                        pnlThongTinKhacLayout.setHorizontalGroup(
                            pnlThongTinKhacLayout.createParallelGroup()
                                .addGroup(pnlThongTinKhacLayout.createSequentialGroup()
                                    .addContainerGap()
                                    .addGroup(pnlThongTinKhacLayout.createParallelGroup()
                                        .addComponent(lblTongTien, GroupLayout.Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jSeparator4)
                                        .addComponent(jSeparator3, GroupLayout.Alignment.TRAILING)
                                        .addComponent(txtDaThanhToan)
                                        .addGroup(pnlThongTinKhacLayout.createSequentialGroup()
                                            .addComponent(lblTrangThai)
                                            .addGap(0, 0, Short.MAX_VALUE))
                                        .addComponent(lblDaThanhToan, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(lblTongTienTitle, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(chkThanhToan, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(chkChuyenHang, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addContainerGap())
                        );
                        pnlThongTinKhacLayout.setVerticalGroup(
                            pnlThongTinKhacLayout.createParallelGroup()
                                .addGroup(pnlThongTinKhacLayout.createSequentialGroup()
                                    .addContainerGap()
                                    .addComponent(lblTongTienTitle)
                                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(lblTongTien, GroupLayout.PREFERRED_SIZE, 16, GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jSeparator4, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(lblDaThanhToan)
                                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(txtDaThanhToan, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jSeparator3, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(lblTrangThai)
                                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(chkChuyenHang)
                                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(chkThanhToan)
                                    .addContainerGap())
                        );
                    }

                    //---- jSeparator2 ----
                    jSeparator2.setOrientation(SwingConstants.VERTICAL);

                    //======== pnlThongTin ========
                    {

                        //---- lblDoiTac ----
                        lblDoiTac.setFont(new Font("Segoe UI", Font.BOLD, 13));
                        lblDoiTac.setText("\u0110\u1ed1i t\u00e1c");

                        //---- txtNgayHoanThanh ----
                        txtNgayHoanThanh.setDate(new Date());
                        txtNgayHoanThanh.setOpaque(false);

                        //---- lblMaNV ----
                        lblMaNV.setFont(new Font("Segoe UI", Font.BOLD, 13));
                        lblMaNV.setText("Ng\u01b0\u1eddi l\u1eadp");

                        //---- txtNgayThucHien ----
                        txtNgayThucHien.setDate(new Date());
                        txtNgayThucHien.setOpaque(false);

                        //---- lblLoaiDT ----
                        lblLoaiDT.setFont(new Font("Segoe UI", Font.BOLD, 13));
                        lblLoaiDT.setText("Lo\u1ea1i \u0111\u1ed1i t\u00e1c");

                        //---- lblLoaiPhieu ----
                        lblLoaiPhieu.setFont(new Font("Segoe UI", Font.BOLD, 13));
                        lblLoaiPhieu.setText("Lo\u1ea1i phi\u1ebfu");

                        //---- lblGhiChu ----
                        lblGhiChu.setFont(new Font("Segoe UI", Font.BOLD, 13));
                        lblGhiChu.setText("Ghi ch\u00fa");

                        //---- lblNgayHoanThanh ----
                        lblNgayHoanThanh.setFont(new Font("Segoe UI", Font.BOLD, 13));
                        lblNgayHoanThanh.setText("Ng\u00e0y ho\u00e0n th\u00e0nh");

                        //---- rdoPhieuXuat ----
                        rdoPhieuXuat.setText("Phi\u1ebfu xu\u1ea5t");

                        //---- lblNgayHoanThanh1 ----
                        lblNgayHoanThanh1.setFont(new Font("Segoe UI", Font.BOLD, 13));
                        lblNgayHoanThanh1.setText("Kho");

                        //---- lblNgayThucHien ----
                        lblNgayThucHien.setFont(new Font("Segoe UI", Font.BOLD, 13));
                        lblNgayThucHien.setText("Ng\u00e0y th\u1ef1c hi\u1ec7n");

                        //---- cboKho ----
                        cboKho.setEditable(true);
                        cboKho.setModel(new DefaultComboBoxModel<>(new String[] {

                        }));
                        cboKho.addActionListener(e -> cboKhoActionPerformed(e));

                        //---- cboLoaiDT ----
                        cboLoaiDT.setModel(new DefaultComboBoxModel<>(new String[] {

                        }));
                        cboLoaiDT.addActionListener(e -> cboLoaiDTActionPerformed(e));

                        //---- lblNgayLap ----
                        lblNgayLap.setFont(new Font("Segoe UI", Font.BOLD, 13));
                        lblNgayLap.setText("Ng\u00e0y l\u1eadp");

                        //---- txtNgayLap ----
                        txtNgayLap.setDisabledTextColor(Color.black);
                        txtNgayLap.setFocusable(false);

                        //---- rdoPhieuNhap ----
                        rdoPhieuNhap.setSelected(true);
                        rdoPhieuNhap.setText("Phi\u1ebfu nh\u1eadp");
                        rdoPhieuNhap.addChangeListener(e -> rdoPhieuNhapStateChanged(e));

                        //======== pnlGhiChu ========
                        {

                            //---- txtGhiChu ----
                            txtGhiChu.setColumns(20);
                            txtGhiChu.setLineWrap(true);
                            txtGhiChu.setRows(5);
                            txtGhiChu.setWrapStyleWord(true);
                            txtGhiChu.addFocusListener(new FocusAdapter() {
                                @Override
                                public void focusGained(FocusEvent e) {
                                    txtGhiChuFocusGained(e);
                                }
                            });
                            pnlGhiChu.setViewportView(txtGhiChu);
                        }

                        //---- cboDoiTac ----
                        cboDoiTac.setModel(new DefaultComboBoxModel<>(new String[] {

                        }));

                        //---- txtMaNV ----
                        txtMaNV.setDisabledTextColor(Color.black);
                        txtMaNV.setFocusable(false);

                        GroupLayout pnlThongTinLayout = new GroupLayout(pnlThongTin);
                        pnlThongTin.setLayout(pnlThongTinLayout);
                        pnlThongTinLayout.setHorizontalGroup(
                            pnlThongTinLayout.createParallelGroup()
                                .addGroup(pnlThongTinLayout.createSequentialGroup()
                                    .addGap(9, 9, 9)
                                    .addGroup(pnlThongTinLayout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                                        .addComponent(lblMaNV, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(lblNgayHoanThanh1, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(lblLoaiPhieu, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(lblNgayLap, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(lblGhiChu, GroupLayout.PREFERRED_SIZE, 70, GroupLayout.PREFERRED_SIZE))
                                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(pnlThongTinLayout.createParallelGroup()
                                        .addGroup(pnlThongTinLayout.createSequentialGroup()
                                            .addGroup(pnlThongTinLayout.createParallelGroup()
                                                .addGroup(pnlThongTinLayout.createSequentialGroup()
                                                    .addComponent(rdoPhieuNhap)
                                                    .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                                                    .addComponent(rdoPhieuXuat))
                                                .addComponent(txtMaNV)
                                                .addComponent(txtNgayLap)
                                                .addComponent(cboKho, GroupLayout.DEFAULT_SIZE, 302, Short.MAX_VALUE))
                                            .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addGroup(pnlThongTinLayout.createParallelGroup()
                                                .addGroup(pnlThongTinLayout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                                                    .addComponent(lblDoiTac, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                    .addComponent(lblNgayHoanThanh, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                    .addComponent(lblLoaiDT, GroupLayout.PREFERRED_SIZE, 110, GroupLayout.PREFERRED_SIZE))
                                                .addComponent(lblNgayThucHien))
                                            .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                            .addGroup(pnlThongTinLayout.createParallelGroup()
                                                .addComponent(cboLoaiDT)
                                                .addComponent(txtNgayThucHien, GroupLayout.DEFAULT_SIZE, 237, Short.MAX_VALUE)
                                                .addComponent(txtNgayHoanThanh, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(cboDoiTac)))
                                        .addComponent(pnlGhiChu))
                                    .addContainerGap())
                        );
                        pnlThongTinLayout.setVerticalGroup(
                            pnlThongTinLayout.createParallelGroup()
                                .addGroup(pnlThongTinLayout.createSequentialGroup()
                                    .addContainerGap()
                                    .addGroup(pnlThongTinLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                        .addComponent(lblLoaiDT)
                                        .addComponent(cboLoaiDT, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                        .addComponent(lblLoaiPhieu)
                                        .addComponent(rdoPhieuNhap)
                                        .addComponent(rdoPhieuXuat))
                                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(pnlThongTinLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                        .addComponent(lblDoiTac)
                                        .addComponent(cboDoiTac, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                        .addComponent(lblNgayHoanThanh1)
                                        .addComponent(cboKho, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(pnlThongTinLayout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                                        .addGroup(pnlThongTinLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                            .addComponent(lblMaNV)
                                            .addComponent(txtMaNV, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                            .addComponent(lblNgayThucHien, GroupLayout.PREFERRED_SIZE, 22, GroupLayout.PREFERRED_SIZE))
                                        .addComponent(txtNgayThucHien, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(pnlThongTinLayout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                                        .addComponent(txtNgayHoanThanh, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(lblNgayHoanThanh, GroupLayout.PREFERRED_SIZE, 22, GroupLayout.PREFERRED_SIZE)
                                        .addGroup(pnlThongTinLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                            .addComponent(lblNgayLap)
                                            .addComponent(txtNgayLap, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)))
                                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(pnlThongTinLayout.createParallelGroup()
                                        .addGroup(pnlThongTinLayout.createSequentialGroup()
                                            .addComponent(lblGhiChu)
                                            .addGap(0, 0, Short.MAX_VALUE))
                                        .addComponent(pnlGhiChu, GroupLayout.DEFAULT_SIZE, 0, Short.MAX_VALUE))
                                    .addContainerGap())
                        );
                    }

                    GroupLayout pnlChiTietLayout = new GroupLayout(pnlChiTiet);
                    pnlChiTiet.setLayout(pnlChiTietLayout);
                    pnlChiTietLayout.setHorizontalGroup(
                        pnlChiTietLayout.createParallelGroup()
                            .addGroup(pnlChiTietLayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(pnlChiTietLayout.createParallelGroup()
                                    .addComponent(lblThongTinPhieu, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(peparator)
                                    .addGroup(pnlChiTietLayout.createSequentialGroup()
                                        .addGroup(pnlChiTietLayout.createParallelGroup()
                                            .addGroup(pnlChiTietLayout.createSequentialGroup()
                                                .addComponent(lblTimKiemCT)
                                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(txtTimKiemCTPhieu)
                                                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(lblTimKiemCT2)
                                                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(cboTimKiemCTPhieu, GroupLayout.PREFERRED_SIZE, 250, GroupLayout.PREFERRED_SIZE))
                                            .addComponent(pnlTblCTPhieu_sub, GroupLayout.Alignment.TRAILING)
                                            .addComponent(lblCTP, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addGroup(pnlChiTietLayout.createSequentialGroup()
                                                .addComponent(pnlNutDieuHuong, GroupLayout.PREFERRED_SIZE, 373, GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(pnlChucNangMoRong, GroupLayout.PREFERRED_SIZE, 220, GroupLayout.PREFERRED_SIZE)))
                                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(pnlChiTietLayout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                                            .addComponent(pnlChucNang, GroupLayout.DEFAULT_SIZE, 163, Short.MAX_VALUE)
                                            .addComponent(lblChucNang, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                    .addGroup(pnlChiTietLayout.createSequentialGroup()
                                        .addComponent(pnlThongTin, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGap(0, 0, 0)
                                        .addComponent(jSeparator2, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                        .addGap(0, 0, 0)
                                        .addComponent(pnlThongTinKhac, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)))
                                .addContainerGap())
                    );
                    pnlChiTietLayout.setVerticalGroup(
                        pnlChiTietLayout.createParallelGroup()
                            .addGroup(pnlChiTietLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(lblThongTinPhieu)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(pnlChiTietLayout.createParallelGroup()
                                    .addComponent(pnlThongTinKhac, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(pnlThongTin, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jSeparator2))
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(peparator, GroupLayout.PREFERRED_SIZE, 3, GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(pnlChiTietLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                    .addComponent(lblCTP)
                                    .addComponent(lblChucNang))
                                .addGap(8, 8, 8)
                                .addGroup(pnlChiTietLayout.createParallelGroup()
                                    .addGroup(pnlChiTietLayout.createSequentialGroup()
                                        .addGroup(pnlChiTietLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                            .addComponent(lblTimKiemCT)
                                            .addComponent(txtTimKiemCTPhieu, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                            .addComponent(lblTimKiemCT2)
                                            .addComponent(cboTimKiemCTPhieu, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(pnlTblCTPhieu_sub, GroupLayout.DEFAULT_SIZE, 330, Short.MAX_VALUE)
                                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(pnlChiTietLayout.createParallelGroup()
                                            .addComponent(pnlNutDieuHuong, GroupLayout.Alignment.TRAILING, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                            .addComponent(pnlChucNangMoRong, GroupLayout.Alignment.TRAILING, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)))
                                    .addComponent(pnlChucNang, GroupLayout.DEFAULT_SIZE, 403, Short.MAX_VALUE))
                                .addContainerGap())
                    );
                }
                tabs.addTab("Th\u00f4ng tin phi\u1ebfu", pnlChiTiet);

                //======== pnlDanhSach ========
                {
                    pnlDanhSach.setOpaque(false);

                    //======== scrollPane2 ========
                    {

                        //---- tblPhieu ----
                        tblPhieu.setModel(new DefaultTableModel(
                            new Object[][] {
                            },
                            new String[] {
                                "Title 1", "Title 2", "Title 3", "Title 4"
                            }
                        ));
                        tblPhieu.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
                        tblPhieu.addMouseListener(new MouseAdapter() {
                            @Override
                            public void mouseClicked(MouseEvent e) {
                                tblPhieuMouseClicked(e);
                            }
                        });
                        scrollPane2.setViewportView(tblPhieu);
                    }

                    //---- lblTimKiemCT1 ----
                    lblTimKiemCT1.setIcon(new ImageIcon(getClass().getResource("/com/stoman/icons/search_24px.png")));

                    //---- txtTimKiemPhieu ----
                    txtTimKiemPhieu.addKeyListener(new KeyAdapter() {
                        @Override
                        public void keyReleased(KeyEvent e) {
                            txtTimKiemPhieuKeyReleased(e);
                        }
                    });

                    //---- lblTimKiemPhieu2 ----
                    lblTimKiemPhieu2.setText("theo");

                    //---- cboTimKiemPhieu ----
                    cboTimKiemPhieu.addActionListener(e -> cboTimKiemPhieuActionPerformed(e));

                    //---- lblDanhSachPhieu ----
                    lblDanhSachPhieu.setFont(new Font("Tahoma", Font.BOLD, 14));
                    lblDanhSachPhieu.setHorizontalAlignment(SwingConstants.CENTER);
                    lblDanhSachPhieu.setText("DANH S\u00c1CH PHI\u1ebeU");

                    //======== pnlChuThich ========
                    {
                        pnlChuThich.setBorder(new TitledBorder(new EtchedBorder(), "Ch\u00fa th\u00edch", TitledBorder.LEADING, TitledBorder.DEFAULT_POSITION,
                            new Font("Tahoma", Font.BOLD, 12)));
                        pnlChuThich.setFont(new Font("Tahoma", Font.BOLD, 12));

                        //---- lblMau2 ----
                        lblMau2.setText("Phi\u1ebfu ch\u01b0a ho\u00e0n th\u00e0nh thanh to\u00e1n");

                        //---- txtMau3 ----
                        txtMau3.setBackground(new Color(0xff9999));
                        txtMau3.setBorder(null);
                        txtMau3.setFocusable(false);

                        //---- lblMau4 ----
                        lblMau4.setText("Phi\u1ebfu ch\u01b0a th\u1ef1c hi\u1ec7n");

                        //---- txtMau4 ----
                        txtMau4.setBackground(new Color(0x66ff99));
                        txtMau4.setBorder(null);
                        txtMau4.setFocusable(false);

                        //---- lblMau1 ----
                        lblMau1.setText("Phi\u1ebfu \u0111\u00e3 ho\u00e0n th\u00e0nh");

                        //---- txtMau1 ----
                        txtMau1.setBorder(new EtchedBorder());
                        txtMau1.setFocusable(false);

                        //---- txtMau2 ----
                        txtMau2.setBackground(new Color(0xffcc66));
                        txtMau2.setBorder(null);
                        txtMau2.setFocusable(false);

                        //---- lblMau3 ----
                        lblMau3.setText("Phi\u1ebfu ch\u01b0a ho\u00e0n th\u00e0nh chuy\u1ec3n h\u00e0ng");

                        GroupLayout pnlChuThichLayout = new GroupLayout(pnlChuThich);
                        pnlChuThich.setLayout(pnlChuThichLayout);
                        pnlChuThichLayout.setHorizontalGroup(
                            pnlChuThichLayout.createParallelGroup()
                                .addGroup(pnlChuThichLayout.createSequentialGroup()
                                    .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(pnlChuThichLayout.createParallelGroup()
                                        .addComponent(txtMau1, GroupLayout.Alignment.TRAILING, GroupLayout.PREFERRED_SIZE, 24, GroupLayout.PREFERRED_SIZE)
                                        .addComponent(txtMau2, GroupLayout.Alignment.TRAILING, GroupLayout.PREFERRED_SIZE, 24, GroupLayout.PREFERRED_SIZE))
                                    .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addGroup(pnlChuThichLayout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                                        .addComponent(lblMau3, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(lblMau1, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addGroup(pnlChuThichLayout.createParallelGroup()
                                        .addComponent(txtMau4, GroupLayout.Alignment.TRAILING, GroupLayout.PREFERRED_SIZE, 24, GroupLayout.PREFERRED_SIZE)
                                        .addComponent(txtMau3, GroupLayout.PREFERRED_SIZE, 24, GroupLayout.PREFERRED_SIZE))
                                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(pnlChuThichLayout.createParallelGroup(GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(lblMau4, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(lblMau2, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addContainerGap())
                        );
                        pnlChuThichLayout.setVerticalGroup(
                            pnlChuThichLayout.createParallelGroup()
                                .addGroup(pnlChuThichLayout.createSequentialGroup()
                                    .addContainerGap()
                                    .addGroup(pnlChuThichLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                        .addComponent(lblMau4)
                                        .addComponent(txtMau3, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                        .addComponent(lblMau1)
                                        .addComponent(txtMau1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(pnlChuThichLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                        .addComponent(txtMau4, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                        .addComponent(lblMau2)
                                        .addComponent(txtMau2, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                        .addComponent(lblMau3))
                                    .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        );
                    }

                    //======== pnlThongKe ========
                    {
                        pnlThongKe.setBorder(new TitledBorder(new EtchedBorder(), "Th\u1ed1ng k\u00ea", TitledBorder.LEADING, TitledBorder.DEFAULT_POSITION,
                            new Font("Tahoma", Font.BOLD, 12)));
                        pnlThongKe.setFont(new Font("Tahoma", Font.BOLD, 12));
                        pnlThongKe.setLayout(new FlowLayout(FlowLayout.CENTER, 20, 5));

                        //======== pnlHoanThanh ========
                        {
                            pnlHoanThanh.setLayout(new GridLayout(0, 1, 0, 10));

                            //---- lblHoanThanh ----
                            lblHoanThanh.setFont(new Font("Tahoma", Font.BOLD, 10));
                            lblHoanThanh.setHorizontalAlignment(SwingConstants.CENTER);
                            lblHoanThanh.setText("Phi\u1ebfu ho\u00e0n th\u00e0nh");
                            pnlHoanThanh.add(lblHoanThanh);

                            //---- lblSoLuongHoanThanh ----
                            lblSoLuongHoanThanh.setFont(new Font("Tahoma", Font.PLAIN, 14));
                            lblSoLuongHoanThanh.setHorizontalAlignment(SwingConstants.CENTER);
                            lblSoLuongHoanThanh.setText("0");
                            pnlHoanThanh.add(lblSoLuongHoanThanh);
                        }
                        pnlThongKe.add(pnlHoanThanh);

                        //======== pnlChuaThanhToan ========
                        {
                            pnlChuaThanhToan.setLayout(new GridLayout(0, 1, 0, 10));

                            //---- lblThanhToan ----
                            lblThanhToan.setFont(new Font("Tahoma", Font.BOLD, 10));
                            lblThanhToan.setHorizontalAlignment(SwingConstants.CENTER);
                            lblThanhToan.setText("Phi\u1ebfu ch\u01b0a thanh to\u00e1n ");
                            pnlChuaThanhToan.add(lblThanhToan);

                            //---- lblSoLuongThanhToan ----
                            lblSoLuongThanhToan.setFont(new Font("Tahoma", Font.PLAIN, 14));
                            lblSoLuongThanhToan.setHorizontalAlignment(SwingConstants.CENTER);
                            lblSoLuongThanhToan.setText("0");
                            pnlChuaThanhToan.add(lblSoLuongThanhToan);
                        }
                        pnlThongKe.add(pnlChuaThanhToan);

                        //======== pnlChuaChuyenHang ========
                        {
                            pnlChuaChuyenHang.setLayout(new GridLayout(0, 1, 0, 10));

                            //---- lblChuyenHang ----
                            lblChuyenHang.setFont(new Font("Tahoma", Font.BOLD, 10));
                            lblChuyenHang.setHorizontalAlignment(SwingConstants.CENTER);
                            lblChuyenHang.setText("Phi\u1ebfu ch\u01b0a chuy\u1ec3n h\u00e0ng");
                            pnlChuaChuyenHang.add(lblChuyenHang);

                            //---- lblSoLuongChuyenHang ----
                            lblSoLuongChuyenHang.setFont(new Font("Tahoma", Font.PLAIN, 14));
                            lblSoLuongChuyenHang.setHorizontalAlignment(SwingConstants.CENTER);
                            lblSoLuongChuyenHang.setText("0");
                            pnlChuaChuyenHang.add(lblSoLuongChuyenHang);
                        }
                        pnlThongKe.add(pnlChuaChuyenHang);
                        pnlThongKe.add(jSeparator5);

                        //======== pnlTongPhieu ========
                        {
                            pnlTongPhieu.setLayout(new GridLayout(0, 1, 0, 10));

                            //---- lblTongPhieu ----
                            lblTongPhieu.setFont(new Font("Tahoma", Font.BOLD, 10));
                            lblTongPhieu.setHorizontalAlignment(SwingConstants.CENTER);
                            lblTongPhieu.setText("T\u1ed5ng s\u1ed1 phi\u1ebfu");
                            pnlTongPhieu.add(lblTongPhieu);

                            //---- lblSoLuongPhieu ----
                            lblSoLuongPhieu.setFont(new Font("Tahoma", Font.PLAIN, 14));
                            lblSoLuongPhieu.setHorizontalAlignment(SwingConstants.CENTER);
                            lblSoLuongPhieu.setText("0");
                            pnlTongPhieu.add(lblSoLuongPhieu);
                        }
                        pnlThongKe.add(pnlTongPhieu);
                    }

                    //======== pnlLoaiPhieu ========
                    {
                        pnlLoaiPhieu.setBorder(new LineBorder(new Color(0xb3d9ff), 2));
                        pnlLoaiPhieu.setLayout(new GridLayout());

                        //======== pnlPhieuNhap ========
                        {
                            pnlPhieuNhap.setLayout(new BorderLayout());

                            //---- lblPhieuNhap ----
                            lblPhieuNhap.setHorizontalAlignment(SwingConstants.CENTER);
                            lblPhieuNhap.setText("Phi\u1ebfu nh\u1eadp");
                            lblPhieuNhap.addMouseListener(new MouseAdapter() {
                                @Override
                                public void mouseClicked(MouseEvent e) {
                                    lblPhieuNhapMouseClicked(e);
                                }
                            });
                            pnlPhieuNhap.add(lblPhieuNhap, BorderLayout.CENTER);
                        }
                        pnlLoaiPhieu.add(pnlPhieuNhap);

                        //======== pnlPhieuXuat ========
                        {
                            pnlPhieuXuat.setLayout(new BorderLayout());

                            //---- lblPhieuXuat ----
                            lblPhieuXuat.setHorizontalAlignment(SwingConstants.CENTER);
                            lblPhieuXuat.setText("Phi\u1ebfu xu\u1ea5t");
                            lblPhieuXuat.addMouseListener(new MouseAdapter() {
                                @Override
                                public void mouseClicked(MouseEvent e) {
                                    lblPhieuXuatMouseClicked(e);
                                }
                            });
                            pnlPhieuXuat.add(lblPhieuXuat, BorderLayout.CENTER);
                        }
                        pnlLoaiPhieu.add(pnlPhieuXuat);
                    }

                    GroupLayout pnlDanhSachLayout = new GroupLayout(pnlDanhSach);
                    pnlDanhSach.setLayout(pnlDanhSachLayout);
                    pnlDanhSachLayout.setHorizontalGroup(
                        pnlDanhSachLayout.createParallelGroup()
                            .addGroup(GroupLayout.Alignment.TRAILING, pnlDanhSachLayout.createSequentialGroup()
                                .addGroup(pnlDanhSachLayout.createParallelGroup(GroupLayout.Alignment.TRAILING)
                                    .addComponent(lblDanhSachPhieu, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(pnlDanhSachLayout.createSequentialGroup()
                                        .addContainerGap()
                                        .addGroup(pnlDanhSachLayout.createParallelGroup(GroupLayout.Alignment.TRAILING)
                                            .addGroup(pnlDanhSachLayout.createSequentialGroup()
                                                .addComponent(lblTimKiemCT1)
                                                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(txtTimKiemPhieu)
                                                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(lblTimKiemPhieu2)
                                                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(cboTimKiemPhieu, GroupLayout.PREFERRED_SIZE, 252, GroupLayout.PREFERRED_SIZE))
                                            .addComponent(scrollPane2)
                                            .addGroup(pnlDanhSachLayout.createSequentialGroup()
                                                .addComponent(pnlThongKe, GroupLayout.DEFAULT_SIZE, 522, Short.MAX_VALUE)
                                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(pnlChuThich, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)))))
                                .addContainerGap())
                            .addGroup(pnlDanhSachLayout.createSequentialGroup()
                                .addGap(378, 378, 378)
                                .addComponent(pnlLoaiPhieu, GroupLayout.PREFERRED_SIZE, 262, GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    );
                    pnlDanhSachLayout.setVerticalGroup(
                        pnlDanhSachLayout.createParallelGroup()
                            .addGroup(pnlDanhSachLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(lblDanhSachPhieu)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(pnlLoaiPhieu, GroupLayout.PREFERRED_SIZE, 28, GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(pnlDanhSachLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                    .addComponent(lblTimKiemCT1)
                                    .addComponent(txtTimKiemPhieu, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblTimKiemPhieu2)
                                    .addComponent(cboTimKiemPhieu, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(scrollPane2, GroupLayout.DEFAULT_SIZE, 487, Short.MAX_VALUE)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(pnlDanhSachLayout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                                    .addComponent(pnlThongKe, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(pnlChuThich, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addContainerGap())
                    );
                }
                tabs.addTab("Danh s\u00e1ch phi\u1ebfu nh\u1eadp xu\u1ea5t", pnlDanhSach);
            }
            pnlBackground.add(tabs, BorderLayout.CENTER);
        }

        GroupLayout contentPaneLayout = new GroupLayout(contentPane);
        contentPane.setLayout(contentPaneLayout);
        contentPaneLayout.setHorizontalGroup(
            contentPaneLayout.createParallelGroup()
                .addComponent(pnlBackground, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        contentPaneLayout.setVerticalGroup(
            contentPaneLayout.createParallelGroup()
                .addComponent(pnlBackground, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        pack();
        setLocationRelativeTo(getOwner());

        //======== ChiTietPhieuDialog ========
        {
            ChiTietPhieuDialog.setTitle("Chi ti\u1ebft phi\u1ebfu nh\u1eadp xu\u1ea5t kho");
            ChiTietPhieuDialog.setResizable(false);
            var ChiTietPhieuDialogContentPane = ChiTietPhieuDialog.getContentPane();

            //======== pnlBackgroundDialog ========
            {

                //======== pnlTblCTPhieu_main ========
                {
                    pnlTblCTPhieu_main.setBorder(new TitledBorder(null, "Danh s\u00e1ch chi ti\u1ebft phi\u1ebfu", TitledBorder.LEADING, TitledBorder.DEFAULT_POSITION,
                        new Font("Tahoma", Font.BOLD, 13)));
                    pnlTblCTPhieu_main.setOpaque(false);

                    //---- tblCTPhieu_ChiTiet ----
                    tblCTPhieu_ChiTiet.setModel(new DefaultTableModel(
                        new Object[][] {
                        },
                        new String[] {
                            "Title 1", "Title 2", "Title 3", "Title 4"
                        }
                    ) {
                        boolean[] columnEditable = new boolean[] {
                            false, false, false, false
                        };
                        @Override
                        public boolean isCellEditable(int rowIndex, int columnIndex) {
                            return columnEditable[columnIndex];
                        }
                    });
                    tblCTPhieu_ChiTiet.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
                    tblCTPhieu_ChiTiet.addMouseListener(new MouseAdapter() {
                        @Override
                        public void mouseClicked(MouseEvent e) {
                            tblCTPhieu_ChiTietMouseClicked(e);
                        }
                    });
                    tblCTPhieu_ChiTiet.addPropertyChangeListener(e -> tblCTPhieu_ChiTietPropertyChange(e));
                    tblCTPhieu_ChiTiet.addKeyListener(new KeyAdapter() {
                        @Override
                        public void keyReleased(KeyEvent e) {
                            tblCTPhieu_ChiTietKeyReleased(e);
                        }
                    });
                    pnlTblCTPhieu_main.setViewportView(tblCTPhieu_ChiTiet);
                }

                //======== pnlThongTinCTP ========
                {
                    pnlThongTinCTP.setBorder(new TitledBorder(null, "Chi ti\u1ebft phi\u1ebfu", TitledBorder.LEADING, TitledBorder.DEFAULT_POSITION,
                        new Font("Tahoma", Font.BOLD, 13)));
                    pnlThongTinCTP.setToolTipText("StoMan - Chi ti\u1ebft phi\u1ebfu ki\u1ec3m kho");
                    pnlThongTinCTP.setOpaque(false);

                    //---- lblLoaiHH ----
                    lblLoaiHH.setText("Lo\u1ea1i h\u00e0ng ho\u00e1");

                    //---- lblTenHH ----
                    lblTenHH.setText("T\u00ean h\u00e0ng ho\u00e1");

                    //---- cboLoaiHH ----
                    cboLoaiHH.setModel(new DefaultComboBoxModel<>(new String[] {

                    }));
                    cboLoaiHH.addActionListener(e -> cboLoaiHHActionPerformed(e));

                    //---- cboHangHoa ----
                    cboHangHoa.setModel(new DefaultComboBoxModel<>(new String[] {

                    }));

                    GroupLayout pnlThongTinCTPLayout = new GroupLayout(pnlThongTinCTP);
                    pnlThongTinCTP.setLayout(pnlThongTinCTPLayout);
                    pnlThongTinCTPLayout.setHorizontalGroup(
                        pnlThongTinCTPLayout.createParallelGroup()
                            .addGroup(pnlThongTinCTPLayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(pnlThongTinCTPLayout.createParallelGroup()
                                    .addComponent(lblTenHH)
                                    .addComponent(lblLoaiHH))
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(pnlThongTinCTPLayout.createParallelGroup()
                                    .addComponent(cboLoaiHH)
                                    .addComponent(cboHangHoa))
                                .addContainerGap())
                    );
                    pnlThongTinCTPLayout.setVerticalGroup(
                        pnlThongTinCTPLayout.createParallelGroup()
                            .addGroup(pnlThongTinCTPLayout.createSequentialGroup()
                                .addGap(9, 9, 9)
                                .addGroup(pnlThongTinCTPLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                    .addComponent(lblLoaiHH)
                                    .addComponent(cboLoaiHH, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(pnlThongTinCTPLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                    .addComponent(lblTenHH)
                                    .addComponent(cboHangHoa, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                                .addContainerGap(12, Short.MAX_VALUE))
                    );
                }

                //======== pnlChucNangCTP ========
                {
                    pnlChucNangCTP.setBorder(new TitledBorder(null, "Ch\u1ee9c n\u0103ng", TitledBorder.LEADING, TitledBorder.DEFAULT_POSITION,
                        new Font("Tahoma", Font.BOLD, 13)));
                    pnlChucNangCTP.setOpaque(false);
                    pnlChucNangCTP.setLayout(new GridBagLayout());

                    //---- btnThemCTP ----
                    btnThemCTP.setIcon(new ImageIcon(getClass().getResource("/com/stoman/icons/add.png")));
                    btnThemCTP.setText("Th\u00eam");
                    btnThemCTP.setPreferredSize(new Dimension(100, 35));
                    btnThemCTP.addActionListener(e -> btnThemCTPActionPerformed(e));
                    pnlChucNangCTP.add(btnThemCTP, new GridBagConstraints(0, 0, 1, 1, 0.0, 0.0,
                        GridBagConstraints.CENTER, GridBagConstraints.NONE,
                        new Insets(0, 0, 0, 0), 0, 0));

                    //---- btnXoaCTP ----
                    btnXoaCTP.setIcon(new ImageIcon(getClass().getResource("/com/stoman/icons/cancel.png")));
                    btnXoaCTP.setText("Xo\u00e1");
                    btnXoaCTP.setPreferredSize(new Dimension(100, 35));
                    btnXoaCTP.addActionListener(e -> btnXoaCTPActionPerformed(e));
                    pnlChucNangCTP.add(btnXoaCTP, new GridBagConstraints(0, 1, 1, 1, 0.0, 0.0,
                        GridBagConstraints.CENTER, GridBagConstraints.NONE,
                        new Insets(0, 0, 0, 0), 0, 0));
                }

                GroupLayout pnlBackgroundDialogLayout = new GroupLayout(pnlBackgroundDialog);
                pnlBackgroundDialog.setLayout(pnlBackgroundDialogLayout);
                pnlBackgroundDialogLayout.setHorizontalGroup(
                    pnlBackgroundDialogLayout.createParallelGroup()
                        .addGroup(pnlBackgroundDialogLayout.createSequentialGroup()
                            .addContainerGap()
                            .addGroup(pnlBackgroundDialogLayout.createParallelGroup()
                                .addGroup(pnlBackgroundDialogLayout.createSequentialGroup()
                                    .addComponent(pnlThongTinCTP, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(pnlChucNangCTP, GroupLayout.PREFERRED_SIZE, 139, GroupLayout.PREFERRED_SIZE))
                                .addComponent(pnlTblCTPhieu_main, GroupLayout.DEFAULT_SIZE, 697, Short.MAX_VALUE))
                            .addContainerGap())
                );
                pnlBackgroundDialogLayout.setVerticalGroup(
                    pnlBackgroundDialogLayout.createParallelGroup()
                        .addGroup(pnlBackgroundDialogLayout.createSequentialGroup()
                            .addContainerGap()
                            .addGroup(pnlBackgroundDialogLayout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                                .addComponent(pnlThongTinCTP, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(pnlChucNangCTP, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(pnlTblCTPhieu_main, GroupLayout.DEFAULT_SIZE, 295, Short.MAX_VALUE)
                            .addContainerGap())
                );
            }

            GroupLayout ChiTietPhieuDialogContentPaneLayout = new GroupLayout(ChiTietPhieuDialogContentPane);
            ChiTietPhieuDialogContentPane.setLayout(ChiTietPhieuDialogContentPaneLayout);
            ChiTietPhieuDialogContentPaneLayout.setHorizontalGroup(
                ChiTietPhieuDialogContentPaneLayout.createParallelGroup()
                    .addComponent(pnlBackgroundDialog, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            );
            ChiTietPhieuDialogContentPaneLayout.setVerticalGroup(
                ChiTietPhieuDialogContentPaneLayout.createParallelGroup()
                    .addComponent(pnlBackgroundDialog, GroupLayout.Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            );
        }

        //======== QRCodeDialog ========
        {
            QRCodeDialog.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
            QRCodeDialog.setTitle("Xu\u1ea5t m\u00e3 phi\u1ebfu QR Code");
            QRCodeDialog.setResizable(false);
            var QRCodeDialogContentPane = QRCodeDialog.getContentPane();
            QRCodeDialogContentPane.setLayout(new BorderLayout());

            //======== pnlBackgroundQR ========
            {
                pnlBackgroundQR.setPreferredSize(new Dimension(300, 300));
                pnlBackgroundQR.setLayout(new GridBagLayout());

                //---- lblQRCodeImage ----
                lblQRCodeImage.setBorder(new LineBorder(new Color(0x999999), 2));
                lblQRCodeImage.setPreferredSize(new Dimension(200, 200));
                pnlBackgroundQR.add(lblQRCodeImage, new GridBagConstraints(0, 0, 1, 1, 0.0, 0.0,
                    GridBagConstraints.CENTER, GridBagConstraints.NONE,
                    new Insets(0, 0, 0, 0), 0, 0));
            }
            QRCodeDialogContentPane.add(pnlBackgroundQR, BorderLayout.CENTER);
        }

        //---- btnGrpLoaiPhieu ----
        btnGrpLoaiPhieu.add(rdoPhieuXuat);
        btnGrpLoaiPhieu.add(rdoPhieuNhap);
    }// </editor-fold>//GEN-END:initComponents

    private void tblPhieuMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblPhieuMouseClicked
        // TODO add your handling code here:
        if (evt.getClickCount() < 2) {
            return;
        }
        //this.rowPhieu = ((Integer) tblPhieu.getValueAt(tblPhieu.getSelectedRow(), 0)) - 1;
        this.rowPhieu = tblPhieu.getSelectedRow();
        if (tblPhieu.getValueAt(rowPhieu, tblPhieu.getSelectedColumn()) == null) {
            return;
        }
        edit();
    }//GEN-LAST:event_tblPhieuMouseClicked

    private void btnThemCTPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnThemCTPActionPerformed
        this.insertCT();
    }//GEN-LAST:event_btnThemCTPActionPerformed

    private void cboLoaiHHActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboLoaiHHActionPerformed
        this.fillToComboBoxHangHoa();
    }//GEN-LAST:event_cboLoaiHHActionPerformed

    private void btnXoaCTPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnXoaCTPActionPerformed
        this.deleteCT();
    }//GEN-LAST:event_btnXoaCTPActionPerformed

    private void txtTimKiemPhieuKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtTimKiemPhieuKeyReleased
        // TODO add your handling code here:
        searchPhieu();
    }//GEN-LAST:event_txtTimKiemPhieuKeyReleased

    private void cboTimKiemPhieuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboTimKiemPhieuActionPerformed
        // TODO add your handling code here:
        txtTimKiemPhieu.setText("");
        searchPhieu();
    }//GEN-LAST:event_cboTimKiemPhieuActionPerformed

    private void tblCTPhieu_ChiTietPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_tblCTPhieu_ChiTietPropertyChange
        // TODO add your handling code here:
        int row = tblCTPhieu_ChiTiet.getSelectedRow();
        this.updateThanhTienCTPhieu(tblCTPhieu_ChiTiet, row);
    }//GEN-LAST:event_tblCTPhieu_ChiTietPropertyChange

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        // TODO add your handling code here:
        this.timer.stop();
    }//GEN-LAST:event_formWindowClosed

    private void btnInPhieuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInPhieuActionPerformed
        // TODO add your handling code here:
        printReport();
    }//GEN-LAST:event_btnInPhieuActionPerformed

    private void btnXuatFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnXuatFileActionPerformed
        // TODO add your handling code here:
        exportReport();
    }//GEN-LAST:event_btnXuatFileActionPerformed

    private void cboTimKiemCTPhieuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboTimKiemCTPhieuActionPerformed
        // TODO add your handling code here:
        txtTimKiemCTPhieu.setText("");
        searchCTPhieu();
    }//GEN-LAST:event_cboTimKiemCTPhieuActionPerformed

    private void txtTimKiemCTPhieuKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtTimKiemCTPhieuKeyReleased
        // TODO add your handling code here:
        searchCTPhieu();
    }//GEN-LAST:event_txtTimKiemCTPhieuKeyReleased

    private void btnXuatMaPhieuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnXuatMaPhieuActionPerformed
        // TODO add your handling code here:
        createQRCode();
    }//GEN-LAST:event_btnXuatMaPhieuActionPerformed

    private void btnChiTietActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChiTietActionPerformed
        // TODO add your handling code here:
        ChiTietPhieuDialog.setVisible(true);
    }//GEN-LAST:event_btnChiTietActionPerformed

    private void btnMoiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMoiActionPerformed
        // TODO add your handling code here:
        isInsert = true;
        if (btnMoi.getText().equals("Phiếu mới")) {
            this.clearForm();
            ChiTietPhieuDialog.setVisible(true);
            return;
        }
        if (btnMoi.getText().equals("Thêm phiếu")) {
            this.insertPhieu();
            btnMoi.setText("Phiếu mới");
            btnMoi.setIcon(new ImageIcon(getClass().getResource("/com/stoman/icons/icons8_document_32px.png")));
            btnChiTiet.setEnabled(false);
            isInsert = false;
        }

    }//GEN-LAST:event_btnMoiActionPerformed

    private void btnSuaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSuaActionPerformed
        // TODO add your handling code here:
        this.updatePhieu();
    }//GEN-LAST:event_btnSuaActionPerformed

    private void btnXoaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnXoaActionPerformed
        // TODO add your handling code here:
        this.deletePhieu();
    }//GEN-LAST:event_btnXoaActionPerformed

    private void btnLastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLastActionPerformed
        // TODO add your handling code here:
        last();
    }//GEN-LAST:event_btnLastActionPerformed

    private void btnNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNextActionPerformed
        // TODO add your handling code here:
        next();
    }//GEN-LAST:event_btnNextActionPerformed

    private void btnPrevActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrevActionPerformed
        // TODO add your handling code here:
        prev();
    }//GEN-LAST:event_btnPrevActionPerformed

    private void btnFirstActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFirstActionPerformed
        // TODO add your handling code here:
        first();
    }//GEN-LAST:event_btnFirstActionPerformed

    private void cboKhoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboKhoActionPerformed
        // TODO add your handling code here:
        cboKho.setEnabled(!isUpdate);
        updateCT();
    }//GEN-LAST:event_cboKhoActionPerformed

    private void chkChuyenHangMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_chkChuyenHangMouseClicked
        // TODO add your handling code here:
        this.updateStatus();
    }//GEN-LAST:event_chkChuyenHangMouseClicked

    private void cboLoaiDTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboLoaiDTActionPerformed
        // TODO add your handling code here:
        fillToComboBoxDoiTac();
    }//GEN-LAST:event_cboLoaiDTActionPerformed

    private void rdoPhieuNhapStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_rdoPhieuNhapStateChanged
        // TODO add your handling code here:
        this.fillToTableCTPhieu();
        this.fillToComboBoxHangHoa();
        this.updateUIPhieu();
    }//GEN-LAST:event_rdoPhieuNhapStateChanged

    private void chkThanhToanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkThanhToanActionPerformed
        if (chkThanhToan.isSelected()) {
            txtDaThanhToan.setToolTipText(txtDaThanhToan.getText());
            txtDaThanhToan.setText(lblTongTien.getText());
        } else {
            txtDaThanhToan.setText(txtDaThanhToan.getToolTipText());
        }

        txtDaThanhToan.setFocusable(!chkThanhToan.isSelected());
    }//GEN-LAST:event_chkThanhToanActionPerformed

    private void lblPhieuNhapMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblPhieuNhapMouseClicked
        // TODO add your handling code here:
        this.isPhieuNhap = true;
        updateStatusChonLoaiPhieu();
        fillToTablePhieu();
    }//GEN-LAST:event_lblPhieuNhapMouseClicked

    private void lblPhieuXuatMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblPhieuXuatMouseClicked
        // TODO add your handling code here:
        this.isPhieuNhap = false;
        updateStatusChonLoaiPhieu();
        fillToTablePhieu();
    }//GEN-LAST:event_lblPhieuXuatMouseClicked

    private void tblCTPhieu_ChiTietKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tblCTPhieu_ChiTietKeyReleased
        // TODO add your handling code here:
        disableEnterCellNextLine(tblCTPhieu_ChiTiet);
    }//GEN-LAST:event_tblCTPhieu_ChiTietKeyReleased

    private void tblCTPhieuKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tblCTPhieuKeyReleased
        // TODO add your handling code here:
        disableEnterCellNextLine(tblCTPhieu);
    }//GEN-LAST:event_tblCTPhieuKeyReleased

    private void tblCTPhieuPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_tblCTPhieuPropertyChange
        // TODO add your handling code here:
        int row = tblCTPhieu.getSelectedRow();
        this.updateThanhTienCTPhieu(tblCTPhieu, row);
    }//GEN-LAST:event_tblCTPhieuPropertyChange

    private void tblCTPhieuMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblCTPhieuMouseClicked
        // TODO add your handling code here:
        mapSelectionTable(tblCTPhieu, tblCTPhieu_ChiTiet);
    }//GEN-LAST:event_tblCTPhieuMouseClicked

    private void tblCTPhieu_ChiTietMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblCTPhieu_ChiTietMouseClicked
        // TODO add your handling code here:
        mapSelectionTable(tblCTPhieu_ChiTiet, tblCTPhieu);
    }//GEN-LAST:event_tblCTPhieu_ChiTietMouseClicked

    private void btnHoanTacActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHoanTacActionPerformed
        // TODO add your handling code here:
        fillToTableCTPhieu();
        updateBtnMoi();
    }//GEN-LAST:event_btnHoanTacActionPerformed

    private void txtGhiChuFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtGhiChuFocusGained
        // TODO add your handling code here:
        txtGhiChu.selectAll();
    }//GEN-LAST:event_txtGhiChuFocusGained

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            javax.swing.UIManager.setLookAndFeel(new FlatIntelliJLaf());
        } catch (UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PhieuNhapXuatKhoJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>


        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                PhieuNhapXuatKhoJDialog dialog = new PhieuNhapXuatKhoJDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JPanel pnlBackground;
    private JTabbedPane tabs;
    private JPanel pnlChiTiet;
    private JSeparator peparator;
    private JLabel lblTimKiemCT;
    private JLabel lblTimKiemCT2;
    private JTextField txtTimKiemCTPhieu;
    private JComboBox<String> cboTimKiemCTPhieu;
    private JScrollPane pnlTblCTPhieu_sub;
    private JTable tblCTPhieu;
    private JPanel pnlNutDieuHuong;
    private JButton btnFirst;
    private JButton btnPrev;
    private JButton btnNext;
    private JButton btnLast;
    private JPanel pnlChucNang;
    private JButton btnMoi;
    private JButton btnXoa;
    private JButton btnSua;
    private JButton btnChiTiet;
    private JButton btnXuatMaPhieu;
    private JButton btnHoanTac;
    private JPanel pnlChucNangMoRong;
    private JButton btnXuatFile;
    private JButton btnInPhieu;
    private JLabel lblCTP;
    private JLabel lblChucNang;
    private JLabel lblThongTinPhieu;
    private JPanel pnlThongTinKhac;
    private JSeparator jSeparator3;
    private JSeparator jSeparator4;
    private JFormattedTextField txtDaThanhToan;
    private JLabel lblTongTien;
    private JCheckBox chkThanhToan;
    private JLabel lblDaThanhToan;
    private JCheckBox chkChuyenHang;
    private JLabel lblTongTienTitle;
    private JLabel lblTrangThai;
    private JSeparator jSeparator2;
    private JPanel pnlThongTin;
    private JLabel lblDoiTac;
    private JDateChooser txtNgayHoanThanh;
    private JLabel lblMaNV;
    private JDateChooser txtNgayThucHien;
    private JLabel lblLoaiDT;
    private JLabel lblLoaiPhieu;
    private JLabel lblGhiChu;
    private JLabel lblNgayHoanThanh;
    private JRadioButton rdoPhieuXuat;
    private JLabel lblNgayHoanThanh1;
    private JLabel lblNgayThucHien;
    private JComboBox<String> cboKho;
    private JComboBox<String> cboLoaiDT;
    private JLabel lblNgayLap;
    private JFormattedTextField txtNgayLap;
    private JRadioButton rdoPhieuNhap;
    private JScrollPane pnlGhiChu;
    private JTextArea txtGhiChu;
    private JComboBox<String> cboDoiTac;
    private JTextField txtMaNV;
    private JPanel pnlDanhSach;
    private JScrollPane scrollPane2;
    private JTable tblPhieu;
    private JLabel lblTimKiemCT1;
    private JTextField txtTimKiemPhieu;
    private JLabel lblTimKiemPhieu2;
    private JComboBox<String> cboTimKiemPhieu;
    private JLabel lblDanhSachPhieu;
    private JPanel pnlChuThich;
    private JLabel lblMau2;
    private JTextField txtMau3;
    private JLabel lblMau4;
    private JTextField txtMau4;
    private JLabel lblMau1;
    private JTextField txtMau1;
    private JTextField txtMau2;
    private JLabel lblMau3;
    private JPanel pnlThongKe;
    private JPanel pnlHoanThanh;
    private JLabel lblHoanThanh;
    private JLabel lblSoLuongHoanThanh;
    private JPanel pnlChuaThanhToan;
    private JLabel lblThanhToan;
    private JLabel lblSoLuongThanhToan;
    private JPanel pnlChuaChuyenHang;
    private JLabel lblChuyenHang;
    private JLabel lblSoLuongChuyenHang;
    private JSeparator jSeparator5;
    private JPanel pnlTongPhieu;
    private JLabel lblTongPhieu;
    private JLabel lblSoLuongPhieu;
    private JPanel pnlLoaiPhieu;
    private JPanel pnlPhieuNhap;
    private JLabel lblPhieuNhap;
    private JPanel pnlPhieuXuat;
    private JLabel lblPhieuXuat;
    private JDialog ChiTietPhieuDialog;
    private JPanel pnlBackgroundDialog;
    private JScrollPane pnlTblCTPhieu_main;
    private JTable tblCTPhieu_ChiTiet;
    private JPanel pnlThongTinCTP;
    private JLabel lblLoaiHH;
    private JLabel lblTenHH;
    private JComboBox<String> cboLoaiHH;
    private JComboBox<String> cboHangHoa;
    private JPanel pnlChucNangCTP;
    private JButton btnThemCTP;
    private JButton btnXoaCTP;
    private JDialog QRCodeDialog;
    private JPanel pnlBackgroundQR;
    private JLabel lblQRCodeImage;
    private ButtonGroup btnGrpLoaiPhieu;
    // End of variables declaration//GEN-END:variables

    private PhieuDAO pDAO = new PhieuDAO();
    private ChiTietPhieuDAO ctpDAO = new ChiTietPhieuDAO();
    private LoaiDoiTacDAO ldtDAO = new LoaiDoiTacDAO();
    private DoiTacDAO dtDAO = new DoiTacDAO();
    private LuuTruDAO ltDAO = new LuuTruDAO();
    private LoaiHangHoaDAO lhhDAO = new LoaiHangHoaDAO();
    private HangHoaDAO hhDAO = new HangHoaDAO();
    private KhoDAO kDAO = new KhoDAO();
    private NhanVienDAO nvDAO = new NhanVienDAO();
    private ProcedureDAO spDAO = new ProcedureDAO();

    private DefaultTableModel modelPhieu;
    private DefaultTableModel modelCTPhieu;

    private TableRowSorter<TableModel> sorterPhieu;
    private TableRowSorter<TableModel> sorterCTPhieu;
    private TableRowSorter<TableModel> sorterCTPhieu_ChiTiet;

    private final String numFormat = "#,##0.0";
    private final String dateFormat = "dd-MM-yyyy";
    private final String dateTimeFormat = "dd-MM-yyyy HH:mm:ss";
    private final String reportPath = "/com/stoman/reports/InPhieuNhapXuatKho.jrxml";

    private boolean isUpdate = false;
    private boolean isInsert = false;

    private int rowPhieu = -1;

    private void init() {
        this.setLocationRelativeTo(null);
        this.setModal(false);
        this.initDialogOther();
        
        this.formatTable();
        this.updateStatus();
        this.updateStatusChonLoaiPhieu();

        this.refreshForm();

        this.fillToComboBoxTimKiemCTPhieu();
        this.fillToComboBoxTimKiemPhieu();
        tabs.setSelectedIndex(1);

        this.timer.start();
    }

    void initDialogOther() {
        ChiTietPhieuDialog.pack();
        ChiTietPhieuDialog.setLocationRelativeTo(null);
        ChiTietPhieuDialog.setModalityType(ModalityType.APPLICATION_MODAL);
        ChiTietPhieuDialog.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);

        ChiTietPhieuDialog.addWindowListener(new java.awt.event.WindowAdapter() {
            @Override
            public void windowClosing(java.awt.event.WindowEvent e) {
                updateBtnMoi();
            }
        });

        QRCodeDialog.pack();
        QRCodeDialog.setLocationRelativeTo(null);
        QRCodeDialog.setModalityType(ModalityType.APPLICATION_MODAL);
        QRCodeDialog.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
    }

    private boolean isPhieuNhap = true;

    private void updateStatusChonLoaiPhieu() {
        if (isPhieuNhap) {
            pnlPhieuXuat.setBackground(new Color(242, 242, 242));
            pnlPhieuNhap.setBackground(new Color(179, 217, 255));
        } else {
            pnlPhieuNhap.setBackground(new Color(242, 242, 242));
            pnlPhieuXuat.setBackground(new Color(179, 217, 255));
        }
    }
    
    private void updateBtnMoi() {
        if (isInsert == true) {
            if (modelCTPhieu.getRowCount() == 0) {
                btnMoi.setText("Phiếu mới");
                btnMoi.setIcon(new ImageIcon(getClass().getResource("/com/stoman/icons/icons8_document_32px.png")));
                btnChiTiet.setEnabled(false);
            } else {
                btnMoi.setText("Thêm phiếu");
                btnMoi.setIcon(new ImageIcon(getClass().getResource("/com/stoman/icons/icons8_new_copy_32px.png")));
                btnChiTiet.setEnabled(true);
            }
        }
    }

    // Đổ dữ liệu phiếu nhập xuất
    private SwingWorker workerPhieu;

    private void fillToTablePhieu() {
        if (workerPhieu != null) {
            workerPhieu.cancel(true);
        }

        modelPhieu.setRowCount(0);

        try {
            List<Phieu> list = pDAO.selectByLoaiPhieu(isPhieuNhap);

            workerPhieu = new SwingWorker() {
                @Override
                protected Object doInBackground() throws Exception {
                    Thread.sleep(100);
                    int i = 1;
                    int hoanThanh = 0;
                    int cThanhToan = 0;
                    int cVanChuyen = 0;
                    int tongPhieu = 0;

                    for (Phieu p : list) {
                        if (isCancelled()) {
                            modelPhieu.setRowCount(0);
                            break;
                        }
                        int maLT = ctpDAO.getOnlyOneMaLT(p.getMaPhieu());
                        if (maLT == 0) {
                            continue;
                        }
                        int maKho = ltDAO.getMaKho(maLT);
                        Kho k = kDAO.selectByID(maKho);
                        if (p.isTrangThai()) {
                            if (p.isTinhTrangThanhToan()) {
                                hoanThanh++;
                            } else {
                                cThanhToan++;
                            }
                        } else {
                            cVanChuyen++;
                            if (!p.isTinhTrangThanhToan()) {
                                cThanhToan++;
                            }
                        }
                        tongPhieu++;

                        modelPhieu.addRow(new Object[]{
                            i++,
                            dtDAO.getTenDT(p.getMaDT()),
                            p.isLoai() ? "Nhập" : "Xuất",
                            k.getMaKho(),
                            p.isTrangThai() ? "Đã hoàn thành" : "Chưa hoàn thành",
                            p.isTinhTrangThanhToan() ? "Đã xong" : "Chưa xong",
                            XDate.toString(p.getNgThucHien(), dateFormat),
                            XDate.toString(p.getNgHoanThanh(), dateFormat),
                            XDate.toString(p.getNgayLap(), dateTimeFormat),
                            p
                        });

                        lblSoLuongPhieu.setText(String.valueOf(tongPhieu));
                        lblSoLuongHoanThanh.setText(String.valueOf(hoanThanh));
                        lblSoLuongThanhToan.setText(String.valueOf(cThanhToan));
                        lblSoLuongChuyenHang.setText(String.valueOf(cVanChuyen));
                    }
                    return null;
                }

                @Override
                protected void done() {
                    if (rowPhieu > 0) {
                        tblPhieu.setRowSelectionInterval(rowPhieu, rowPhieu);
                    }
                }

            };
            workerPhieu.execute();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // Đổ dữ liệu chi tiết phiếu
    private SwingWorker workerCTPhieu;

    private void fillToTableCTPhieu() {
        if (workerCTPhieu != null) {
            workerCTPhieu.cancel(true);
        }

        listCT.clear();
        modelCTPhieu.setRowCount(0);

        Kho k = (Kho) cboKho.getSelectedItem();
        try {
            String maPhieu = tblCTPhieu.getToolTipText();
            if (maPhieu == null) {
                return;
            }
            List<ChiTietPhieu> list = ctpDAO.selectByMaPhieuTest(Integer.parseInt(maPhieu));
            if (list.size() < 1) {
                return;
            }
            workerCTPhieu = new SwingWorker() {
                @Override
                protected Object doInBackground() throws Exception {
                    Thread.sleep(100);
                    int i = 1;
                    double tongTien = 0;
                    double ton = 0;
                    for (ChiTietPhieu ctp : list) {
                        if (isCancelled()) {
                            break;
                        }
                        String maHH = ltDAO.selectByID(ctp.getMaLT()).getMaHH();
                        HangHoa hh = hhDAO.selectByID(maHH);
                        tongTien += ctp.getSoLuong() * ctp.getDonGia();
                        ton = ltDAO.getSoLuong(k.getMaKho(), hh.getMaHH());
                        if (rdoPhieuXuat.isSelected() && ctp.isTrangThai()) {
                            ton += ctp.getSoLuong();
                        }

                        modelCTPhieu.addRow(new Object[]{
                            i++,
                            hh,
                            ctp.getSoLuong(),
                            XNumber.toString(ctp.getDonGia(), numFormat),
                            ctp.getMaCTP(),
                            XNumber.toString(ctp.getThanhTien(), numFormat),
                            ctp.isTrangThai(),
                            ton,
                            ltDAO.getMaLT(k.getMaKho(), hh.getMaHH())
                        });

                        listCT.add(hh);
                    }
                    tblCTPhieu.setModel(modelCTPhieu);
                    tblCTPhieu_ChiTiet.setModel(modelCTPhieu);
                    lblTongTien.setText(XNumber.toString(tongTien, numFormat));
                    if (isCancelled()) {
                        modelCTPhieu.setRowCount(0);
                    }
                    return null;
                }
            };
            workerCTPhieu.execute();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // Đổ dữ liệu ComboBox loại đối tác
    private void fillToComboBoxLoaiDT() {
        DefaultComboBoxModel model = new DefaultComboBoxModel();
        model.removeAllElements();
        try {
            boolean vaiTro = !rdoPhieuNhap.isSelected();
            List<LoaiDoiTac> list = ldtDAO.selectLDTonVaiTro(vaiTro);
            for (LoaiDoiTac ldt : list) {
                model.addElement(ldt);
            }
            cboLoaiDT.setModel(model);
            fillToComboBoxDoiTac();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // Đổ dữ liệu ComboBox đối tác
    private void fillToComboBoxDoiTac() {
        DefaultComboBoxModel model = new DefaultComboBoxModel();
        model.removeAllElements();
        try {
            LoaiDoiTac ldt = (LoaiDoiTac) cboLoaiDT.getSelectedItem();
            boolean vaiTro = !rdoPhieuNhap.isSelected();
            List<DoiTac> list = dtDAO.selectByLoaiDTandVaiTro(ldt.getMaLDT(), vaiTro);
            list.forEach(dt -> {
                model.addElement(dt);
            });
            cboDoiTac.setModel(model);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // Đổ dữ liệu vào ComboBox kho
    private void fillToComboBoxKho() {
        DefaultComboBoxModel model = new DefaultComboBoxModel();
        model.removeAllElements();
        try {
            List<Kho> list = kDAO.selectAll();
            for (Kho k : list) {
                model.addElement(k);
            }
            cboKho.setModel(model);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // Đổ dữ liệu ComboBox loại hàng hoá
    private void fillToComboBoxLoaiHH() {
        DefaultComboBoxModel model = new DefaultComboBoxModel();
        model.removeAllElements();
        try {
            List<LoaiHangHoa> list = lhhDAO.selectAll();
            for (LoaiHangHoa lhh : list) {
                model.addElement(lhh);
            }
            cboLoaiHH.setModel(model);
            fillToComboBoxHangHoa();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // Đổ dữ liệu ComboBox hàng hoá
    private void fillToComboBoxHangHoa() {
        DefaultComboBoxModel model = new DefaultComboBoxModel();
        model.removeAllElements();
        if (rdoPhieuNhap.isSelected()) {

        }
        try {
            LoaiHangHoa lhh = (LoaiHangHoa) cboLoaiHH.getSelectedItem();
            List<HangHoa> list;

            if (rdoPhieuNhap.isSelected()) {
                list = hhDAO.selectByLoaiHangHoa(lhh.getMaLHH());
            } else {
                list = hhDAO.selectByLoaiHangHoaCoLT(lhh.getMaLHH(), ((Kho) cboKho.getSelectedItem()).getMaKho());
            }

            for (HangHoa hh : list) {
                model.addElement(hh);
            }
            cboHangHoa.setModel(model);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // Lấy dữ liệu từ form phiếu nhập
    private Phieu getFormPhieu() {
        LoaiDoiTac ldt = (LoaiDoiTac) cboLoaiDT.getSelectedItem();
        Phieu p = new Phieu();
        p.setLoai(rdoPhieuNhap.isSelected());
        p.setMaDT(ldt.getMaLDT());
        p.setMaNV(txtMaNV.getToolTipText());
        if (!chkChuyenHang.isSelected()) {
            p.setNgHoanThanh(null);
        } else {
            p.setNgHoanThanh(txtNgayHoanThanh.getDate());
        }
        p.setNgThucHien(txtNgayThucHien.getDate());
        p.setNgayLap(XDate.toDate(txtNgayLap.getText(), dateTimeFormat));
        p.setTrangThai(chkChuyenHang.isSelected());
        p.setTinhTrangThanhToan(chkThanhToan.isSelected());
        p.setSoTienThanhToan(XNumber.toDouble(txtDaThanhToan.getText(), numFormat));
        p.setGhiChu(txtGhiChu.getText());
        return p;
    }

    // Nhập dữ liệu vào form phiếu nhập
    private void setFormPhieu(Phieu p) {
        int rowPhieuModel = tblPhieu.convertRowIndexToModel(this.rowPhieu);
        DoiTac dt = dtDAO.selectByID(p.getMaDT());
        LoaiDoiTac ldt = ldtDAO.selectByID(dt.getMaLDT());
        NhanVien nv = nvDAO.selectByID(p.getMaNV());
        Kho kho = kDAO.selectByID((Integer) tblPhieu.getModel().getValueAt(rowPhieuModel, 3));
        cboLoaiDT.setSelectedItem(ldt);
        cboDoiTac.setSelectedItem(dt);
        txtMaNV.setToolTipText(p.getMaNV());
        txtMaNV.setText(nv.getTenNV());
        txtNgayLap.setText(XDate.toString(p.getNgayLap(), dateTimeFormat));
        txtNgayThucHien.setDate(p.getNgThucHien());
        txtNgayHoanThanh.setDate(p.getNgHoanThanh());
        cboKho.setSelectedItem(kho);

        txtDaThanhToan.setText(XNumber.toString(p.getSoTienThanhToan(), numFormat));

        if (p.isLoai()) {
            rdoPhieuNhap.setSelected(true);
        } else {
            rdoPhieuXuat.setSelected(true);
        }
        chkThanhToan.setSelected(p.isTinhTrangThanhToan());
        chkChuyenHang.setSelected(p.isTrangThai());
        txtGhiChu.setText(p.getGhiChu());
        tblCTPhieu.setToolTipText(p.getMaPhieu().toString());

        this.fillToTableCTPhieu();
    }

    // Lấy dữ liệu từ form chi tiết phiếu
    private ChiTietPhieu getFormCTPhieu(int row) {
        ChiTietPhieu ctp = new ChiTietPhieu();
        ctp.setDonGia(XNumber.toDouble((String) modelCTPhieu.getValueAt(row, 3), numFormat));
        ctp.setSoLuong((Double) modelCTPhieu.getValueAt(row, 2));
        ctp.setMaCTP((Integer) modelCTPhieu.getValueAt(row, 4));
        ctp.setMaLT((Integer) modelCTPhieu.getValueAt(row, 8));
        return ctp;
    }

    // Thêm hàng hóa vào bảng Chi tiết
    ArrayList listCT = new ArrayList();

    private void insertCT() {
        HangHoa hh = (HangHoa) cboHangHoa.getSelectedItem();
        Kho k = (Kho) cboKho.getSelectedItem();

        if (cboHangHoa.getItemCount() == 0) {
            return;
        }

        if (listCT.contains(hh)) {
            MsgBox.alert(ChiTietPhieuDialog, "Hàng hoá này đã tồn tại trong danh sách!");
            for (int i = 0; i < tblCTPhieu_ChiTiet.getRowCount(); i++) {
                HangHoa hangHoa = (HangHoa) tblCTPhieu_ChiTiet.getValueAt(i, 1);
                if (hangHoa.getMaHH().equals(hh.getMaHH())) {
                    tblCTPhieu_ChiTiet.setRowSelectionInterval(i, i);
                    break;
                }
            }
            return;
        }

        modelCTPhieu.addRow(new Object[]{
            tblCTPhieu_ChiTiet.getRowCount() + 1,
            hh,
            0.0,
            XNumber.toString(hh.getDonGia(), numFormat),
            0,
            XNumber.toString(0.0, numFormat),
            false,
            ltDAO.getSoLuong(k.getMaKho(), hh.getMaHH()),
            ltDAO.getMaLT(k.getMaKho(), hh.getMaHH())
        });
        listCT.add(hh);
    }

    //thay đổi kho 
    private void updateCT() {
        Kho k = (Kho) cboKho.getSelectedItem();
        HangHoa hh;
        for (int i = 0; i < tblCTPhieu.getRowCount(); i++) {
            hh = (HangHoa) modelCTPhieu.getValueAt(i, 1);
            modelCTPhieu.setValueAt(ltDAO.getSoLuong(k.getMaKho(), hh.getMaHH()), i, 7);
        }
    }

    // Xóa hàng hóa khỏi chi tiết
    private ArrayList<ChiTietPhieu> delCTP = new ArrayList<>();

    private void deleteCT() {
        int delRow = tblCTPhieu_ChiTiet.getSelectedRow();

        if (delRow < 0) {
            MsgBox.alert(ChiTietPhieuDialog, "Chọn một hàng hoá cần xoá!");
            return;
        }

        int maCTP = (int) modelCTPhieu.getValueAt(delRow, 4);

        listCT.remove((HangHoa) modelCTPhieu.getValueAt(delRow, 1));

        if (isUpdate) {
            delCTP.add(ctpDAO.selectByID(maCTP));
        }
        modelCTPhieu.removeRow(delRow);

        for (int i = 0; i < modelCTPhieu.getRowCount(); i++) {
            modelCTPhieu.setValueAt(i + 1, i, 0);
        }
    }

    // nhap luu tru
    private void insertLuuTru(int row) {
        ChiTietPhieu ctp;

        if (rdoPhieuNhap.isSelected()) {
            ctp = getFormCTPhieu(row);

            spDAO.insertNhapTest(ctp.getMaCTP());
        } else {
            ctp = getFormCTPhieu(row);

            spDAO.insertXuatTest(ctp.getMaCTP());
        }
    }

    // xoa luu tru
    private void deleteLuuTru(int row) {
        ChiTietPhieu ctp;

        if (rdoPhieuNhap.isSelected()) {
            ctp = getFormCTPhieu(row);

            spDAO.deleteNhapTest(ctp.getMaCTP());
        } else {
            ctp = getFormCTPhieu(row);

            spDAO.deleteXuatTest(ctp.getMaCTP());
        }
    }

    // Nhập phiếu mới vào hệ thống và cập nhật thông tin hàng hóa
    private void insertPhieu() {
        if (!isValidated()) {
            return;
        }

        int rows = modelCTPhieu.getRowCount();
        btnChiTiet.setEnabled(true);

        Phieu phieu = this.getFormPhieu();
        ChiTietPhieu ctp;
        pDAO.insert(phieu);

        int maPhieu = pDAO.getMaPhieuByNVandCreatedDate(txtMaNV.getToolTipText(), XDate.toDate(txtNgayLap.getText(), dateTimeFormat));
        int maKho = ((Kho) cboKho.getSelectedItem()).getMaKho();
        int maLT;

        LuuTru lt = new LuuTru();
        lt.setSoLuong(0.0);
        lt.setMaKho(maKho);

        for (int i = 0; i < rows; i++) {
            ctp = getFormCTPhieu(i);
            HangHoa hh = (HangHoa) modelCTPhieu.getValueAt(i, 1);
            maLT = ctp.getMaLT();
            if (maLT == 0) {
                lt.setMaHH(hh.getMaHH());
                ltDAO.insert(lt);
                ctp.setMaLT(ltDAO.getMaLT(maKho, hh.getMaHH()));
            }
            ctp.setMaPhieu(Integer.valueOf(maPhieu));
            ctpDAO.insert(ctp);
            insertLuuTru(i);
        }

        this.fillToTableCTPhieu();

        if (chkChuyenHang.isSelected()) {
            for (int i = 0; i < rows; i++) {
                insertLuuTru(i);
            }
        }

        this.fillToTablePhieu();

        MsgBox.alert(this, "Thêm phiếu " + (phieu.isLoai() ? "nhập" : "xuất") + " thành công!");
    }

    // Cập nhật phiếu vào hệ thống và cập nhật thông tin hàng hóa
    private void updatePhieu() {
        if (!isValidated()) {
            return;
        }
        Phieu phieu = this.getFormPhieu();
        String maPhieu = tblCTPhieu.getToolTipText();
        System.out.println(maPhieu);

        if (maPhieu == null) {
            return;
        }

        phieu.setMaPhieu(Integer.valueOf(maPhieu));
        pDAO.update(phieu);

        if (phieu.isLoai()) {
            for (ChiTietPhieu ctpDel : delCTP) {
                spDAO.deleteNhapTest(ctpDel.getMaCTP());
                ctpDAO.delete(ctpDel.getMaCTP());
            }
        } else {
            for (ChiTietPhieu ctpDel : delCTP) {
                spDAO.deleteXuatTest(ctpDel.getMaCTP());
                ctpDAO.delete(ctpDel.getMaCTP());
            }
        }
        delCTP.clear();

        ChiTietPhieu ctp;
        int rows = modelCTPhieu.getRowCount();
        int maKho = ((Kho) cboKho.getSelectedItem()).getMaKho();
        LuuTru lt = new LuuTru();
        lt.setSoLuong(0.0);
        lt.setMaKho(maKho);

        if (chkChuyenHang.isSelected()) {
            for (int i = 0; i < rows; i++) {
                ctp = getFormCTPhieu(i);
                ctp.setMaPhieu(phieu.getMaPhieu());
                if (ctp.getMaCTP() != 0) {
                    deleteLuuTru(i);
                    ctpDAO.update(ctp);
                    insertLuuTru(i);
                } else {
                    ctp = getFormCTPhieu(i);
                    HangHoa hh = (HangHoa) modelCTPhieu.getValueAt(i, 1);
                    int maLT = ctp.getMaLT();
                    if (maLT == 0) {
                        lt.setMaHH(hh.getMaHH());
                        ltDAO.insert(lt);
                        ctp.setMaLT(ltDAO.getMaLT(maKho, hh.getMaHH()));
                    }
                    ctp.setMaPhieu(Integer.valueOf(maPhieu));
                    ctpDAO.insert(ctp);
                    modelCTPhieu.setValueAt(ctpDAO.getMaCTP(Integer.valueOf(maPhieu), ctp.getMaLT()), i, 4);
                    insertLuuTru(i);
                }
            }

        } else {
            for (int i = 0; i < rows; i++) {
                ctp = getFormCTPhieu(i);
                ctp.setMaPhieu(phieu.getMaPhieu());
                if (ctp.getMaCTP() != 0) {
                    deleteLuuTru(i);
                    ctpDAO.update(ctp);
                } else {
                    ctp = getFormCTPhieu(i);
                    HangHoa hh = (HangHoa) modelCTPhieu.getValueAt(i, 1);
                    int maLT = ctp.getMaLT();
                    if (maLT == 0) {
                        lt.setMaHH(hh.getMaHH());
                        ltDAO.insert(lt);
                        ctp.setMaLT(ltDAO.getMaLT(maKho, hh.getMaHH()));
                    }
                    ctp.setMaPhieu(Integer.valueOf(maPhieu));
                    ctpDAO.insert(ctp);
                }
            }
        }

        this.fillToTablePhieu();
        this.fillToTableCTPhieu();

        MsgBox.alert(this, "Cập nhật phiếu " + (phieu.isLoai() ? "nhập" : "xuất") + " thành công!");
    }

    // Xoá phieu khoi he thong
    private void deletePhieu() {
        Phieu phieu = this.getFormPhieu();

        if (!MsgBox.confirm(this, "Bạn chắc chắn muốn xoá phiếu " + (phieu.isLoai() ? "nhập" : "xuất") + " này ?")) {
            return;
        }

        String maPhieu = tblCTPhieu.getToolTipText();

        if (maPhieu == null) {
            return;
        }

        int rows = modelCTPhieu.getRowCount();
        ChiTietPhieu ctp;

        if (phieu.isLoai()) {
            for (ChiTietPhieu ctpDel : delCTP) {
                spDAO.deleteNhapTest(ctpDel.getMaCTP());
                ctpDAO.delete(ctpDel.getMaCTP());
            }
        } else {
            for (ChiTietPhieu ctpDel : delCTP) {
                spDAO.deleteXuatTest(ctpDel.getMaCTP());
                ctpDAO.delete(ctpDel.getMaCTP());
            }
        }

        for (int i = 0; i < rows; i++) {

            ctp = getFormCTPhieu(i);

            if (ctp.getMaCTP() != 0) {
                deleteLuuTru(i);
                ctpDAO.delete(ctp.getMaCTP());
            }
        }

        pDAO.delete(Integer.valueOf(maPhieu));

        this.clearForm();
        this.fillToTablePhieu();

        MsgBox.alert(this, "Xóa phiếu " + (phieu.isLoai() ? "nhập" : "xuất") + " thành công!");
    }

    // Xóa trắng form
    private void clearForm() {
        Date NgayLap = new Date(System.currentTimeMillis());

        rdoPhieuNhap.setEnabled(true);
        rdoPhieuXuat.setEnabled(true);
        rdoPhieuNhap.setSelected(true);

        cboLoaiDT.setSelectedIndex(0);
        cboDoiTac.setSelectedIndex(0);
        txtMaNV.setToolTipText(Auth.user.getMaNV());
        txtMaNV.setText(Auth.user.getTenNV());
        txtNgayLap.setText(XDate.toString(NgayLap, dateTimeFormat));
        txtNgayThucHien.setDate(new Date());
        txtNgayHoanThanh.setDate(new Date());
        txtGhiChu.setText(null);
        cboKho.setSelectedIndex(0);
        chkChuyenHang.setSelected(false);
        chkThanhToan.setSelected(false);
        tblCTPhieu.setToolTipText(null);
        lblQRCodeImage.setIcon(null);
        txtDaThanhToan.setText("0.0");

        cboLoaiHH.setSelectedIndex(0);

        this.fillToTableCTPhieu();

        this.rowPhieu = -1;

        this.delCTP.clear();
        this.listCT.clear();

        isUpdate = false;
        this.updateStatus();
    }

    // Cập nhật giao diện form theo hoạt động
    private void updateStatus() {
        // Kiểm tra trạng thái chọn hàng trên bảng
        boolean edit = (this.rowPhieu >= 0);
        boolean first = (this.rowPhieu == 0);
        boolean last = (this.rowPhieu == tblPhieu.getRowCount() - 1);

        this.isInsert = !edit;
        btnSua.setEnabled(edit);
        btnXoa.setEnabled(edit);
        btnXuatMaPhieu.setEnabled(edit);
        btnXuatFile.setEnabled(edit);
        btnChiTiet.setEnabled(edit);
        btnFirst.setEnabled(edit && !first);
        btnPrev.setEnabled(edit && !first);
        btnNext.setEnabled(edit && !last);
        btnLast.setEnabled(edit && !last);

        // Kiểm tra vai trò người dùng, hạn chế quyền thủ kho
        btnXoa.setVisible(Auth.isManager());
        btnXoaCTP.setEnabled(Auth.isManager());

        // Kiểm tra trạng thái hoàn thành phiếu
        boolean isCompleted = chkChuyenHang.isSelected();
        if (!isCompleted) {
            txtNgayHoanThanh.setDate(new Date());
        }
        txtNgayHoanThanh.setEnabled(isCompleted);

        // Cập nhật trạng thái update phiếu
        cboKho.setEnabled(!isUpdate);
        rdoPhieuNhap.setEnabled(!isUpdate);
        rdoPhieuXuat.setEnabled(!isUpdate);

    }

    private void updateUIPhieu() {
        if (rdoPhieuNhap.isSelected()) {
            lblDaThanhToan.setText("Đã thanh toán cho đối tác");
            chkChuyenHang.setText("Hoàn thành nhập hàng");
            chkThanhToan.setText("Hoàn thành thanh toán cho đối tác");
            lblLoaiDT.setText("Loại đối tác");
            lblDoiTac.setText("Đối tác");
        } else {
            lblDaThanhToan.setText("Khách hàng đã thanh toán");
            chkChuyenHang.setText("Hoàn thành xuất hàng");
            chkThanhToan.setText("Khách hàng đã hoàn thành thanh toán");
            lblLoaiDT.setText("Loại khách hàng");
            lblDoiTac.setText("Khách hàng");
        }
        this.fillToComboBoxLoaiDT();
    }

    // Định dạng bảng
    private void formatTable() {
        // Dữ liệu hàng tiêu đề bảng
        String headerPhieu[] = {"STT", "ĐỐI TÁC", "LOẠI", "KHO", "TT VẬN CHUYỂN", "TT THANH TOÁN",
            "NGÀY THỰC HIỆN", "NGÀY HOÀN THÀNH", "NGÀY LẬP", "NGƯỜI LẬP"};
        this.modelPhieu = new DefaultTableModel(headerPhieu, 0) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }

            Class[] types = new Class[]{
                Integer.class,
                String.class,
                String.class,
                Integer.class,
                String.class,
                String.class,
                String.class,
                String.class,
                String.class,
                Phieu.class
            };

            @Override
            public Class getColumnClass(int columnIndex) {
                return types[columnIndex];
            }
        };
        String headerCTPhieu[] = {"STT", "TÊN HÀNG HÓA", "SỐ LƯỢNG", "ĐƠN GIÁ",
            "MÃ CHI TIẾT PHIẾU", "THÀNH TIỀN", "TRẠNG THÁI", "LƯU TRỮ", "MÃ LƯU TRỮ"};
        this.modelCTPhieu = new DefaultTableModel(headerCTPhieu, 0) {
            @Override
            public boolean isCellEditable(int row, int column) {
                if (column == 2 || column == 3) {
                    return true;
                }
                return false;
            }

            Class[] types = new Class[]{
                Integer.class,
                HangHoa.class,
                Double.class,
                String.class,
                Integer.class,
                String.class,
                Boolean.class,
                Double.class,
                Integer.class
            };

            @Override
            public Class getColumnClass(int columnIndex) {
                return types[columnIndex];
            }
        };

        tblPhieu.setModel(modelPhieu);
        tblCTPhieu.setModel(modelCTPhieu);
        tblCTPhieu_ChiTiet.setModel(modelCTPhieu);

        sorterPhieu = new TableRowSorter<>(modelPhieu);
        sorterCTPhieu = new TableRowSorter<>(modelCTPhieu);
        sorterCTPhieu_ChiTiet = new TableRowSorter<>(modelCTPhieu);

        tblPhieu.setRowSorter(sorterPhieu);
        tblCTPhieu.setRowSorter(sorterCTPhieu);
        tblCTPhieu_ChiTiet.setRowSorter(sorterCTPhieu_ChiTiet);

        sorterPhieu.setStringConverter(new LowerCaseStringConverter());
        sorterPhieu.setComparator(6, new DateComparator(dateFormat));
        sorterPhieu.setComparator(7, new DateComparator(dateFormat));
        sorterPhieu.setComparator(8, new DateTimeComparator(dateTimeFormat));
        sorterCTPhieu.setStringConverter(new LowerCaseStringConverter());
        sorterCTPhieu.setComparator(3, new DoubleComparator(numFormat));
        sorterCTPhieu.setComparator(4, new DoubleComparator(numFormat));
        sorterCTPhieu_ChiTiet.setStringConverter(new LowerCaseStringConverter());

        // Giấu cột
        tblCTPhieu_ChiTiet.getColumnModel().removeColumn(tblCTPhieu_ChiTiet.getColumnModel().getColumn(8));
        tblCTPhieu.getColumnModel().removeColumn(tblCTPhieu.getColumnModel().getColumn(8));
        tblCTPhieu_ChiTiet.getColumnModel().removeColumn(tblCTPhieu_ChiTiet.getColumnModel().getColumn(7));
        tblCTPhieu.getColumnModel().removeColumn(tblCTPhieu.getColumnModel().getColumn(7));
        tblCTPhieu_ChiTiet.getColumnModel().removeColumn(tblCTPhieu_ChiTiet.getColumnModel().getColumn(6));
        tblCTPhieu.getColumnModel().removeColumn(tblCTPhieu.getColumnModel().getColumn(6));
        tblCTPhieu_ChiTiet.getColumnModel().removeColumn(tblCTPhieu_ChiTiet.getColumnModel().getColumn(4));
        tblCTPhieu.getColumnModel().removeColumn(tblCTPhieu.getColumnModel().getColumn(4));

        // Chỉnh độ dài các cột bảng Phiếu
        tblPhieu.getColumnModel().getColumn(0).setPreferredWidth(35);
        tblPhieu.getColumnModel().getColumn(1).setPreferredWidth(293);
        tblPhieu.getColumnModel().getColumn(2).setPreferredWidth(0);
        tblPhieu.getColumnModel().getColumn(2).setMinWidth(0);
        tblPhieu.getColumnModel().getColumn(2).setMaxWidth(0);
        tblPhieu.getColumnModel().getColumn(3).setPreferredWidth(35);
        tblPhieu.getColumnModel().getColumn(4).setPreferredWidth(95);
        tblPhieu.getColumnModel().getColumn(5).setPreferredWidth(90);
        tblPhieu.getColumnModel().getColumn(6).setPreferredWidth(100);
        tblPhieu.getColumnModel().getColumn(7).setPreferredWidth(125);
        tblPhieu.getColumnModel().getColumn(8).setPreferredWidth(60);

        // Chỉnh độ dài các cột bảng Chi tiết phiếu
        tblCTPhieu_ChiTiet.getColumnModel().getColumn(0).setPreferredWidth(35);
        tblCTPhieu_ChiTiet.getColumnModel().getColumn(1).setPreferredWidth(274);
        tblCTPhieu_ChiTiet.getColumnModel().getColumn(2).setPreferredWidth(85);
        tblCTPhieu_ChiTiet.getColumnModel().getColumn(3).setPreferredWidth(85);
        tblCTPhieu_ChiTiet.getColumnModel().getColumn(3).setPreferredWidth(85);
        tblCTPhieu.getColumnModel().getColumn(0).setPreferredWidth(35);
        tblCTPhieu.getColumnModel().getColumn(1).setPreferredWidth(395);
        tblCTPhieu.getColumnModel().getColumn(2).setPreferredWidth(120);
        tblCTPhieu.getColumnModel().getColumn(3).setPreferredWidth(120);
        tblCTPhieu.getColumnModel().getColumn(4).setPreferredWidth(120);

        // Cài đặt định dạng cho bảng
        TableDateCellRenderer cellDateRender = new TableDateCellRenderer(dateFormat) {
            @Override
            public Component getTableCellRendererComponent(JTable table,
                    Object value, boolean isSelected, boolean hasFocus, int row, int col) {

                super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, col);

                if (table.isRowSelected(row)) {
                    // Highlight self.
                    this.repaint();
                    return this;
                }

                String statusVC = (String) table.getModel().getValueAt(row, 4);
                String statusTT = (String) table.getModel().getValueAt(row, 5);

                if (statusVC.equals("Đã hoàn thành")) {
                    if (statusTT.equals("Đã xong")) {
                        setBackground(table.getBackground());
                        setForeground(table.getForeground());
                    } else {
                        setBackground(txtMau4.getBackground());
                        setForeground(Color.BLACK);
                    }
                } else {
                    if (statusTT.equals("Đã xong")) {
                        setBackground(txtMau2.getBackground());
                        setForeground(Color.BLACK);
                    } else {
                        setBackground(txtMau3.getBackground());
                        setForeground(Color.BLACK);
                    }
                }
                return this;
            }
        };

        TableDateCellRenderer cellDateRenderK = new TableDateCellRenderer(dateTimeFormat) {
            @Override
            public Component getTableCellRendererComponent(JTable table,
                    Object value, boolean isSelected, boolean hasFocus, int row, int col) {

                super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, col);

                if (table.isRowSelected(row)) {
                    // Highlight self.
                    this.repaint();
                    return this;
                }

                String statusVC = (String) table.getModel().getValueAt(row, 4);
                String statusTT = (String) table.getModel().getValueAt(row, 5);

                if (statusVC.equals("Đã hoàn thành")) {
                    if (statusTT.equals("Đã xong")) {
                        setBackground(table.getBackground());
                        setForeground(table.getForeground());
                    } else {
                        setBackground(txtMau4.getBackground());
                        setForeground(Color.BLACK);
                    }
                } else {
                    if (statusTT.equals("Đã xong")) {
                        setBackground(txtMau2.getBackground());
                        setForeground(Color.BLACK);
                    } else {
                        setBackground(txtMau3.getBackground());
                        setForeground(Color.BLACK);
                    }
                }
                return this;
            }
        };

        DefaultTableCellRenderer cellCenterRender = new DefaultTableCellRenderer() {
            public Component getTableCellRendererComponent(JTable table,
                    Object value, boolean isSelected, boolean hasFocus, int row, int col) {

                super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, col);

                setHorizontalAlignment(JLabel.CENTER);

                if (table.isRowSelected(row)) {
                    // Highlight self.
                    this.repaint();
                    return this;
                }

                String statusVC = (String) table.getModel().getValueAt(row, 4);
                String statusTT = (String) table.getModel().getValueAt(row, 5);

                if (statusVC.equals("Đã hoàn thành")) {
                    if (statusTT.equals("Đã xong")) {
                        setBackground(table.getBackground());
                        setForeground(table.getForeground());
                    } else {
                        setBackground(txtMau4.getBackground());
                        setForeground(Color.BLACK);
                    }
                } else {
                    if (statusTT.equals("Đã xong")) {
                        setBackground(txtMau2.getBackground());
                        setForeground(Color.BLACK);
                    } else {
                        setBackground(txtMau3.getBackground());
                        setForeground(Color.BLACK);
                    }
                }
                return this;
            }
        };

        DefaultTableCellRenderer cellNormalRender = new DefaultTableCellRenderer() {
            @Override
            public Component getTableCellRendererComponent(JTable table,
                    Object value, boolean isSelected, boolean hasFocus, int row, int col) {

                super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, col);

                if (table.isRowSelected(row)) {
                    // Highlight self.
                    this.repaint();
                    return this;
                }

                String statusVC = (String) table.getModel().getValueAt(row, 4);
                String statusTT = (String) table.getModel().getValueAt(row, 5);

                if (statusVC.equals("Đã hoàn thành")) {
                    if (statusTT.equals("Đã xong")) {
                        setBackground(table.getBackground());
                        setForeground(table.getForeground());
                    } else {
                        setBackground(txtMau4.getBackground());
                        setForeground(Color.BLACK);
                    }
                } else {
                    if (statusTT.equals("Đã xong")) {
                        setBackground(txtMau2.getBackground());
                        setForeground(Color.BLACK);
                    } else {
                        setBackground(txtMau3.getBackground());
                        setForeground(Color.BLACK);
                    }
                }
                return this;
            }
        };

        tblPhieu.getColumnModel().getColumn(0).setCellRenderer(cellCenterRender);
        tblPhieu.getColumnModel().getColumn(1).setCellRenderer(cellNormalRender);
        tblPhieu.getColumnModel().getColumn(2).setCellRenderer(cellCenterRender);
        tblPhieu.getColumnModel().getColumn(3).setCellRenderer(cellCenterRender);
        tblPhieu.getColumnModel().getColumn(4).setCellRenderer(cellCenterRender);
        tblPhieu.getColumnModel().getColumn(5).setCellRenderer(cellCenterRender);
        tblPhieu.getColumnModel().getColumn(6).setCellRenderer(cellDateRender);
        tblPhieu.getColumnModel().getColumn(7).setCellRenderer(cellDateRender);
        tblPhieu.getColumnModel().getColumn(8).setCellRenderer(cellDateRenderK);
        tblPhieu.getColumnModel().getColumn(9).setCellRenderer(cellCenterRender);

        tblCTPhieu.getColumnModel().getColumn(0).setCellRenderer(TableNumberCellRenderer.getIntegerRenderer());
        tblCTPhieu.getColumnModel().getColumn(2).setCellRenderer(TableNumberCellRenderer.getIntegerRenderer());
        tblCTPhieu.getColumnModel().getColumn(3).setCellRenderer(TableNumberCellRenderer.getDoubleRenderer(numFormat));
        tblCTPhieu.getColumnModel().getColumn(4).setCellRenderer(TableNumberCellRenderer.getDoubleRenderer(numFormat));

        tblCTPhieu_ChiTiet.getColumnModel().getColumn(0).setCellRenderer(TableNumberCellRenderer.getIntegerRenderer());
        tblCTPhieu_ChiTiet.getColumnModel().getColumn(2).setCellRenderer(TableNumberCellRenderer.getIntegerRenderer());
        tblCTPhieu_ChiTiet.getColumnModel().getColumn(3).setCellRenderer(TableNumberCellRenderer.getDoubleRenderer(numFormat));
        tblCTPhieu_ChiTiet.getColumnModel().getColumn(4).setCellRenderer(TableNumberCellRenderer.getDoubleRenderer(numFormat));

//        {"STT", "ĐỐI TÁC", "LOẠI", "KHO", "TT VẬN CHUYỂN", "TT THANH TOÁN",
//            "NGÀY THỰC HIỆN", "NGÀY HOÀN THÀNH", "NGÀY LẬP", "NGƯỜI LẬP"};
        // Chỉnh độ rộng hàng trong bảng
        tblCTPhieu.setRowHeight(25);
        tblCTPhieu_ChiTiet.setRowHeight(25);
        tblPhieu.setRowHeight(25);

        // Thêm chức năng nhập cho bảng
        JSpinnerEditor spinnerSoLuong = new JSpinnerEditor(0.0, 0.0, 100000.0, 1.0);
        JSpinnerEditor spinnerDonGia = new JSpinnerStringEditor(0.0, 0.0, 1000000000.0, 1000.0, numFormat);

        tblCTPhieu_ChiTiet.getColumnModel().getColumn(2).setCellEditor(spinnerSoLuong);
        tblCTPhieu_ChiTiet.getColumnModel().getColumn(3).setCellEditor(spinnerDonGia);
        tblCTPhieu.getColumnModel().getColumn(2).setCellEditor(spinnerSoLuong);
        tblCTPhieu.getColumnModel().getColumn(3).setCellEditor(spinnerDonGia);

        // check value of the cell
        tblCTPhieu_ChiTiet.getColumnModel().getColumn(2).getCellEditor().addCellEditorListener(new CellEditorListener() {
            @Override
            public void editingStopped(ChangeEvent e) {
                int row = tblCTPhieu.getSelectedRow();
                if (row < 0 || rdoPhieuNhap.isSelected() || ChiTietPhieuDialog.isFocused()) {
                    return;
                }

                double Ton = (Double) modelCTPhieu.getValueAt(row, 7);

                JSpinnerEditor c = (JSpinnerEditor) e.getSource();

                if (c.getNewValue() > Ton && rdoPhieuXuat.isSelected()) {
                    MsgBox.alert(pnlBackground, "Không đủ hàng tồn để xuất!");
                    modelCTPhieu.setValueAt(c.getOldValue(), row, 2);
                }
            }

            @Override
            public void editingCanceled(ChangeEvent e) {
            }
        });

        tblCTPhieu.getColumnModel().getColumn(2).getCellEditor().addCellEditorListener(new CellEditorListener() {
            @Override
            public void editingStopped(ChangeEvent e) {
                int row = tblCTPhieu.getSelectedRow();
                if (row < 0 || rdoPhieuNhap.isSelected() || !ChiTietPhieuDialog.isFocused()) {
                    return;
                }

                double Ton = (Double) modelCTPhieu.getValueAt(row, 7);

                JSpinnerEditor c = (JSpinnerEditor) e.getSource();

                if (c.getNewValue() > Ton && rdoPhieuXuat.isSelected()) {
                    MsgBox.alert(pnlBackground, "Không đủ hàng tồn để xuất!");
                    modelCTPhieu.setValueAt(c.getOldValue(), row, 2);
                }
            }

            @Override
            public void editingCanceled(ChangeEvent e) {
            }
        });
    }

    // Đổ combobox tìm kiếm chi tiết phiếu
    private void fillToComboBoxTimKiemCTPhieu() {
        DefaultComboBoxModel model = (DefaultComboBoxModel) cboTimKiemCTPhieu.getModel();
        model.removeAllElements();
        for (int i = 0; i < tblCTPhieu.getColumnCount(); i++) {
            model.addElement(tblCTPhieu.getColumnName(i));
        }
    }

    // Lọc bảng theo từ khoá chi tiết phiếu
    private void searchCTPhieu() {
        int columnFilter = cboTimKiemCTPhieu.getSelectedIndex();
        String keyword = txtTimKiemCTPhieu.getText().toLowerCase();

        RowFilter<TableModel, Object> rf = null;
        try {
            rf = RowFilter.regexFilter(keyword.toLowerCase(), columnFilter);
        } catch (Exception e) {
            return;
        }
        sorterCTPhieu.setRowFilter(rf);
    }

    // Đổ combobox tìm kiếm phiếu
    private void fillToComboBoxTimKiemPhieu() {
        DefaultComboBoxModel model = (DefaultComboBoxModel) cboTimKiemPhieu.getModel();
        model.removeAllElements();
        for (int i = 0; i < tblPhieu.getColumnCount(); i++) {
            model.addElement(tblPhieu.getColumnName(i));
        }
    }

    // Lọc bảng theo từ khoá phiếu
    private void searchPhieu() {
        int columnFilter = cboTimKiemPhieu.getSelectedIndex();
        String keyword = txtTimKiemPhieu.getText();

        RowFilter<TableModel, Object> rf = null;
        try {
            rf = RowFilter.regexFilter(keyword.toLowerCase(), columnFilter);
        } catch (Exception e) {
            return;
        }
        sorterPhieu.setRowFilter(rf);
    }

    // Hiển thị phiếu đầu danh sách
    private void first() {
        this.rowPhieu = 0;
        this.edit();
    }

    // Hiển thị phiếu kế trước
    private void prev() {
        if (this.rowPhieu > 0) {
            this.rowPhieu--;
            this.edit();
        }
    }

    // Hiển thị phiếu kế tiếp
    private void next() {
        if (this.rowPhieu < (tblPhieu.getRowCount() - 1)) {
            this.rowPhieu++;
            this.edit();
        }
    }

    // Hiển thị phiếu cuối danh sách
    private void last() {
        this.rowPhieu = tblPhieu.getRowCount() - 1;
        this.edit();
    }

    // Hiển thị dữ liệu của phiếu được chọn lên form
    private void edit() {
        int rowPhieuModel = tblPhieu.convertRowIndexToModel(this.rowPhieu);

        delCTP.clear();

        Phieu phieu = (Phieu) tblPhieu.getModel().getValueAt(rowPhieuModel, 9);
        this.setFormPhieu(phieu);

        tabs.setSelectedIndex(0);
        cboTimKiemCTPhieu.setSelectedIndex(0);
        txtTimKiemCTPhieu.setText("");

        isUpdate = true;
        this.updateStatus();

        tblPhieu.setRowSelectionInterval(rowPhieu, rowPhieu);
    }

    // Tạo mã QR chứa mã phiếu
    private void createQRCode() {
        if (rowPhieu < 0) {
            MsgBox.alert(this, "Chưa chọn chi tiết phiếu!");
        } else {
            int rowPhieuModel = tblPhieu.convertRowIndexToModel(rowPhieu);
            Phieu phieu = (Phieu) tblPhieu.getModel().getValueAt(rowPhieuModel, 9);
            try {
                BufferedImage bi = QRCode.generateQRCodeImage(String.valueOf(phieu.getMaPhieu()));
                lblQRCodeImage.setIcon(new ImageIcon(bi));
                QRCodeDialog.setVisible(true);
            } catch (WriterException ex) {
                ex.printStackTrace();
            }
        }
    }

    // Xuất phiếu
    private void exportReport() {
        if (rowPhieu < 0) {
            MsgBox.alert(this, "Chưa chọn chi tiết phiếu!");
            return;
        }

        try {
            int rowPhieuModel = tblPhieu.convertRowIndexToModel(rowPhieu);
            Phieu phieu = (Phieu) this.modelPhieu.getValueAt(rowPhieuModel, 9);

            // Truyền tham số vào báo cáo
            HashMap parameters = new HashMap();
            parameters.put("MAPHIEU", phieu.getMaPhieu());

            String fileName = "";

            if (phieu.isLoai()) {
                fileName = "PhieuNhapSo" + phieu.getMaPhieu();
            } else {
                fileName = "PhieuXuatSo" + phieu.getMaPhieu();
            }
            XReport.exportFile(fileName, reportPath, parameters);
        } catch (SQLException | JRException | IOException e) {
            MsgBox.alert(this, "Xuất file thất bại!");
            e.printStackTrace();
        }
    }

    // In báo cáo
    private void printReport() {
        if (rowPhieu < 0) {
            MsgBox.alert(this, "Chưa chọn chi tiết phiếu!");
            return;
        }

        try {
            int rowPhieuModel = tblPhieu.convertRowIndexToModel(rowPhieu);
            Phieu phieu = (Phieu) this.modelPhieu.getValueAt(rowPhieuModel, 9);

            // Truyền tham số vào báo cáo
            HashMap parameters = new HashMap();
            parameters.put("MAPHIEU", phieu.getMaPhieu());

            String fileName = "";

            if (phieu.isLoai()) {
                fileName = "PhieuNhapSo" + phieu.getMaPhieu();
            } else {
                fileName = "PhieuXuatSo" + phieu.getMaPhieu();
            }
            XReport.printReport(fileName, reportPath, parameters);
        } catch (SQLException | JRException e) {
            MsgBox.alert(this, "In phiếu thất bại!");
            e.printStackTrace();
        }
    }

    // Cập nhật thành tiền khi sửa số lượng hoặc đơn giá trên bảng
    private void updateThanhTienCTPhieu(JTable table, int row) {
        if (row < 0) {
            return;
        }

        double soLuong = (Double) table.getValueAt(row, 2);
        double donGia = XNumber.toDouble((String) table.getModel().getValueAt(row, 3), numFormat);
        double thanhTien = soLuong * donGia;

        table.getModel().setValueAt(XNumber.toString(thanhTien, numFormat), row, 5);

        double tongTien = 0;
        for (int i = 0; i < table.getModel().getRowCount(); i++) {
            tongTien += XNumber.toDouble((String) table.getModel().getValueAt(i, 5), numFormat);
        }
        lblTongTien.setText(XNumber.toString(tongTien, numFormat));

        // Tự động cập nhật số lượng và đơn giá vào CSDL
        /*
        int maChiTiet = (int) table.getModel().getValueAt(table.convertRowIndexToModel(row), 4);
        ChiTietPhieu ctp = ctpDAO.selectByID(maChiTiet);
        if(ctp == null) return;
        ctp.setSoLuong(soLuong);
        ctp.setDonGia(donGia);
        ctpDAO.update(ctp);
         */
    }

    // Xác thực form
    private boolean isValidated() {
        if (txtNgayThucHien.getDate() == null) {
            MsgBox.alert(this, "Chưa nhập ngày thực hiện!");
            txtNgayThucHien.requestFocus();
            return false;
        }

        /*
        Date ngayLap = XDate.toDate(txtNgayLap.getText(), dateFormat);
        Date ngayThucHien = txtNgayThucHien.getDate();
        if (ngayThucHien.before(ngayLap)) {
            XOptionPane.alert(this, "Ngày thực hiện không nhỏ hơn ngày lập phiếu!");
            txtNgayThucHien.requestFocus();
            return false;
        }
         */
        if (chkChuyenHang.isSelected()) {
            if (txtNgayHoanThanh.getDate() == null) {
                MsgBox.alert(this, "Chưa nhập ngày hoàn thành!");
                txtNgayThucHien.requestFocus();
                return false;
            }

            Date ngayHoanThanh = txtNgayHoanThanh.getDate();
            if (ngayHoanThanh.before(txtNgayThucHien.getDate())) {

                txtNgayThucHien.requestFocus();
                return false;
            }
        }
        return true;
    }

    // Đổ lại dữ liệu 
    public void refreshForm() {

        this.fillToComboBoxKho();
        this.fillToTablePhieu();
        this.fillToComboBoxLoaiDT();
        this.fillToComboBoxLoaiHH();

        this.timer.restart();
    }

    // Sau hai phút tải lại dữ liệu
    private Timer timer = new Timer(120000, (e) -> {
        refreshForm();
    });

    // Nhấn enter không xuống dòng tiếp theo khi đang sửa ô trong table
    private void disableEnterCellNextLine(JTable table) {
        int row = table.getSelectedRow();
        if (row == 0) {
            row = table.getRowCount() - 1;
        } else {
            row--;
        }
        table.setRowSelectionInterval(row, row);
    }

    // Ánh xạ dòng được chọn của bảng này sang bảng khác
    private void mapSelectionTable(JTable TableToClick, JTable TableToMap) {
        int rowTableToClick = TableToClick.convertRowIndexToModel(TableToClick.getSelectedRow());
        int rowTableToMap = TableToMap.convertRowIndexToView(rowTableToClick);
        TableToMap.setRowSelectionInterval(rowTableToMap, rowTableToMap);
    }

}

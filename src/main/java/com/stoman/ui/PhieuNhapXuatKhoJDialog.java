/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.stoman.ui;

import com.formdev.flatlaf.FlatIntelliJLaf;
import com.google.zxing.WriterException;
import com.stoman.dao.ChiTietPhieuDAO;
import com.stoman.dao.DoiTacDAO;
import com.stoman.dao.HangHoaDAO;
import com.stoman.dao.KhoDAO;
import com.stoman.dao.LoaiDoiTacDAO;
import com.stoman.dao.LoaiHangHoaDAO;
import com.stoman.dao.LuuTruDAO;
import com.stoman.dao.NhanVienDAO;
import com.stoman.dao.PhieuDAO;
import com.stoman.dao.ProcedureDAO;
import com.stoman.entity.ChiTietPhieu;
import com.stoman.entity.DoiTac;
import com.stoman.entity.HangHoa;
import com.stoman.entity.Kho;
import com.stoman.entity.LoaiDoiTac;
import com.stoman.entity.LoaiHangHoa;
import com.stoman.entity.LuuTru;
import com.stoman.entity.NhanVien;
import com.stoman.entity.Phieu;
import com.stoman.utils.Auth;
import com.stoman.utils.DateComparator;
import com.stoman.utils.DateTimeComparator;
import com.stoman.utils.DoubleComparator;
import com.stoman.utils.TableDateCellRenderer;
import com.stoman.utils.XReport;
import com.stoman.utils.MsgBox;
import com.stoman.utils.QRCode;
import com.stoman.utils.JSpinnerEditor;
import com.stoman.utils.JSpinnerStringEditor;
import com.stoman.utils.LowerCaseStringConverter;
import com.stoman.utils.TableNumberCellRenderer;
import com.stoman.utils.XDate;
import com.stoman.utils.XNumber;
import java.awt.Color;
import java.awt.Component;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.JTable;
import javax.swing.RowFilter;
import javax.swing.SwingWorker;
import javax.swing.Timer;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.event.CellEditorListener;
import javax.swing.event.ChangeEvent;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import net.sf.jasperreports.engine.JRException;

/**
 *
 * @author Huy
 */
public class PhieuNhapXuatKhoJDialog extends javax.swing.JDialog {

    /**
     * Creates new form PhieuKiemKhoDialog
     */
    public PhieuNhapXuatKhoJDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        init();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        ChiTietPhieuDialog = new javax.swing.JDialog();
        pnlBackgroundDialog = new javax.swing.JPanel();
        pnlTblCTPhieu_main = new javax.swing.JScrollPane();
        tblCTPhieu_ChiTiet = new javax.swing.JTable();
        pnlThongTinCTP = new javax.swing.JPanel();
        lblLoaiHH = new javax.swing.JLabel();
        lblTenHH = new javax.swing.JLabel();
        cboLoaiHH = new javax.swing.JComboBox<>();
        cboHangHoa = new javax.swing.JComboBox<>();
        pnlChucNangCTP = new javax.swing.JPanel();
        btnThemCTP = new javax.swing.JButton();
        btnXoaCTP = new javax.swing.JButton();
        btnGrpLoaiPhieu = new javax.swing.ButtonGroup();
        QRCodeDialog = new javax.swing.JDialog();
        pnlBackgroundQR = new javax.swing.JPanel();
        lblQRCodeImage = new javax.swing.JLabel();
        pnlBackground = new javax.swing.JPanel();
        tabs = new javax.swing.JTabbedPane();
        pnlChiTiet = new javax.swing.JPanel();
        peparator = new javax.swing.JSeparator();
        lblTimKiemCT = new javax.swing.JLabel();
        lblTimKiemCT2 = new javax.swing.JLabel();
        txtTimKiemCTPhieu = new javax.swing.JTextField();
        cboTimKiemCTPhieu = new javax.swing.JComboBox<>();
        pnlTblCTPhieu_sub = new javax.swing.JScrollPane();
        tblCTPhieu = new javax.swing.JTable();
        pnlNutDieuHuong = new javax.swing.JPanel();
        btnFirst = new javax.swing.JButton();
        btnPrev = new javax.swing.JButton();
        btnNext = new javax.swing.JButton();
        btnLast = new javax.swing.JButton();
        pnlChucNang = new javax.swing.JPanel();
        btnMoi = new javax.swing.JButton();
        btnXoa = new javax.swing.JButton();
        btnSua = new javax.swing.JButton();
        btnChiTiet = new javax.swing.JButton();
        btnXuatMaPhieu = new javax.swing.JButton();
        btnHoanTac = new javax.swing.JButton();
        pnlChucNangMoRong = new javax.swing.JPanel();
        btnXuatFile = new javax.swing.JButton();
        btnInPhieu = new javax.swing.JButton();
        lblCTP = new javax.swing.JLabel();
        lblChucNang = new javax.swing.JLabel();
        lblThongTinPhieu = new javax.swing.JLabel();
        pnlThongTinKhac = new javax.swing.JPanel();
        jSeparator3 = new javax.swing.JSeparator();
        jSeparator4 = new javax.swing.JSeparator();
        txtDaThanhToan = new javax.swing.JFormattedTextField();
        lblTongTien = new javax.swing.JLabel();
        chkThanhToan = new javax.swing.JCheckBox();
        lblDaThanhToan = new javax.swing.JLabel();
        chkChuyenHang = new javax.swing.JCheckBox();
        lblTongTienTitle = new javax.swing.JLabel();
        lblTrangThai = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        pnlThongTin = new javax.swing.JPanel();
        lblDoiTac = new javax.swing.JLabel();
        txtNgayHoanThanh = new com.toedter.calendar.JDateChooser();
        lblMaNV = new javax.swing.JLabel();
        txtNgayThucHien = new com.toedter.calendar.JDateChooser();
        lblLoaiDT = new javax.swing.JLabel();
        lblLoaiPhieu = new javax.swing.JLabel();
        lblGhiChu = new javax.swing.JLabel();
        lblNgayHoanThanh = new javax.swing.JLabel();
        rdoPhieuXuat = new javax.swing.JRadioButton();
        lblNgayHoanThanh1 = new javax.swing.JLabel();
        lblNgayThucHien = new javax.swing.JLabel();
        cboKho = new javax.swing.JComboBox<>();
        cboLoaiDT = new javax.swing.JComboBox<>();
        lblNgayLap = new javax.swing.JLabel();
        txtNgayLap = new javax.swing.JFormattedTextField();
        rdoPhieuNhap = new javax.swing.JRadioButton();
        pnlGhiChu = new javax.swing.JScrollPane();
        txtGhiChu = new javax.swing.JTextArea();
        cboDoiTac = new javax.swing.JComboBox<>();
        txtMaNV = new javax.swing.JTextField();
        pnlDanhSach = new javax.swing.JPanel();
        scrollPane2 = new javax.swing.JScrollPane();
        tblPhieu = new javax.swing.JTable();
        lblTimKiemCT1 = new javax.swing.JLabel();
        txtTimKiemPhieu = new javax.swing.JTextField();
        lblTimKiemPhieu2 = new javax.swing.JLabel();
        cboTimKiemPhieu = new javax.swing.JComboBox<>();
        lblDanhSachPhieu = new javax.swing.JLabel();
        pnlChuThich = new javax.swing.JPanel();
        lblMau2 = new javax.swing.JLabel();
        txtMau3 = new javax.swing.JTextField();
        lblMau4 = new javax.swing.JLabel();
        txtMau4 = new javax.swing.JTextField();
        lblMau1 = new javax.swing.JLabel();
        txtMau1 = new javax.swing.JTextField();
        txtMau2 = new javax.swing.JTextField();
        lblMau3 = new javax.swing.JLabel();
        pnlThongKe = new javax.swing.JPanel();
        pnlHoanThanh = new javax.swing.JPanel();
        lblHoanThanh = new javax.swing.JLabel();
        lblSoLuongHoanThanh = new javax.swing.JLabel();
        pnlChuaThanhToan = new javax.swing.JPanel();
        lblThanhToan = new javax.swing.JLabel();
        lblSoLuongThanhToan = new javax.swing.JLabel();
        pnlChuaChuyenHang = new javax.swing.JPanel();
        lblChuyenHang = new javax.swing.JLabel();
        lblSoLuongChuyenHang = new javax.swing.JLabel();
        jSeparator5 = new javax.swing.JSeparator();
        pnlTongPhieu = new javax.swing.JPanel();
        lblTongPhieu = new javax.swing.JLabel();
        lblSoLuongPhieu = new javax.swing.JLabel();
        pnlLoaiPhieu = new javax.swing.JPanel();
        pnlPhieuNhap = new javax.swing.JPanel();
        lblPhieuNhap = new javax.swing.JLabel();
        pnlPhieuXuat = new javax.swing.JPanel();
        lblPhieuXuat = new javax.swing.JLabel();

        ChiTietPhieuDialog.setTitle("Chi tiết phiếu nhập xuất kho");
        ChiTietPhieuDialog.setResizable(false);

        pnlTblCTPhieu_main.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Danh sách chi tiết phiếu", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 13))); // NOI18N
        pnlTblCTPhieu_main.setOpaque(false);

        tblCTPhieu_ChiTiet.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblCTPhieu_ChiTiet.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tblCTPhieu_ChiTiet.getTableHeader().setReorderingAllowed(false);
        tblCTPhieu_ChiTiet.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblCTPhieu_ChiTietMouseClicked(evt);
            }
        });
        tblCTPhieu_ChiTiet.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                tblCTPhieu_ChiTietPropertyChange(evt);
            }
        });
        tblCTPhieu_ChiTiet.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tblCTPhieu_ChiTietKeyReleased(evt);
            }
        });
        pnlTblCTPhieu_main.setViewportView(tblCTPhieu_ChiTiet);

        pnlThongTinCTP.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Chi tiết phiếu", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 13))); // NOI18N
        pnlThongTinCTP.setToolTipText("StoMan - Chi tiết phiếu kiểm kho");
        pnlThongTinCTP.setOpaque(false);

        lblLoaiHH.setText("Loại hàng hoá");

        lblTenHH.setText("Tên hàng hoá");

        cboLoaiHH.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboLoaiHHActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlThongTinCTPLayout = new javax.swing.GroupLayout(pnlThongTinCTP);
        pnlThongTinCTP.setLayout(pnlThongTinCTPLayout);
        pnlThongTinCTPLayout.setHorizontalGroup(
            pnlThongTinCTPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlThongTinCTPLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlThongTinCTPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblTenHH)
                    .addComponent(lblLoaiHH))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlThongTinCTPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cboLoaiHH, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cboHangHoa, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        pnlThongTinCTPLayout.setVerticalGroup(
            pnlThongTinCTPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlThongTinCTPLayout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addGroup(pnlThongTinCTPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblLoaiHH)
                    .addComponent(cboLoaiHH, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlThongTinCTPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTenHH)
                    .addComponent(cboHangHoa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(12, Short.MAX_VALUE))
        );

        pnlChucNangCTP.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Chức năng", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 13))); // NOI18N
        pnlChucNangCTP.setOpaque(false);
        pnlChucNangCTP.setLayout(new java.awt.GridBagLayout());

        btnThemCTP.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/stoman/icons/add.png"))); // NOI18N
        btnThemCTP.setText("Thêm");
        btnThemCTP.setPreferredSize(new java.awt.Dimension(100, 35));
        btnThemCTP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnThemCTPActionPerformed(evt);
            }
        });
        pnlChucNangCTP.add(btnThemCTP, new java.awt.GridBagConstraints());

        btnXoaCTP.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/stoman/icons/cancel.png"))); // NOI18N
        btnXoaCTP.setText("Xoá");
        btnXoaCTP.setPreferredSize(new java.awt.Dimension(100, 35));
        btnXoaCTP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnXoaCTPActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        pnlChucNangCTP.add(btnXoaCTP, gridBagConstraints);

        javax.swing.GroupLayout pnlBackgroundDialogLayout = new javax.swing.GroupLayout(pnlBackgroundDialog);
        pnlBackgroundDialog.setLayout(pnlBackgroundDialogLayout);
        pnlBackgroundDialogLayout.setHorizontalGroup(
            pnlBackgroundDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlBackgroundDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlBackgroundDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlBackgroundDialogLayout.createSequentialGroup()
                        .addComponent(pnlThongTinCTP, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pnlChucNangCTP, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(pnlTblCTPhieu_main, javax.swing.GroupLayout.DEFAULT_SIZE, 697, Short.MAX_VALUE))
                .addContainerGap())
        );
        pnlBackgroundDialogLayout.setVerticalGroup(
            pnlBackgroundDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlBackgroundDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlBackgroundDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(pnlThongTinCTP, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnlChucNangCTP, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlTblCTPhieu_main, javax.swing.GroupLayout.DEFAULT_SIZE, 295, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout ChiTietPhieuDialogLayout = new javax.swing.GroupLayout(ChiTietPhieuDialog.getContentPane());
        ChiTietPhieuDialog.getContentPane().setLayout(ChiTietPhieuDialogLayout);
        ChiTietPhieuDialogLayout.setHorizontalGroup(
            ChiTietPhieuDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlBackgroundDialog, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        ChiTietPhieuDialogLayout.setVerticalGroup(
            ChiTietPhieuDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlBackgroundDialog, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        QRCodeDialog.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        QRCodeDialog.setTitle("Xuất mã phiếu QR Code");
        QRCodeDialog.setResizable(false);

        pnlBackgroundQR.setPreferredSize(new java.awt.Dimension(300, 300));
        pnlBackgroundQR.setLayout(new java.awt.GridBagLayout());

        lblQRCodeImage.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153), 2));
        lblQRCodeImage.setPreferredSize(new java.awt.Dimension(200, 200));
        pnlBackgroundQR.add(lblQRCodeImage, new java.awt.GridBagConstraints());

        QRCodeDialog.getContentPane().add(pnlBackgroundQR, java.awt.BorderLayout.CENTER);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("StoMan - Quản lý phiếu nhập xuất kho");
        setFocusCycleRoot(false);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        pnlBackground.setLayout(new java.awt.BorderLayout());

        lblTimKiemCT.setText("Tìm kiếm");

        lblTimKiemCT2.setText("theo");

        txtTimKiemCTPhieu.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtTimKiemCTPhieuKeyReleased(evt);
            }
        });

        cboTimKiemCTPhieu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboTimKiemCTPhieuActionPerformed(evt);
            }
        });

        pnlTblCTPhieu_sub.setOpaque(false);

        tblCTPhieu.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "null", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblCTPhieu.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tblCTPhieu.getTableHeader().setReorderingAllowed(false);
        tblCTPhieu.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblCTPhieuMouseClicked(evt);
            }
        });
        tblCTPhieu.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                tblCTPhieuPropertyChange(evt);
            }
        });
        tblCTPhieu.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tblCTPhieuKeyReleased(evt);
            }
        });
        pnlTblCTPhieu_sub.setViewportView(tblCTPhieu);

        pnlNutDieuHuong.setOpaque(false);
        pnlNutDieuHuong.setLayout(new java.awt.GridLayout(1, 0));

        btnFirst.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/stoman/icons/skip-to-start.png"))); // NOI18N
        btnFirst.setPreferredSize(new java.awt.Dimension(100, 33));
        btnFirst.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFirstActionPerformed(evt);
            }
        });
        pnlNutDieuHuong.add(btnFirst);

        btnPrev.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/stoman/icons/double-left-24.png"))); // NOI18N
        btnPrev.setPreferredSize(new java.awt.Dimension(100, 33));
        btnPrev.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrevActionPerformed(evt);
            }
        });
        pnlNutDieuHuong.add(btnPrev);

        btnNext.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/stoman/icons/double-right.png"))); // NOI18N
        btnNext.setPreferredSize(new java.awt.Dimension(100, 33));
        btnNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNextActionPerformed(evt);
            }
        });
        pnlNutDieuHuong.add(btnNext);

        btnLast.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/stoman/icons/skip-to-end.png"))); // NOI18N
        btnLast.setPreferredSize(new java.awt.Dimension(100, 33));
        btnLast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLastActionPerformed(evt);
            }
        });
        pnlNutDieuHuong.add(btnLast);

        pnlChucNang.setBackground(new java.awt.Color(153, 153, 255));
        pnlChucNang.setOpaque(false);
        pnlChucNang.setLayout(new java.awt.GridBagLayout());

        btnMoi.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/stoman/icons/icons8_document_32px.png"))); // NOI18N
        btnMoi.setText("Phiếu mới");
        btnMoi.setPreferredSize(new java.awt.Dimension(148, 40));
        btnMoi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMoiActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.ipady = 27;
        pnlChucNang.add(btnMoi, gridBagConstraints);

        btnXoa.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/stoman/icons/icons8_delete_document_32px.png"))); // NOI18N
        btnXoa.setText("Xoá phiếu");
        btnXoa.setPreferredSize(new java.awt.Dimension(148, 40));
        btnXoa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnXoaActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.ipady = 27;
        pnlChucNang.add(btnXoa, gridBagConstraints);

        btnSua.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/stoman/icons/edit-property-32.png"))); // NOI18N
        btnSua.setText("Sửa phiếu");
        btnSua.setPreferredSize(new java.awt.Dimension(148, 40));
        btnSua.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSuaActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.ipady = 27;
        pnlChucNang.add(btnSua, gridBagConstraints);

        btnChiTiet.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/stoman/icons/more-details-32.png"))); // NOI18N
        btnChiTiet.setText("Chi tiết phiếu");
        btnChiTiet.setPreferredSize(new java.awt.Dimension(148, 40));
        btnChiTiet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChiTietActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.ipady = 27;
        pnlChucNang.add(btnChiTiet, gridBagConstraints);

        btnXuatMaPhieu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/stoman/icons/icons8_qr_code_24px.png"))); // NOI18N
        btnXuatMaPhieu.setText("Mã phiếu QR");
        btnXuatMaPhieu.setPreferredSize(new java.awt.Dimension(148, 40));
        btnXuatMaPhieu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnXuatMaPhieuActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.ipady = 27;
        pnlChucNang.add(btnXuatMaPhieu, gridBagConstraints);

        btnHoanTac.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/stoman/icons/icons8_undo_32px.png"))); // NOI18N
        btnHoanTac.setText("Huỷ thay đổi");
        btnHoanTac.setPreferredSize(new java.awt.Dimension(148, 40));
        btnHoanTac.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHoanTacActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.ipady = 27;
        pnlChucNang.add(btnHoanTac, gridBagConstraints);

        pnlChucNangMoRong.setOpaque(false);
        pnlChucNangMoRong.setLayout(new java.awt.GridLayout(1, 2));

        btnXuatFile.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/stoman/icons/open-document.png"))); // NOI18N
        btnXuatFile.setText("Xuất file");
        btnXuatFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnXuatFileActionPerformed(evt);
            }
        });
        pnlChucNangMoRong.add(btnXuatFile);

        btnInPhieu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/stoman/icons/print.png"))); // NOI18N
        btnInPhieu.setText("In phiếu");
        btnInPhieu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInPhieuActionPerformed(evt);
            }
        });
        pnlChucNangMoRong.add(btnInPhieu);

        lblCTP.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblCTP.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblCTP.setText("CHI TIẾT PHIẾU");

        lblChucNang.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblChucNang.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblChucNang.setText("CHỨC NĂNG");

        lblThongTinPhieu.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblThongTinPhieu.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblThongTinPhieu.setText("THÔNG TIN PHIẾU");

        txtDaThanhToan.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,##0.0"))));
        txtDaThanhToan.setText("0.0");
        txtDaThanhToan.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        lblTongTien.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblTongTien.setText("0.0");
        lblTongTien.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 7, 1, 1));

        chkThanhToan.setText("Hoàn thành thanh toán cho đối tác");
        chkThanhToan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkThanhToanActionPerformed(evt);
            }
        });

        lblDaThanhToan.setFont(new java.awt.Font("Segoe UI", 1, 13)); // NOI18N
        lblDaThanhToan.setText("Đã thanh toán cho đối tác");

        chkChuyenHang.setText("Hoàn thành nhập hàng");
        chkChuyenHang.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                chkChuyenHangMouseClicked(evt);
            }
        });

        lblTongTienTitle.setFont(new java.awt.Font("Segoe UI", 1, 13)); // NOI18N
        lblTongTienTitle.setText("Tổng tiền cần thanh toán");

        lblTrangThai.setFont(new java.awt.Font("Segoe UI", 1, 13)); // NOI18N
        lblTrangThai.setText("Trạng thái");

        javax.swing.GroupLayout pnlThongTinKhacLayout = new javax.swing.GroupLayout(pnlThongTinKhac);
        pnlThongTinKhac.setLayout(pnlThongTinKhacLayout);
        pnlThongTinKhacLayout.setHorizontalGroup(
            pnlThongTinKhacLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlThongTinKhacLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlThongTinKhacLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblTongTien, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jSeparator4)
                    .addComponent(jSeparator3, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(txtDaThanhToan)
                    .addGroup(pnlThongTinKhacLayout.createSequentialGroup()
                        .addComponent(lblTrangThai)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(lblDaThanhToan, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblTongTienTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(chkThanhToan, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(chkChuyenHang, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        pnlThongTinKhacLayout.setVerticalGroup(
            pnlThongTinKhacLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlThongTinKhacLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblTongTienTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblTongTien, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblDaThanhToan)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(txtDaThanhToan, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblTrangThai)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chkChuyenHang)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chkThanhToan)
                .addContainerGap())
        );

        jSeparator2.setOrientation(javax.swing.SwingConstants.VERTICAL);

        lblDoiTac.setFont(new java.awt.Font("Segoe UI", 1, 13)); // NOI18N
        lblDoiTac.setText("Đối tác");

        txtNgayHoanThanh.setDate(new Date());
        txtNgayHoanThanh.setOpaque(false);

        lblMaNV.setFont(new java.awt.Font("Segoe UI", 1, 13)); // NOI18N
        lblMaNV.setText("Người lập");

        txtNgayThucHien.setDate(new Date());
        txtNgayThucHien.setOpaque(false);

        lblLoaiDT.setFont(new java.awt.Font("Segoe UI", 1, 13)); // NOI18N
        lblLoaiDT.setText("Loại đối tác");

        lblLoaiPhieu.setFont(new java.awt.Font("Segoe UI", 1, 13)); // NOI18N
        lblLoaiPhieu.setText("Loại phiếu");

        lblGhiChu.setFont(new java.awt.Font("Segoe UI", 1, 13)); // NOI18N
        lblGhiChu.setText("Ghi chú");

        lblNgayHoanThanh.setFont(new java.awt.Font("Segoe UI", 1, 13)); // NOI18N
        lblNgayHoanThanh.setText("Ngày hoàn thành");

        btnGrpLoaiPhieu.add(rdoPhieuXuat);
        rdoPhieuXuat.setText("Phiếu xuất");

        lblNgayHoanThanh1.setFont(new java.awt.Font("Segoe UI", 1, 13)); // NOI18N
        lblNgayHoanThanh1.setText("Kho");

        lblNgayThucHien.setFont(new java.awt.Font("Segoe UI", 1, 13)); // NOI18N
        lblNgayThucHien.setText("Ngày thực hiện");

        cboKho.setEditable(true);
        cboKho.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboKhoActionPerformed(evt);
            }
        });

        cboLoaiDT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboLoaiDTActionPerformed(evt);
            }
        });

        lblNgayLap.setFont(new java.awt.Font("Segoe UI", 1, 13)); // NOI18N
        lblNgayLap.setText("Ngày lập");

        txtNgayLap.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(new java.text.SimpleDateFormat("dd-MM-yyyy HH:mm:ss"))));
        txtNgayLap.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtNgayLap.setFocusable(false);

        btnGrpLoaiPhieu.add(rdoPhieuNhap);
        rdoPhieuNhap.setSelected(true);
        rdoPhieuNhap.setText("Phiếu nhập");
        rdoPhieuNhap.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                rdoPhieuNhapStateChanged(evt);
            }
        });

        txtGhiChu.setColumns(20);
        txtGhiChu.setLineWrap(true);
        txtGhiChu.setRows(5);
        txtGhiChu.setWrapStyleWord(true);
        txtGhiChu.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtGhiChuFocusGained(evt);
            }
        });
        pnlGhiChu.setViewportView(txtGhiChu);

        txtMaNV.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtMaNV.setFocusable(false);

        javax.swing.GroupLayout pnlThongTinLayout = new javax.swing.GroupLayout(pnlThongTin);
        pnlThongTin.setLayout(pnlThongTinLayout);
        pnlThongTinLayout.setHorizontalGroup(
            pnlThongTinLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlThongTinLayout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addGroup(pnlThongTinLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lblMaNV, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblNgayHoanThanh1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblLoaiPhieu, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblNgayLap, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblGhiChu, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlThongTinLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlThongTinLayout.createSequentialGroup()
                        .addGroup(pnlThongTinLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlThongTinLayout.createSequentialGroup()
                                .addComponent(rdoPhieuNhap)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(rdoPhieuXuat))
                            .addComponent(txtMaNV)
                            .addComponent(txtNgayLap)
                            .addComponent(cboKho, 0, 302, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(pnlThongTinLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlThongTinLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(lblDoiTac, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(lblNgayHoanThanh, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(lblLoaiDT, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(lblNgayThucHien))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlThongTinLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cboLoaiDT, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtNgayThucHien, javax.swing.GroupLayout.DEFAULT_SIZE, 237, Short.MAX_VALUE)
                            .addComponent(txtNgayHoanThanh, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cboDoiTac, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(pnlGhiChu))
                .addContainerGap())
        );
        pnlThongTinLayout.setVerticalGroup(
            pnlThongTinLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlThongTinLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlThongTinLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblLoaiDT)
                    .addComponent(cboLoaiDT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblLoaiPhieu)
                    .addComponent(rdoPhieuNhap)
                    .addComponent(rdoPhieuXuat))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlThongTinLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblDoiTac)
                    .addComponent(cboDoiTac, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblNgayHoanThanh1)
                    .addComponent(cboKho, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlThongTinLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(pnlThongTinLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblMaNV)
                        .addComponent(txtMaNV, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblNgayThucHien, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(txtNgayThucHien, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlThongTinLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtNgayHoanThanh, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblNgayHoanThanh, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(pnlThongTinLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblNgayLap)
                        .addComponent(txtNgayLap, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlThongTinLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlThongTinLayout.createSequentialGroup()
                        .addComponent(lblGhiChu)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(pnlGhiChu, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );

        javax.swing.GroupLayout pnlChiTietLayout = new javax.swing.GroupLayout(pnlChiTiet);
        pnlChiTiet.setLayout(pnlChiTietLayout);
        pnlChiTietLayout.setHorizontalGroup(
            pnlChiTietLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlChiTietLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlChiTietLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblThongTinPhieu, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(peparator)
                    .addGroup(pnlChiTietLayout.createSequentialGroup()
                        .addGroup(pnlChiTietLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlChiTietLayout.createSequentialGroup()
                                .addComponent(lblTimKiemCT)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtTimKiemCTPhieu)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(lblTimKiemCT2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(cboTimKiemCTPhieu, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(pnlTblCTPhieu_sub, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblCTP, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(pnlChiTietLayout.createSequentialGroup()
                                .addComponent(pnlNutDieuHuong, javax.swing.GroupLayout.PREFERRED_SIZE, 373, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(pnlChucNangMoRong, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlChiTietLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(pnlChucNang, javax.swing.GroupLayout.DEFAULT_SIZE, 163, Short.MAX_VALUE)
                            .addComponent(lblChucNang, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(pnlChiTietLayout.createSequentialGroup()
                        .addComponent(pnlThongTin, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(0, 0, 0)
                        .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(pnlThongTinKhac, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        pnlChiTietLayout.setVerticalGroup(
            pnlChiTietLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlChiTietLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblThongTinPhieu)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlChiTietLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnlThongTinKhac, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnlThongTin, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jSeparator2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(peparator, javax.swing.GroupLayout.PREFERRED_SIZE, 3, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlChiTietLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCTP)
                    .addComponent(lblChucNang))
                .addGap(8, 8, 8)
                .addGroup(pnlChiTietLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlChiTietLayout.createSequentialGroup()
                        .addGroup(pnlChiTietLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblTimKiemCT)
                            .addComponent(txtTimKiemCTPhieu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblTimKiemCT2)
                            .addComponent(cboTimKiemCTPhieu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(pnlTblCTPhieu_sub, javax.swing.GroupLayout.DEFAULT_SIZE, 330, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlChiTietLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(pnlNutDieuHuong, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(pnlChucNangMoRong, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(pnlChucNang, javax.swing.GroupLayout.DEFAULT_SIZE, 403, Short.MAX_VALUE))
                .addContainerGap())
        );

        tabs.addTab("Thông tin phiếu", pnlChiTiet);

        pnlDanhSach.setOpaque(false);

        tblPhieu.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblPhieu.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tblPhieu.getTableHeader().setReorderingAllowed(false);
        tblPhieu.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblPhieuMouseClicked(evt);
            }
        });
        scrollPane2.setViewportView(tblPhieu);

        lblTimKiemCT1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/stoman/icons/search_24px.png"))); // NOI18N

        txtTimKiemPhieu.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtTimKiemPhieuKeyReleased(evt);
            }
        });

        lblTimKiemPhieu2.setText("theo");

        cboTimKiemPhieu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboTimKiemPhieuActionPerformed(evt);
            }
        });

        lblDanhSachPhieu.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblDanhSachPhieu.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblDanhSachPhieu.setText("DANH SÁCH PHIẾU");

        pnlChuThich.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Chú thích", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12))); // NOI18N
        pnlChuThich.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N

        lblMau2.setText("Phiếu chưa hoàn thành thanh toán");

        txtMau3.setBackground(new java.awt.Color(255, 153, 153));
        txtMau3.setBorder(null);
        txtMau3.setFocusable(false);

        lblMau4.setText("Phiếu chưa thực hiện");

        txtMau4.setBackground(new java.awt.Color(102, 255, 153));
        txtMau4.setBorder(null);
        txtMau4.setFocusable(false);

        lblMau1.setText("Phiếu đã hoàn thành");

        txtMau1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        txtMau1.setFocusable(false);

        txtMau2.setBackground(new java.awt.Color(255, 204, 102));
        txtMau2.setBorder(null);
        txtMau2.setFocusable(false);

        lblMau3.setText("Phiếu chưa hoàn thành chuyển hàng");

        javax.swing.GroupLayout pnlChuThichLayout = new javax.swing.GroupLayout(pnlChuThich);
        pnlChuThich.setLayout(pnlChuThichLayout);
        pnlChuThichLayout.setHorizontalGroup(
            pnlChuThichLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlChuThichLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(pnlChuThichLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtMau1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtMau2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlChuThichLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lblMau3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblMau1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlChuThichLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtMau4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtMau3, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlChuThichLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(lblMau4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblMau2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        pnlChuThichLayout.setVerticalGroup(
            pnlChuThichLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlChuThichLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlChuThichLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblMau4)
                    .addComponent(txtMau3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblMau1)
                    .addComponent(txtMau1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlChuThichLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtMau4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblMau2)
                    .addComponent(txtMau2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblMau3))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pnlThongKe.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Thống kê", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12))); // NOI18N
        pnlThongKe.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        pnlThongKe.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 20, 5));

        pnlHoanThanh.setLayout(new java.awt.GridLayout(0, 1, 0, 10));

        lblHoanThanh.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        lblHoanThanh.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblHoanThanh.setText("Phiếu hoàn thành");
        pnlHoanThanh.add(lblHoanThanh);

        lblSoLuongHoanThanh.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblSoLuongHoanThanh.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblSoLuongHoanThanh.setText("0");
        pnlHoanThanh.add(lblSoLuongHoanThanh);

        pnlThongKe.add(pnlHoanThanh);

        pnlChuaThanhToan.setLayout(new java.awt.GridLayout(0, 1, 0, 10));

        lblThanhToan.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        lblThanhToan.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblThanhToan.setText("Phiếu chưa thanh toán ");
        pnlChuaThanhToan.add(lblThanhToan);

        lblSoLuongThanhToan.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblSoLuongThanhToan.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblSoLuongThanhToan.setText("0");
        pnlChuaThanhToan.add(lblSoLuongThanhToan);

        pnlThongKe.add(pnlChuaThanhToan);

        pnlChuaChuyenHang.setLayout(new java.awt.GridLayout(0, 1, 0, 10));

        lblChuyenHang.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        lblChuyenHang.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblChuyenHang.setText("Phiếu chưa chuyển hàng");
        pnlChuaChuyenHang.add(lblChuyenHang);

        lblSoLuongChuyenHang.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblSoLuongChuyenHang.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblSoLuongChuyenHang.setText("0");
        pnlChuaChuyenHang.add(lblSoLuongChuyenHang);

        pnlThongKe.add(pnlChuaChuyenHang);
        pnlThongKe.add(jSeparator5);

        pnlTongPhieu.setLayout(new java.awt.GridLayout(0, 1, 0, 10));

        lblTongPhieu.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        lblTongPhieu.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTongPhieu.setText("Tổng số phiếu");
        pnlTongPhieu.add(lblTongPhieu);

        lblSoLuongPhieu.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblSoLuongPhieu.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblSoLuongPhieu.setText("0");
        pnlTongPhieu.add(lblSoLuongPhieu);

        pnlThongKe.add(pnlTongPhieu);

        pnlLoaiPhieu.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(179, 217, 255), 2));
        pnlLoaiPhieu.setLayout(new java.awt.GridLayout(1, 0));

        pnlPhieuNhap.setLayout(new java.awt.BorderLayout());

        lblPhieuNhap.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblPhieuNhap.setText("Phiếu nhập");
        lblPhieuNhap.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblPhieuNhapMouseClicked(evt);
            }
        });
        pnlPhieuNhap.add(lblPhieuNhap, java.awt.BorderLayout.CENTER);

        pnlLoaiPhieu.add(pnlPhieuNhap);

        pnlPhieuXuat.setLayout(new java.awt.BorderLayout());

        lblPhieuXuat.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblPhieuXuat.setText("Phiếu xuất");
        lblPhieuXuat.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblPhieuXuatMouseClicked(evt);
            }
        });
        pnlPhieuXuat.add(lblPhieuXuat, java.awt.BorderLayout.CENTER);

        pnlLoaiPhieu.add(pnlPhieuXuat);

        javax.swing.GroupLayout pnlDanhSachLayout = new javax.swing.GroupLayout(pnlDanhSach);
        pnlDanhSach.setLayout(pnlDanhSachLayout);
        pnlDanhSachLayout.setHorizontalGroup(
            pnlDanhSachLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlDanhSachLayout.createSequentialGroup()
                .addGroup(pnlDanhSachLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblDanhSachPhieu, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(pnlDanhSachLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(pnlDanhSachLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(pnlDanhSachLayout.createSequentialGroup()
                                .addComponent(lblTimKiemCT1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtTimKiemPhieu)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(lblTimKiemPhieu2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(cboTimKiemPhieu, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(scrollPane2)
                            .addGroup(pnlDanhSachLayout.createSequentialGroup()
                                .addComponent(pnlThongKe, javax.swing.GroupLayout.DEFAULT_SIZE, 522, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(pnlChuThich, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap())
            .addGroup(pnlDanhSachLayout.createSequentialGroup()
                .addGap(378, 378, 378)
                .addComponent(pnlLoaiPhieu, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlDanhSachLayout.setVerticalGroup(
            pnlDanhSachLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlDanhSachLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblDanhSachPhieu)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(pnlLoaiPhieu, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlDanhSachLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTimKiemCT1)
                    .addComponent(txtTimKiemPhieu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblTimKiemPhieu2)
                    .addComponent(cboTimKiemPhieu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 487, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlDanhSachLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(pnlThongKe, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnlChuThich, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        tabs.addTab("Danh sách phiếu nhập xuất", pnlDanhSach);

        pnlBackground.add(tabs, java.awt.BorderLayout.CENTER);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlBackground, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlBackground, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tblPhieuMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblPhieuMouseClicked
        // TODO add your handling code here:
        if (evt.getClickCount() < 2) {
            return;
        }
        //this.rowPhieu = ((Integer) tblPhieu.getValueAt(tblPhieu.getSelectedRow(), 0)) - 1;
        this.rowPhieu = tblPhieu.getSelectedRow();
        if (tblPhieu.getValueAt(rowPhieu, tblPhieu.getSelectedColumn()) == null) {
            return;
        }
        edit();
    }//GEN-LAST:event_tblPhieuMouseClicked

    private void btnThemCTPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnThemCTPActionPerformed
        this.insertCT();
    }//GEN-LAST:event_btnThemCTPActionPerformed

    private void cboLoaiHHActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboLoaiHHActionPerformed
        this.fillToComboBoxHangHoa();
    }//GEN-LAST:event_cboLoaiHHActionPerformed

    private void btnXoaCTPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnXoaCTPActionPerformed
        this.deleteCT();
    }//GEN-LAST:event_btnXoaCTPActionPerformed

    private void txtTimKiemPhieuKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtTimKiemPhieuKeyReleased
        // TODO add your handling code here:
        searchPhieu();
    }//GEN-LAST:event_txtTimKiemPhieuKeyReleased

    private void cboTimKiemPhieuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboTimKiemPhieuActionPerformed
        // TODO add your handling code here:
        txtTimKiemPhieu.setText("");
        searchPhieu();
    }//GEN-LAST:event_cboTimKiemPhieuActionPerformed

    private void tblCTPhieu_ChiTietPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_tblCTPhieu_ChiTietPropertyChange
        // TODO add your handling code here:
        int row = tblCTPhieu_ChiTiet.getSelectedRow();
        this.updateThanhTienCTPhieu(tblCTPhieu_ChiTiet, row);
    }//GEN-LAST:event_tblCTPhieu_ChiTietPropertyChange

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        // TODO add your handling code here:
        this.timer.stop();
    }//GEN-LAST:event_formWindowClosed

    private void btnInPhieuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInPhieuActionPerformed
        // TODO add your handling code here:
        printReport();
    }//GEN-LAST:event_btnInPhieuActionPerformed

    private void btnXuatFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnXuatFileActionPerformed
        // TODO add your handling code here:
        exportReport();
    }//GEN-LAST:event_btnXuatFileActionPerformed

    private void cboTimKiemCTPhieuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboTimKiemCTPhieuActionPerformed
        // TODO add your handling code here:
        txtTimKiemCTPhieu.setText("");
        searchCTPhieu();
    }//GEN-LAST:event_cboTimKiemCTPhieuActionPerformed

    private void txtTimKiemCTPhieuKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtTimKiemCTPhieuKeyReleased
        // TODO add your handling code here:
        searchCTPhieu();
    }//GEN-LAST:event_txtTimKiemCTPhieuKeyReleased

    private void btnXuatMaPhieuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnXuatMaPhieuActionPerformed
        // TODO add your handling code here:
        createQRCode();
    }//GEN-LAST:event_btnXuatMaPhieuActionPerformed

    private void btnChiTietActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChiTietActionPerformed
        // TODO add your handling code here:
        ChiTietPhieuDialog.setVisible(true);
    }//GEN-LAST:event_btnChiTietActionPerformed

    private void btnMoiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMoiActionPerformed
        // TODO add your handling code here:
        isInsert = true;
        if (btnMoi.getText().equals("Phiếu mới")) {
            this.clearForm();
            ChiTietPhieuDialog.setVisible(true);
            return;
        }
        if (btnMoi.getText().equals("Thêm phiếu")) {
            this.insertPhieu();
            btnMoi.setText("Phiếu mới");
            btnMoi.setIcon(new ImageIcon(getClass().getResource("/com/stoman/icons/icons8_document_32px.png")));
            btnChiTiet.setEnabled(false);
            isInsert = false;
        }

    }//GEN-LAST:event_btnMoiActionPerformed

    private void btnSuaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSuaActionPerformed
        // TODO add your handling code here:
        this.updatePhieu();
    }//GEN-LAST:event_btnSuaActionPerformed

    private void btnXoaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnXoaActionPerformed
        // TODO add your handling code here:
        this.deletePhieu();
    }//GEN-LAST:event_btnXoaActionPerformed

    private void btnLastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLastActionPerformed
        // TODO add your handling code here:
        last();
    }//GEN-LAST:event_btnLastActionPerformed

    private void btnNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNextActionPerformed
        // TODO add your handling code here:
        next();
    }//GEN-LAST:event_btnNextActionPerformed

    private void btnPrevActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrevActionPerformed
        // TODO add your handling code here:
        prev();
    }//GEN-LAST:event_btnPrevActionPerformed

    private void btnFirstActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFirstActionPerformed
        // TODO add your handling code here:
        first();
    }//GEN-LAST:event_btnFirstActionPerformed

    private void cboKhoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboKhoActionPerformed
        // TODO add your handling code here:
        cboKho.setEnabled(!isUpdate);
        updateCT();
    }//GEN-LAST:event_cboKhoActionPerformed

    private void chkChuyenHangMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_chkChuyenHangMouseClicked
        // TODO add your handling code here:
        this.updateStatus();
    }//GEN-LAST:event_chkChuyenHangMouseClicked

    private void cboLoaiDTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboLoaiDTActionPerformed
        // TODO add your handling code here:
        fillToComboBoxDoiTac();
    }//GEN-LAST:event_cboLoaiDTActionPerformed

    private void rdoPhieuNhapStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_rdoPhieuNhapStateChanged
        // TODO add your handling code here:
        this.fillToTableCTPhieu();
        this.fillToComboBoxHangHoa();
        this.updateUIPhieu();
    }//GEN-LAST:event_rdoPhieuNhapStateChanged

    private void chkThanhToanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkThanhToanActionPerformed
        if (chkThanhToan.isSelected()) {
            txtDaThanhToan.setToolTipText(txtDaThanhToan.getText());
            txtDaThanhToan.setText(lblTongTien.getText());
        } else {
            txtDaThanhToan.setText(txtDaThanhToan.getToolTipText());
        }

        txtDaThanhToan.setFocusable(!chkThanhToan.isSelected());
    }//GEN-LAST:event_chkThanhToanActionPerformed

    private void lblPhieuNhapMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblPhieuNhapMouseClicked
        // TODO add your handling code here:
        this.isPhieuNhap = true;
        updateStatusChonLoaiPhieu();
        fillToTablePhieu();
    }//GEN-LAST:event_lblPhieuNhapMouseClicked

    private void lblPhieuXuatMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblPhieuXuatMouseClicked
        // TODO add your handling code here:
        this.isPhieuNhap = false;
        updateStatusChonLoaiPhieu();
        fillToTablePhieu();
    }//GEN-LAST:event_lblPhieuXuatMouseClicked

    private void tblCTPhieu_ChiTietKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tblCTPhieu_ChiTietKeyReleased
        // TODO add your handling code here:
        disableEnterCellNextLine(tblCTPhieu_ChiTiet);
    }//GEN-LAST:event_tblCTPhieu_ChiTietKeyReleased

    private void tblCTPhieuKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tblCTPhieuKeyReleased
        // TODO add your handling code here:
        disableEnterCellNextLine(tblCTPhieu);
    }//GEN-LAST:event_tblCTPhieuKeyReleased

    private void tblCTPhieuPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_tblCTPhieuPropertyChange
        // TODO add your handling code here:
        int row = tblCTPhieu.getSelectedRow();
        this.updateThanhTienCTPhieu(tblCTPhieu, row);
    }//GEN-LAST:event_tblCTPhieuPropertyChange

    private void tblCTPhieuMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblCTPhieuMouseClicked
        // TODO add your handling code here:
        mapSelectionTable(tblCTPhieu, tblCTPhieu_ChiTiet);
    }//GEN-LAST:event_tblCTPhieuMouseClicked

    private void tblCTPhieu_ChiTietMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblCTPhieu_ChiTietMouseClicked
        // TODO add your handling code here:
        mapSelectionTable(tblCTPhieu_ChiTiet, tblCTPhieu);
    }//GEN-LAST:event_tblCTPhieu_ChiTietMouseClicked

    private void btnHoanTacActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHoanTacActionPerformed
        // TODO add your handling code here:
        fillToTableCTPhieu();
        updateBtnMoi();
    }//GEN-LAST:event_btnHoanTacActionPerformed

    private void txtGhiChuFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtGhiChuFocusGained
        // TODO add your handling code here:
        txtGhiChu.selectAll();
    }//GEN-LAST:event_txtGhiChuFocusGained

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            javax.swing.UIManager.setLookAndFeel(new FlatIntelliJLaf());
        } catch (UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PhieuNhapXuatKhoJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>


        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                PhieuNhapXuatKhoJDialog dialog = new PhieuNhapXuatKhoJDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JDialog ChiTietPhieuDialog;
    private javax.swing.JDialog QRCodeDialog;
    private javax.swing.JButton btnChiTiet;
    private javax.swing.JButton btnFirst;
    private javax.swing.ButtonGroup btnGrpLoaiPhieu;
    private javax.swing.JButton btnHoanTac;
    private javax.swing.JButton btnInPhieu;
    private javax.swing.JButton btnLast;
    private javax.swing.JButton btnMoi;
    private javax.swing.JButton btnNext;
    private javax.swing.JButton btnPrev;
    private javax.swing.JButton btnSua;
    private javax.swing.JButton btnThemCTP;
    private javax.swing.JButton btnXoa;
    private javax.swing.JButton btnXoaCTP;
    private javax.swing.JButton btnXuatFile;
    private javax.swing.JButton btnXuatMaPhieu;
    private javax.swing.JComboBox<String> cboDoiTac;
    private javax.swing.JComboBox<String> cboHangHoa;
    private javax.swing.JComboBox<String> cboKho;
    private javax.swing.JComboBox<String> cboLoaiDT;
    private javax.swing.JComboBox<String> cboLoaiHH;
    private javax.swing.JComboBox<String> cboTimKiemCTPhieu;
    private javax.swing.JComboBox<String> cboTimKiemPhieu;
    private javax.swing.JCheckBox chkChuyenHang;
    private javax.swing.JCheckBox chkThanhToan;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JLabel lblCTP;
    private javax.swing.JLabel lblChucNang;
    private javax.swing.JLabel lblChuyenHang;
    private javax.swing.JLabel lblDaThanhToan;
    private javax.swing.JLabel lblDanhSachPhieu;
    private javax.swing.JLabel lblDoiTac;
    private javax.swing.JLabel lblGhiChu;
    private javax.swing.JLabel lblHoanThanh;
    private javax.swing.JLabel lblLoaiDT;
    private javax.swing.JLabel lblLoaiHH;
    private javax.swing.JLabel lblLoaiPhieu;
    private javax.swing.JLabel lblMaNV;
    private javax.swing.JLabel lblMau1;
    private javax.swing.JLabel lblMau2;
    private javax.swing.JLabel lblMau3;
    private javax.swing.JLabel lblMau4;
    private javax.swing.JLabel lblNgayHoanThanh;
    private javax.swing.JLabel lblNgayHoanThanh1;
    private javax.swing.JLabel lblNgayLap;
    private javax.swing.JLabel lblNgayThucHien;
    private javax.swing.JLabel lblPhieuNhap;
    private javax.swing.JLabel lblPhieuXuat;
    private javax.swing.JLabel lblQRCodeImage;
    private javax.swing.JLabel lblSoLuongChuyenHang;
    private javax.swing.JLabel lblSoLuongHoanThanh;
    private javax.swing.JLabel lblSoLuongPhieu;
    private javax.swing.JLabel lblSoLuongThanhToan;
    private javax.swing.JLabel lblTenHH;
    private javax.swing.JLabel lblThanhToan;
    private javax.swing.JLabel lblThongTinPhieu;
    private javax.swing.JLabel lblTimKiemCT;
    private javax.swing.JLabel lblTimKiemCT1;
    private javax.swing.JLabel lblTimKiemCT2;
    private javax.swing.JLabel lblTimKiemPhieu2;
    private javax.swing.JLabel lblTongPhieu;
    private javax.swing.JLabel lblTongTien;
    private javax.swing.JLabel lblTongTienTitle;
    private javax.swing.JLabel lblTrangThai;
    private javax.swing.JSeparator peparator;
    private javax.swing.JPanel pnlBackground;
    private javax.swing.JPanel pnlBackgroundDialog;
    private javax.swing.JPanel pnlBackgroundQR;
    private javax.swing.JPanel pnlChiTiet;
    private javax.swing.JPanel pnlChuThich;
    private javax.swing.JPanel pnlChuaChuyenHang;
    private javax.swing.JPanel pnlChuaThanhToan;
    private javax.swing.JPanel pnlChucNang;
    private javax.swing.JPanel pnlChucNangCTP;
    private javax.swing.JPanel pnlChucNangMoRong;
    private javax.swing.JPanel pnlDanhSach;
    private javax.swing.JScrollPane pnlGhiChu;
    private javax.swing.JPanel pnlHoanThanh;
    private javax.swing.JPanel pnlLoaiPhieu;
    private javax.swing.JPanel pnlNutDieuHuong;
    private javax.swing.JPanel pnlPhieuNhap;
    private javax.swing.JPanel pnlPhieuXuat;
    private javax.swing.JScrollPane pnlTblCTPhieu_main;
    private javax.swing.JScrollPane pnlTblCTPhieu_sub;
    private javax.swing.JPanel pnlThongKe;
    private javax.swing.JPanel pnlThongTin;
    private javax.swing.JPanel pnlThongTinCTP;
    private javax.swing.JPanel pnlThongTinKhac;
    private javax.swing.JPanel pnlTongPhieu;
    private javax.swing.JRadioButton rdoPhieuNhap;
    private javax.swing.JRadioButton rdoPhieuXuat;
    private javax.swing.JScrollPane scrollPane2;
    private javax.swing.JTabbedPane tabs;
    private javax.swing.JTable tblCTPhieu;
    private javax.swing.JTable tblCTPhieu_ChiTiet;
    private javax.swing.JTable tblPhieu;
    private javax.swing.JFormattedTextField txtDaThanhToan;
    private javax.swing.JTextArea txtGhiChu;
    private javax.swing.JTextField txtMaNV;
    private javax.swing.JTextField txtMau1;
    private javax.swing.JTextField txtMau2;
    private javax.swing.JTextField txtMau3;
    private javax.swing.JTextField txtMau4;
    private com.toedter.calendar.JDateChooser txtNgayHoanThanh;
    private javax.swing.JFormattedTextField txtNgayLap;
    private com.toedter.calendar.JDateChooser txtNgayThucHien;
    private javax.swing.JTextField txtTimKiemCTPhieu;
    private javax.swing.JTextField txtTimKiemPhieu;
    // End of variables declaration//GEN-END:variables

    private PhieuDAO pDAO = new PhieuDAO();
    private ChiTietPhieuDAO ctpDAO = new ChiTietPhieuDAO();
    private LoaiDoiTacDAO ldtDAO = new LoaiDoiTacDAO();
    private DoiTacDAO dtDAO = new DoiTacDAO();
    private LuuTruDAO ltDAO = new LuuTruDAO();
    private LoaiHangHoaDAO lhhDAO = new LoaiHangHoaDAO();
    private HangHoaDAO hhDAO = new HangHoaDAO();
    private KhoDAO kDAO = new KhoDAO();
    private NhanVienDAO nvDAO = new NhanVienDAO();
    private ProcedureDAO spDAO = new ProcedureDAO();

    private DefaultTableModel modelPhieu;
    private DefaultTableModel modelCTPhieu;

    private TableRowSorter<TableModel> sorterPhieu;
    private TableRowSorter<TableModel> sorterCTPhieu;
    private TableRowSorter<TableModel> sorterCTPhieu_ChiTiet;

    private final String numFormat = "#,##0.0";
    private final String dateFormat = "dd-MM-yyyy";
    private final String dateTimeFormat = "dd-MM-yyyy HH:mm:ss";
    private final String reportPath = "/com/stoman/reports/InPhieuNhapXuatKho.jrxml";

    private boolean isUpdate = false;
    private boolean isInsert = false;

    private int rowPhieu = -1;

    private void init() {
        this.setLocationRelativeTo(null);
        this.setModal(false);
        this.initDialogOther();
        
        this.formatTable();
        this.updateStatus();
        this.updateStatusChonLoaiPhieu();

        this.refreshForm();

        this.fillToComboBoxTimKiemCTPhieu();
        this.fillToComboBoxTimKiemPhieu();
        tabs.setSelectedIndex(1);

        this.timer.start();
    }

    void initDialogOther() {
        ChiTietPhieuDialog.pack();
        ChiTietPhieuDialog.setLocationRelativeTo(null);
        ChiTietPhieuDialog.setModalityType(ModalityType.APPLICATION_MODAL);
        ChiTietPhieuDialog.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);

        ChiTietPhieuDialog.addWindowListener(new java.awt.event.WindowAdapter() {
            @Override
            public void windowClosing(java.awt.event.WindowEvent e) {
                updateBtnMoi();
            }
        });

        QRCodeDialog.pack();
        QRCodeDialog.setLocationRelativeTo(null);
        QRCodeDialog.setModalityType(ModalityType.APPLICATION_MODAL);
        QRCodeDialog.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
    }

    private boolean isPhieuNhap = true;

    private void updateStatusChonLoaiPhieu() {
        if (isPhieuNhap) {
            pnlPhieuXuat.setBackground(new Color(242, 242, 242));
            pnlPhieuNhap.setBackground(new Color(179, 217, 255));
        } else {
            pnlPhieuNhap.setBackground(new Color(242, 242, 242));
            pnlPhieuXuat.setBackground(new Color(179, 217, 255));
        }
    }
    
    private void updateBtnMoi() {
        if (isInsert == true) {
            if (modelCTPhieu.getRowCount() == 0) {
                btnMoi.setText("Phiếu mới");
                btnMoi.setIcon(new ImageIcon(getClass().getResource("/com/stoman/icons/icons8_document_32px.png")));
                btnChiTiet.setEnabled(false);
            } else {
                btnMoi.setText("Thêm phiếu");
                btnMoi.setIcon(new ImageIcon(getClass().getResource("/com/stoman/icons/icons8_new_copy_32px.png")));
                btnChiTiet.setEnabled(true);
            }
        }
    }

    // Đổ dữ liệu phiếu nhập xuất
    private SwingWorker workerPhieu;

    private void fillToTablePhieu() {
        if (workerPhieu != null) {
            workerPhieu.cancel(true);
        }

        modelPhieu.setRowCount(0);

        try {
            List<Phieu> list = pDAO.selectByLoaiPhieu(isPhieuNhap);

            workerPhieu = new SwingWorker() {
                @Override
                protected Object doInBackground() throws Exception {
                    Thread.sleep(100);
                    int i = 1;
                    int hoanThanh = 0;
                    int cThanhToan = 0;
                    int cVanChuyen = 0;
                    int tongPhieu = 0;

                    for (Phieu p : list) {
                        if (isCancelled()) {
                            modelPhieu.setRowCount(0);
                            break;
                        }
                        int maLT = ctpDAO.getOnlyOneMaLT(p.getMaPhieu());
                        if (maLT == 0) {
                            continue;
                        }
                        int maKho = ltDAO.getMaKho(maLT);
                        Kho k = kDAO.selectByID(maKho);
                        if (p.isTrangThai()) {
                            if (p.isTinhTrangThanhToan()) {
                                hoanThanh++;
                            } else {
                                cThanhToan++;
                            }
                        } else {
                            cVanChuyen++;
                            if (!p.isTinhTrangThanhToan()) {
                                cThanhToan++;
                            }
                        }
                        tongPhieu++;

                        modelPhieu.addRow(new Object[]{
                            i++,
                            dtDAO.getTenDT(p.getMaDT()),
                            p.isLoai() ? "Nhập" : "Xuất",
                            k.getMaKho(),
                            p.isTrangThai() ? "Đã hoàn thành" : "Chưa hoàn thành",
                            p.isTinhTrangThanhToan() ? "Đã xong" : "Chưa xong",
                            XDate.toString(p.getNgThucHien(), dateFormat),
                            XDate.toString(p.getNgHoanThanh(), dateFormat),
                            XDate.toString(p.getNgayLap(), dateTimeFormat),
                            p
                        });

                        lblSoLuongPhieu.setText(String.valueOf(tongPhieu));
                        lblSoLuongHoanThanh.setText(String.valueOf(hoanThanh));
                        lblSoLuongThanhToan.setText(String.valueOf(cThanhToan));
                        lblSoLuongChuyenHang.setText(String.valueOf(cVanChuyen));
                    }
                    return null;
                }

                @Override
                protected void done() {
                    if (rowPhieu > 0) {
                        tblPhieu.setRowSelectionInterval(rowPhieu, rowPhieu);
                    }
                }

            };
            workerPhieu.execute();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // Đổ dữ liệu chi tiết phiếu
    private SwingWorker workerCTPhieu;

    private void fillToTableCTPhieu() {
        if (workerCTPhieu != null) {
            workerCTPhieu.cancel(true);
        }

        listCT.clear();
        modelCTPhieu.setRowCount(0);

        Kho k = (Kho) cboKho.getSelectedItem();
        try {
            String maPhieu = tblCTPhieu.getToolTipText();
            if (maPhieu == null) {
                return;
            }
            List<ChiTietPhieu> list = ctpDAO.selectByMaPhieuTest(Integer.parseInt(maPhieu));
            if (list.size() < 1) {
                return;
            }
            workerCTPhieu = new SwingWorker() {
                @Override
                protected Object doInBackground() throws Exception {
                    Thread.sleep(100);
                    int i = 1;
                    double tongTien = 0;
                    double ton = 0;
                    for (ChiTietPhieu ctp : list) {
                        if (isCancelled()) {
                            break;
                        }
                        String maHH = ltDAO.selectByID(ctp.getMaLT()).getMaHH();
                        HangHoa hh = hhDAO.selectByID(maHH);
                        tongTien += ctp.getSoLuong() * ctp.getDonGia();
                        ton = ltDAO.getSoLuong(k.getMaKho(), hh.getMaHH());
                        if (rdoPhieuXuat.isSelected() && ctp.isTrangThai()) {
                            ton += ctp.getSoLuong();
                        }

                        modelCTPhieu.addRow(new Object[]{
                            i++,
                            hh,
                            ctp.getSoLuong(),
                            XNumber.toString(ctp.getDonGia(), numFormat),
                            ctp.getMaCTP(),
                            XNumber.toString(ctp.getThanhTien(), numFormat),
                            ctp.isTrangThai(),
                            ton,
                            ltDAO.getMaLT(k.getMaKho(), hh.getMaHH())
                        });

                        listCT.add(hh);
                    }
                    tblCTPhieu.setModel(modelCTPhieu);
                    tblCTPhieu_ChiTiet.setModel(modelCTPhieu);
                    lblTongTien.setText(XNumber.toString(tongTien, numFormat));
                    if (isCancelled()) {
                        modelCTPhieu.setRowCount(0);
                    }
                    return null;
                }
            };
            workerCTPhieu.execute();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // Đổ dữ liệu ComboBox loại đối tác
    private void fillToComboBoxLoaiDT() {
        DefaultComboBoxModel model = new DefaultComboBoxModel();
        model.removeAllElements();
        try {
            boolean vaiTro = !rdoPhieuNhap.isSelected();
            List<LoaiDoiTac> list = ldtDAO.selectLDTonVaiTro(vaiTro);
            for (LoaiDoiTac ldt : list) {
                model.addElement(ldt);
            }
            cboLoaiDT.setModel(model);
            fillToComboBoxDoiTac();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // Đổ dữ liệu ComboBox đối tác
    private void fillToComboBoxDoiTac() {
        DefaultComboBoxModel model = new DefaultComboBoxModel();
        model.removeAllElements();
        try {
            LoaiDoiTac ldt = (LoaiDoiTac) cboLoaiDT.getSelectedItem();
            boolean vaiTro = !rdoPhieuNhap.isSelected();
            List<DoiTac> list = dtDAO.selectByLoaiDTandVaiTro(ldt.getMaLDT(), vaiTro);
            list.forEach(dt -> {
                model.addElement(dt);
            });
            cboDoiTac.setModel(model);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // Đổ dữ liệu vào ComboBox kho
    private void fillToComboBoxKho() {
        DefaultComboBoxModel model = new DefaultComboBoxModel();
        model.removeAllElements();
        try {
            List<Kho> list = kDAO.selectAll();
            for (Kho k : list) {
                model.addElement(k);
            }
            cboKho.setModel(model);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // Đổ dữ liệu ComboBox loại hàng hoá
    private void fillToComboBoxLoaiHH() {
        DefaultComboBoxModel model = new DefaultComboBoxModel();
        model.removeAllElements();
        try {
            List<LoaiHangHoa> list = lhhDAO.selectAll();
            for (LoaiHangHoa lhh : list) {
                model.addElement(lhh);
            }
            cboLoaiHH.setModel(model);
            fillToComboBoxHangHoa();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // Đổ dữ liệu ComboBox hàng hoá
    private void fillToComboBoxHangHoa() {
        DefaultComboBoxModel model = new DefaultComboBoxModel();
        model.removeAllElements();
        if (rdoPhieuNhap.isSelected()) {

        }
        try {
            LoaiHangHoa lhh = (LoaiHangHoa) cboLoaiHH.getSelectedItem();
            List<HangHoa> list;

            if (rdoPhieuNhap.isSelected()) {
                list = hhDAO.selectByLoaiHangHoa(lhh.getMaLHH());
            } else {
                list = hhDAO.selectByLoaiHangHoaCoLT(lhh.getMaLHH(), ((Kho) cboKho.getSelectedItem()).getMaKho());
            }

            for (HangHoa hh : list) {
                model.addElement(hh);
            }
            cboHangHoa.setModel(model);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // Lấy dữ liệu từ form phiếu nhập
    private Phieu getFormPhieu() {
        LoaiDoiTac ldt = (LoaiDoiTac) cboLoaiDT.getSelectedItem();
        Phieu p = new Phieu();
        p.setLoai(rdoPhieuNhap.isSelected());
        p.setMaDT(ldt.getMaLDT());
        p.setMaNV(txtMaNV.getToolTipText());
        if (!chkChuyenHang.isSelected()) {
            p.setNgHoanThanh(null);
        } else {
            p.setNgHoanThanh(txtNgayHoanThanh.getDate());
        }
        p.setNgThucHien(txtNgayThucHien.getDate());
        p.setNgayLap(XDate.toDate(txtNgayLap.getText(), dateTimeFormat));
        p.setTrangThai(chkChuyenHang.isSelected());
        p.setTinhTrangThanhToan(chkThanhToan.isSelected());
        p.setSoTienThanhToan(XNumber.toDouble(txtDaThanhToan.getText(), numFormat));
        p.setGhiChu(txtGhiChu.getText());
        return p;
    }

    // Nhập dữ liệu vào form phiếu nhập
    private void setFormPhieu(Phieu p) {
        int rowPhieuModel = tblPhieu.convertRowIndexToModel(this.rowPhieu);
        DoiTac dt = dtDAO.selectByID(p.getMaDT());
        LoaiDoiTac ldt = ldtDAO.selectByID(dt.getMaLDT());
        NhanVien nv = nvDAO.selectByID(p.getMaNV());
        Kho kho = kDAO.selectByID((Integer) tblPhieu.getModel().getValueAt(rowPhieuModel, 3));
        cboLoaiDT.setSelectedItem(ldt);
        cboDoiTac.setSelectedItem(dt);
        txtMaNV.setToolTipText(p.getMaNV());
        txtMaNV.setText(nv.getTenNV());
        txtNgayLap.setText(XDate.toString(p.getNgayLap(), dateTimeFormat));
        txtNgayThucHien.setDate(p.getNgThucHien());
        txtNgayHoanThanh.setDate(p.getNgHoanThanh());
        cboKho.setSelectedItem(kho);

        txtDaThanhToan.setText(XNumber.toString(p.getSoTienThanhToan(), numFormat));

        if (p.isLoai()) {
            rdoPhieuNhap.setSelected(true);
        } else {
            rdoPhieuXuat.setSelected(true);
        }
        chkThanhToan.setSelected(p.isTinhTrangThanhToan());
        chkChuyenHang.setSelected(p.isTrangThai());
        txtGhiChu.setText(p.getGhiChu());
        tblCTPhieu.setToolTipText(p.getMaPhieu().toString());

        this.fillToTableCTPhieu();
    }

    // Lấy dữ liệu từ form chi tiết phiếu
    private ChiTietPhieu getFormCTPhieu(int row) {
        ChiTietPhieu ctp = new ChiTietPhieu();
        ctp.setDonGia(XNumber.toDouble((String) modelCTPhieu.getValueAt(row, 3), numFormat));
        ctp.setSoLuong((Double) modelCTPhieu.getValueAt(row, 2));
        ctp.setMaCTP((Integer) modelCTPhieu.getValueAt(row, 4));
        ctp.setMaLT((Integer) modelCTPhieu.getValueAt(row, 8));
        return ctp;
    }

    // Thêm hàng hóa vào bảng Chi tiết
    ArrayList listCT = new ArrayList();

    private void insertCT() {
        HangHoa hh = (HangHoa) cboHangHoa.getSelectedItem();
        Kho k = (Kho) cboKho.getSelectedItem();

        if (cboHangHoa.getItemCount() == 0) {
            return;
        }

        if (listCT.contains(hh)) {
            MsgBox.alert(ChiTietPhieuDialog, "Hàng hoá này đã tồn tại trong danh sách!");
            for (int i = 0; i < tblCTPhieu_ChiTiet.getRowCount(); i++) {
                HangHoa hangHoa = (HangHoa) tblCTPhieu_ChiTiet.getValueAt(i, 1);
                if (hangHoa.getMaHH().equals(hh.getMaHH())) {
                    tblCTPhieu_ChiTiet.setRowSelectionInterval(i, i);
                    break;
                }
            }
            return;
        }

        modelCTPhieu.addRow(new Object[]{
            tblCTPhieu_ChiTiet.getRowCount() + 1,
            hh,
            0.0,
            XNumber.toString(hh.getDonGia(), numFormat),
            0,
            XNumber.toString(0.0, numFormat),
            false,
            ltDAO.getSoLuong(k.getMaKho(), hh.getMaHH()),
            ltDAO.getMaLT(k.getMaKho(), hh.getMaHH())
        });
        listCT.add(hh);
    }

    //thay đổi kho 
    private void updateCT() {
        Kho k = (Kho) cboKho.getSelectedItem();
        HangHoa hh;
        for (int i = 0; i < tblCTPhieu.getRowCount(); i++) {
            hh = (HangHoa) modelCTPhieu.getValueAt(i, 1);
            modelCTPhieu.setValueAt(ltDAO.getSoLuong(k.getMaKho(), hh.getMaHH()), i, 7);
        }
    }

    // Xóa hàng hóa khỏi chi tiết
    private ArrayList<ChiTietPhieu> delCTP = new ArrayList<>();

    private void deleteCT() {
        int delRow = tblCTPhieu_ChiTiet.getSelectedRow();

        if (delRow < 0) {
            MsgBox.alert(ChiTietPhieuDialog, "Chọn một hàng hoá cần xoá!");
            return;
        }

        int maCTP = (int) modelCTPhieu.getValueAt(delRow, 4);

        listCT.remove((HangHoa) modelCTPhieu.getValueAt(delRow, 1));

        if (isUpdate) {
            delCTP.add(ctpDAO.selectByID(maCTP));
        }
        modelCTPhieu.removeRow(delRow);

        for (int i = 0; i < modelCTPhieu.getRowCount(); i++) {
            modelCTPhieu.setValueAt(i + 1, i, 0);
        }
    }

    // nhap luu tru
    private void insertLuuTru(int row) {
        ChiTietPhieu ctp;

        if (rdoPhieuNhap.isSelected()) {
            ctp = getFormCTPhieu(row);

            spDAO.insertNhapTest(ctp.getMaCTP());
        } else {
            ctp = getFormCTPhieu(row);

            spDAO.insertXuatTest(ctp.getMaCTP());
        }
    }

    // xoa luu tru
    private void deleteLuuTru(int row) {
        ChiTietPhieu ctp;

        if (rdoPhieuNhap.isSelected()) {
            ctp = getFormCTPhieu(row);

            spDAO.deleteNhapTest(ctp.getMaCTP());
        } else {
            ctp = getFormCTPhieu(row);

            spDAO.deleteXuatTest(ctp.getMaCTP());
        }
    }

    // Nhập phiếu mới vào hệ thống và cập nhật thông tin hàng hóa
    private void insertPhieu() {
        if (!isValidated()) {
            return;
        }

        int rows = modelCTPhieu.getRowCount();
        btnChiTiet.setEnabled(true);

        Phieu phieu = this.getFormPhieu();
        ChiTietPhieu ctp;
        pDAO.insert(phieu);

        int maPhieu = pDAO.getMaPhieuByNVandCreatedDate(txtMaNV.getToolTipText(), XDate.toDate(txtNgayLap.getText(), dateTimeFormat));
        int maKho = ((Kho) cboKho.getSelectedItem()).getMaKho();
        int maLT;

        LuuTru lt = new LuuTru();
        lt.setSoLuong(0.0);
        lt.setMaKho(maKho);

        for (int i = 0; i < rows; i++) {
            ctp = getFormCTPhieu(i);
            HangHoa hh = (HangHoa) modelCTPhieu.getValueAt(i, 1);
            maLT = ctp.getMaLT();
            if (maLT == 0) {
                lt.setMaHH(hh.getMaHH());
                ltDAO.insert(lt);
                ctp.setMaLT(ltDAO.getMaLT(maKho, hh.getMaHH()));
            }
            ctp.setMaPhieu(Integer.valueOf(maPhieu));
            ctpDAO.insert(ctp);
            insertLuuTru(i);
        }

        this.fillToTableCTPhieu();

        if (chkChuyenHang.isSelected()) {
            for (int i = 0; i < rows; i++) {
                insertLuuTru(i);
            }
        }

        this.fillToTablePhieu();

        MsgBox.alert(this, "Thêm phiếu " + (phieu.isLoai() ? "nhập" : "xuất") + " thành công!");
    }

    // Cập nhật phiếu vào hệ thống và cập nhật thông tin hàng hóa
    private void updatePhieu() {
        if (!isValidated()) {
            return;
        }
        Phieu phieu = this.getFormPhieu();
        String maPhieu = tblCTPhieu.getToolTipText();
        System.out.println(maPhieu);

        if (maPhieu == null) {
            return;
        }

        phieu.setMaPhieu(Integer.valueOf(maPhieu));
        pDAO.update(phieu);

        if (phieu.isLoai()) {
            for (ChiTietPhieu ctpDel : delCTP) {
                spDAO.deleteNhapTest(ctpDel.getMaCTP());
                ctpDAO.delete(ctpDel.getMaCTP());
            }
        } else {
            for (ChiTietPhieu ctpDel : delCTP) {
                spDAO.deleteXuatTest(ctpDel.getMaCTP());
                ctpDAO.delete(ctpDel.getMaCTP());
            }
        }
        delCTP.clear();

        ChiTietPhieu ctp;
        int rows = modelCTPhieu.getRowCount();
        int maKho = ((Kho) cboKho.getSelectedItem()).getMaKho();
        LuuTru lt = new LuuTru();
        lt.setSoLuong(0.0);
        lt.setMaKho(maKho);

        if (chkChuyenHang.isSelected()) {
            for (int i = 0; i < rows; i++) {
                ctp = getFormCTPhieu(i);
                ctp.setMaPhieu(phieu.getMaPhieu());
                if (ctp.getMaCTP() != 0) {
                    deleteLuuTru(i);
                    ctpDAO.update(ctp);
                    insertLuuTru(i);
                } else {
                    ctp = getFormCTPhieu(i);
                    HangHoa hh = (HangHoa) modelCTPhieu.getValueAt(i, 1);
                    int maLT = ctp.getMaLT();
                    if (maLT == 0) {
                        lt.setMaHH(hh.getMaHH());
                        ltDAO.insert(lt);
                        ctp.setMaLT(ltDAO.getMaLT(maKho, hh.getMaHH()));
                    }
                    ctp.setMaPhieu(Integer.valueOf(maPhieu));
                    ctpDAO.insert(ctp);
                    modelCTPhieu.setValueAt(ctpDAO.getMaCTP(Integer.valueOf(maPhieu), ctp.getMaLT()), i, 4);
                    insertLuuTru(i);
                }
            }

        } else {
            for (int i = 0; i < rows; i++) {
                ctp = getFormCTPhieu(i);
                ctp.setMaPhieu(phieu.getMaPhieu());
                if (ctp.getMaCTP() != 0) {
                    deleteLuuTru(i);
                    ctpDAO.update(ctp);
                } else {
                    ctp = getFormCTPhieu(i);
                    HangHoa hh = (HangHoa) modelCTPhieu.getValueAt(i, 1);
                    int maLT = ctp.getMaLT();
                    if (maLT == 0) {
                        lt.setMaHH(hh.getMaHH());
                        ltDAO.insert(lt);
                        ctp.setMaLT(ltDAO.getMaLT(maKho, hh.getMaHH()));
                    }
                    ctp.setMaPhieu(Integer.valueOf(maPhieu));
                    ctpDAO.insert(ctp);
                }
            }
        }

        this.fillToTablePhieu();
        this.fillToTableCTPhieu();

        MsgBox.alert(this, "Cập nhật phiếu " + (phieu.isLoai() ? "nhập" : "xuất") + " thành công!");
    }

    // Xoá phieu khoi he thong
    private void deletePhieu() {
        Phieu phieu = this.getFormPhieu();

        if (!MsgBox.confirm(this, "Bạn chắc chắn muốn xoá phiếu " + (phieu.isLoai() ? "nhập" : "xuất") + " này ?")) {
            return;
        }

        String maPhieu = tblCTPhieu.getToolTipText();

        if (maPhieu == null) {
            return;
        }

        int rows = modelCTPhieu.getRowCount();
        ChiTietPhieu ctp;

        if (phieu.isLoai()) {
            for (ChiTietPhieu ctpDel : delCTP) {
                spDAO.deleteNhapTest(ctpDel.getMaCTP());
                ctpDAO.delete(ctpDel.getMaCTP());
            }
        } else {
            for (ChiTietPhieu ctpDel : delCTP) {
                spDAO.deleteXuatTest(ctpDel.getMaCTP());
                ctpDAO.delete(ctpDel.getMaCTP());
            }
        }

        for (int i = 0; i < rows; i++) {

            ctp = getFormCTPhieu(i);

            if (ctp.getMaCTP() != 0) {
                deleteLuuTru(i);
                ctpDAO.delete(ctp.getMaCTP());
            }
        }

        pDAO.delete(Integer.valueOf(maPhieu));

        this.clearForm();
        this.fillToTablePhieu();

        MsgBox.alert(this, "Xóa phiếu " + (phieu.isLoai() ? "nhập" : "xuất") + " thành công!");
    }

    // Xóa trắng form
    private void clearForm() {
        Date NgayLap = new Date(System.currentTimeMillis());

        rdoPhieuNhap.setEnabled(true);
        rdoPhieuXuat.setEnabled(true);
        rdoPhieuNhap.setSelected(true);

        cboLoaiDT.setSelectedIndex(0);
        cboDoiTac.setSelectedIndex(0);
        txtMaNV.setToolTipText(Auth.user.getMaNV());
        txtMaNV.setText(Auth.user.getTenNV());
        txtNgayLap.setText(XDate.toString(NgayLap, dateTimeFormat));
        txtNgayThucHien.setDate(new Date());
        txtNgayHoanThanh.setDate(new Date());
        txtGhiChu.setText(null);
        cboKho.setSelectedIndex(0);
        chkChuyenHang.setSelected(false);
        chkThanhToan.setSelected(false);
        tblCTPhieu.setToolTipText(null);
        lblQRCodeImage.setIcon(null);
        txtDaThanhToan.setText("0.0");

        cboLoaiHH.setSelectedIndex(0);

        this.fillToTableCTPhieu();

        this.rowPhieu = -1;

        this.delCTP.clear();
        this.listCT.clear();

        isUpdate = false;
        this.updateStatus();
    }

    // Cập nhật giao diện form theo hoạt động
    private void updateStatus() {
        // Kiểm tra trạng thái chọn hàng trên bảng
        boolean edit = (this.rowPhieu >= 0);
        boolean first = (this.rowPhieu == 0);
        boolean last = (this.rowPhieu == tblPhieu.getRowCount() - 1);

        this.isInsert = !edit;
        btnSua.setEnabled(edit);
        btnXoa.setEnabled(edit);
        btnXuatMaPhieu.setEnabled(edit);
        btnXuatFile.setEnabled(edit);
        btnChiTiet.setEnabled(edit);
        btnFirst.setEnabled(edit && !first);
        btnPrev.setEnabled(edit && !first);
        btnNext.setEnabled(edit && !last);
        btnLast.setEnabled(edit && !last);

        // Kiểm tra vai trò người dùng, hạn chế quyền thủ kho
        btnXoa.setVisible(Auth.isManager());
        btnXoaCTP.setEnabled(Auth.isManager());

        // Kiểm tra trạng thái hoàn thành phiếu
        boolean isCompleted = chkChuyenHang.isSelected();
        if (!isCompleted) {
            txtNgayHoanThanh.setDate(new Date());
        }
        txtNgayHoanThanh.setEnabled(isCompleted);

        // Cập nhật trạng thái update phiếu
        cboKho.setEnabled(!isUpdate);
        rdoPhieuNhap.setEnabled(!isUpdate);
        rdoPhieuXuat.setEnabled(!isUpdate);

    }

    private void updateUIPhieu() {
        if (rdoPhieuNhap.isSelected()) {
            lblDaThanhToan.setText("Đã thanh toán cho đối tác");
            chkChuyenHang.setText("Hoàn thành nhập hàng");
            chkThanhToan.setText("Hoàn thành thanh toán cho đối tác");
            lblLoaiDT.setText("Loại đối tác");
            lblDoiTac.setText("Đối tác");
        } else {
            lblDaThanhToan.setText("Khách hàng đã thanh toán");
            chkChuyenHang.setText("Hoàn thành xuất hàng");
            chkThanhToan.setText("Khách hàng đã hoàn thành thanh toán");
            lblLoaiDT.setText("Loại khách hàng");
            lblDoiTac.setText("Khách hàng");
        }
        this.fillToComboBoxLoaiDT();
    }

    // Định dạng bảng
    private void formatTable() {
        // Dữ liệu hàng tiêu đề bảng
        String headerPhieu[] = {"STT", "ĐỐI TÁC", "LOẠI", "KHO", "TT VẬN CHUYỂN", "TT THANH TOÁN",
            "NGÀY THỰC HIỆN", "NGÀY HOÀN THÀNH", "NGÀY LẬP", "NGƯỜI LẬP"};
        this.modelPhieu = new DefaultTableModel(headerPhieu, 0) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }

            Class[] types = new Class[]{
                Integer.class,
                String.class,
                String.class,
                Integer.class,
                String.class,
                String.class,
                String.class,
                String.class,
                String.class,
                Phieu.class
            };

            @Override
            public Class getColumnClass(int columnIndex) {
                return types[columnIndex];
            }
        };
        String headerCTPhieu[] = {"STT", "TÊN HÀNG HÓA", "SỐ LƯỢNG", "ĐƠN GIÁ",
            "MÃ CHI TIẾT PHIẾU", "THÀNH TIỀN", "TRẠNG THÁI", "LƯU TRỮ", "MÃ LƯU TRỮ"};
        this.modelCTPhieu = new DefaultTableModel(headerCTPhieu, 0) {
            @Override
            public boolean isCellEditable(int row, int column) {
                if (column == 2 || column == 3) {
                    return true;
                }
                return false;
            }

            Class[] types = new Class[]{
                Integer.class,
                HangHoa.class,
                Double.class,
                String.class,
                Integer.class,
                String.class,
                Boolean.class,
                Double.class,
                Integer.class
            };

            @Override
            public Class getColumnClass(int columnIndex) {
                return types[columnIndex];
            }
        };

        tblPhieu.setModel(modelPhieu);
        tblCTPhieu.setModel(modelCTPhieu);
        tblCTPhieu_ChiTiet.setModel(modelCTPhieu);

        sorterPhieu = new TableRowSorter<>(modelPhieu);
        sorterCTPhieu = new TableRowSorter<>(modelCTPhieu);
        sorterCTPhieu_ChiTiet = new TableRowSorter<>(modelCTPhieu);

        tblPhieu.setRowSorter(sorterPhieu);
        tblCTPhieu.setRowSorter(sorterCTPhieu);
        tblCTPhieu_ChiTiet.setRowSorter(sorterCTPhieu_ChiTiet);

        sorterPhieu.setStringConverter(new LowerCaseStringConverter());
        sorterPhieu.setComparator(6, new DateComparator(dateFormat));
        sorterPhieu.setComparator(7, new DateComparator(dateFormat));
        sorterPhieu.setComparator(8, new DateTimeComparator(dateTimeFormat));
        sorterCTPhieu.setStringConverter(new LowerCaseStringConverter());
        sorterCTPhieu.setComparator(3, new DoubleComparator(numFormat));
        sorterCTPhieu.setComparator(4, new DoubleComparator(numFormat));
        sorterCTPhieu_ChiTiet.setStringConverter(new LowerCaseStringConverter());

        // Giấu cột
        tblCTPhieu_ChiTiet.getColumnModel().removeColumn(tblCTPhieu_ChiTiet.getColumnModel().getColumn(8));
        tblCTPhieu.getColumnModel().removeColumn(tblCTPhieu.getColumnModel().getColumn(8));
        tblCTPhieu_ChiTiet.getColumnModel().removeColumn(tblCTPhieu_ChiTiet.getColumnModel().getColumn(7));
        tblCTPhieu.getColumnModel().removeColumn(tblCTPhieu.getColumnModel().getColumn(7));
        tblCTPhieu_ChiTiet.getColumnModel().removeColumn(tblCTPhieu_ChiTiet.getColumnModel().getColumn(6));
        tblCTPhieu.getColumnModel().removeColumn(tblCTPhieu.getColumnModel().getColumn(6));
        tblCTPhieu_ChiTiet.getColumnModel().removeColumn(tblCTPhieu_ChiTiet.getColumnModel().getColumn(4));
        tblCTPhieu.getColumnModel().removeColumn(tblCTPhieu.getColumnModel().getColumn(4));

        // Chỉnh độ dài các cột bảng Phiếu
        tblPhieu.getColumnModel().getColumn(0).setPreferredWidth(35);
        tblPhieu.getColumnModel().getColumn(1).setPreferredWidth(293);
        tblPhieu.getColumnModel().getColumn(2).setPreferredWidth(0);
        tblPhieu.getColumnModel().getColumn(2).setMinWidth(0);
        tblPhieu.getColumnModel().getColumn(2).setMaxWidth(0);
        tblPhieu.getColumnModel().getColumn(3).setPreferredWidth(35);
        tblPhieu.getColumnModel().getColumn(4).setPreferredWidth(95);
        tblPhieu.getColumnModel().getColumn(5).setPreferredWidth(90);
        tblPhieu.getColumnModel().getColumn(6).setPreferredWidth(100);
        tblPhieu.getColumnModel().getColumn(7).setPreferredWidth(125);
        tblPhieu.getColumnModel().getColumn(8).setPreferredWidth(60);

        // Chỉnh độ dài các cột bảng Chi tiết phiếu
        tblCTPhieu_ChiTiet.getColumnModel().getColumn(0).setPreferredWidth(35);
        tblCTPhieu_ChiTiet.getColumnModel().getColumn(1).setPreferredWidth(274);
        tblCTPhieu_ChiTiet.getColumnModel().getColumn(2).setPreferredWidth(85);
        tblCTPhieu_ChiTiet.getColumnModel().getColumn(3).setPreferredWidth(85);
        tblCTPhieu_ChiTiet.getColumnModel().getColumn(3).setPreferredWidth(85);
        tblCTPhieu.getColumnModel().getColumn(0).setPreferredWidth(35);
        tblCTPhieu.getColumnModel().getColumn(1).setPreferredWidth(395);
        tblCTPhieu.getColumnModel().getColumn(2).setPreferredWidth(120);
        tblCTPhieu.getColumnModel().getColumn(3).setPreferredWidth(120);
        tblCTPhieu.getColumnModel().getColumn(4).setPreferredWidth(120);

        // Cài đặt định dạng cho bảng
        TableDateCellRenderer cellDateRender = new TableDateCellRenderer(dateFormat) {
            @Override
            public Component getTableCellRendererComponent(JTable table,
                    Object value, boolean isSelected, boolean hasFocus, int row, int col) {

                super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, col);

                if (table.isRowSelected(row)) {
                    // Highlight self.
                    this.repaint();
                    return this;
                }

                String statusVC = (String) table.getModel().getValueAt(row, 4);
                String statusTT = (String) table.getModel().getValueAt(row, 5);

                if (statusVC.equals("Đã hoàn thành")) {
                    if (statusTT.equals("Đã xong")) {
                        setBackground(table.getBackground());
                        setForeground(table.getForeground());
                    } else {
                        setBackground(txtMau4.getBackground());
                        setForeground(Color.BLACK);
                    }
                } else {
                    if (statusTT.equals("Đã xong")) {
                        setBackground(txtMau2.getBackground());
                        setForeground(Color.BLACK);
                    } else {
                        setBackground(txtMau3.getBackground());
                        setForeground(Color.BLACK);
                    }
                }
                return this;
            }
        };

        TableDateCellRenderer cellDateRenderK = new TableDateCellRenderer(dateTimeFormat) {
            @Override
            public Component getTableCellRendererComponent(JTable table,
                    Object value, boolean isSelected, boolean hasFocus, int row, int col) {

                super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, col);

                if (table.isRowSelected(row)) {
                    // Highlight self.
                    this.repaint();
                    return this;
                }

                String statusVC = (String) table.getModel().getValueAt(row, 4);
                String statusTT = (String) table.getModel().getValueAt(row, 5);

                if (statusVC.equals("Đã hoàn thành")) {
                    if (statusTT.equals("Đã xong")) {
                        setBackground(table.getBackground());
                        setForeground(table.getForeground());
                    } else {
                        setBackground(txtMau4.getBackground());
                        setForeground(Color.BLACK);
                    }
                } else {
                    if (statusTT.equals("Đã xong")) {
                        setBackground(txtMau2.getBackground());
                        setForeground(Color.BLACK);
                    } else {
                        setBackground(txtMau3.getBackground());
                        setForeground(Color.BLACK);
                    }
                }
                return this;
            }
        };

        DefaultTableCellRenderer cellCenterRender = new DefaultTableCellRenderer() {
            public Component getTableCellRendererComponent(JTable table,
                    Object value, boolean isSelected, boolean hasFocus, int row, int col) {

                super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, col);

                setHorizontalAlignment(JLabel.CENTER);

                if (table.isRowSelected(row)) {
                    // Highlight self.
                    this.repaint();
                    return this;
                }

                String statusVC = (String) table.getModel().getValueAt(row, 4);
                String statusTT = (String) table.getModel().getValueAt(row, 5);

                if (statusVC.equals("Đã hoàn thành")) {
                    if (statusTT.equals("Đã xong")) {
                        setBackground(table.getBackground());
                        setForeground(table.getForeground());
                    } else {
                        setBackground(txtMau4.getBackground());
                        setForeground(Color.BLACK);
                    }
                } else {
                    if (statusTT.equals("Đã xong")) {
                        setBackground(txtMau2.getBackground());
                        setForeground(Color.BLACK);
                    } else {
                        setBackground(txtMau3.getBackground());
                        setForeground(Color.BLACK);
                    }
                }
                return this;
            }
        };

        DefaultTableCellRenderer cellNormalRender = new DefaultTableCellRenderer() {
            @Override
            public Component getTableCellRendererComponent(JTable table,
                    Object value, boolean isSelected, boolean hasFocus, int row, int col) {

                super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, col);

                if (table.isRowSelected(row)) {
                    // Highlight self.
                    this.repaint();
                    return this;
                }

                String statusVC = (String) table.getModel().getValueAt(row, 4);
                String statusTT = (String) table.getModel().getValueAt(row, 5);

                if (statusVC.equals("Đã hoàn thành")) {
                    if (statusTT.equals("Đã xong")) {
                        setBackground(table.getBackground());
                        setForeground(table.getForeground());
                    } else {
                        setBackground(txtMau4.getBackground());
                        setForeground(Color.BLACK);
                    }
                } else {
                    if (statusTT.equals("Đã xong")) {
                        setBackground(txtMau2.getBackground());
                        setForeground(Color.BLACK);
                    } else {
                        setBackground(txtMau3.getBackground());
                        setForeground(Color.BLACK);
                    }
                }
                return this;
            }
        };

        tblPhieu.getColumnModel().getColumn(0).setCellRenderer(cellCenterRender);
        tblPhieu.getColumnModel().getColumn(1).setCellRenderer(cellNormalRender);
        tblPhieu.getColumnModel().getColumn(2).setCellRenderer(cellCenterRender);
        tblPhieu.getColumnModel().getColumn(3).setCellRenderer(cellCenterRender);
        tblPhieu.getColumnModel().getColumn(4).setCellRenderer(cellCenterRender);
        tblPhieu.getColumnModel().getColumn(5).setCellRenderer(cellCenterRender);
        tblPhieu.getColumnModel().getColumn(6).setCellRenderer(cellDateRender);
        tblPhieu.getColumnModel().getColumn(7).setCellRenderer(cellDateRender);
        tblPhieu.getColumnModel().getColumn(8).setCellRenderer(cellDateRenderK);
        tblPhieu.getColumnModel().getColumn(9).setCellRenderer(cellCenterRender);

        tblCTPhieu.getColumnModel().getColumn(0).setCellRenderer(TableNumberCellRenderer.getIntegerRenderer());
        tblCTPhieu.getColumnModel().getColumn(2).setCellRenderer(TableNumberCellRenderer.getIntegerRenderer());
        tblCTPhieu.getColumnModel().getColumn(3).setCellRenderer(TableNumberCellRenderer.getDoubleRenderer(numFormat));
        tblCTPhieu.getColumnModel().getColumn(4).setCellRenderer(TableNumberCellRenderer.getDoubleRenderer(numFormat));

        tblCTPhieu_ChiTiet.getColumnModel().getColumn(0).setCellRenderer(TableNumberCellRenderer.getIntegerRenderer());
        tblCTPhieu_ChiTiet.getColumnModel().getColumn(2).setCellRenderer(TableNumberCellRenderer.getIntegerRenderer());
        tblCTPhieu_ChiTiet.getColumnModel().getColumn(3).setCellRenderer(TableNumberCellRenderer.getDoubleRenderer(numFormat));
        tblCTPhieu_ChiTiet.getColumnModel().getColumn(4).setCellRenderer(TableNumberCellRenderer.getDoubleRenderer(numFormat));

//        {"STT", "ĐỐI TÁC", "LOẠI", "KHO", "TT VẬN CHUYỂN", "TT THANH TOÁN",
//            "NGÀY THỰC HIỆN", "NGÀY HOÀN THÀNH", "NGÀY LẬP", "NGƯỜI LẬP"};
        // Chỉnh độ rộng hàng trong bảng
        tblCTPhieu.setRowHeight(25);
        tblCTPhieu_ChiTiet.setRowHeight(25);
        tblPhieu.setRowHeight(25);

        // Thêm chức năng nhập cho bảng
        JSpinnerEditor spinnerSoLuong = new JSpinnerEditor(0.0, 0.0, 100000.0, 1.0);
        JSpinnerEditor spinnerDonGia = new JSpinnerStringEditor(0.0, 0.0, 1000000000.0, 1000.0, numFormat);

        tblCTPhieu_ChiTiet.getColumnModel().getColumn(2).setCellEditor(spinnerSoLuong);
        tblCTPhieu_ChiTiet.getColumnModel().getColumn(3).setCellEditor(spinnerDonGia);
        tblCTPhieu.getColumnModel().getColumn(2).setCellEditor(spinnerSoLuong);
        tblCTPhieu.getColumnModel().getColumn(3).setCellEditor(spinnerDonGia);

        // check value of the cell
        tblCTPhieu_ChiTiet.getColumnModel().getColumn(2).getCellEditor().addCellEditorListener(new CellEditorListener() {
            @Override
            public void editingStopped(ChangeEvent e) {
                int row = tblCTPhieu.getSelectedRow();
                if (row < 0 || rdoPhieuNhap.isSelected() || ChiTietPhieuDialog.isFocused()) {
                    return;
                }

                double Ton = (Double) modelCTPhieu.getValueAt(row, 7);

                JSpinnerEditor c = (JSpinnerEditor) e.getSource();

                if (c.getNewValue() > Ton && rdoPhieuXuat.isSelected()) {
                    MsgBox.alert(pnlBackground, "Không đủ hàng tồn để xuất!");
                    modelCTPhieu.setValueAt(c.getOldValue(), row, 2);
                }
            }

            @Override
            public void editingCanceled(ChangeEvent e) {
            }
        });

        tblCTPhieu.getColumnModel().getColumn(2).getCellEditor().addCellEditorListener(new CellEditorListener() {
            @Override
            public void editingStopped(ChangeEvent e) {
                int row = tblCTPhieu.getSelectedRow();
                if (row < 0 || rdoPhieuNhap.isSelected() || !ChiTietPhieuDialog.isFocused()) {
                    return;
                }

                double Ton = (Double) modelCTPhieu.getValueAt(row, 7);

                JSpinnerEditor c = (JSpinnerEditor) e.getSource();

                if (c.getNewValue() > Ton && rdoPhieuXuat.isSelected()) {
                    MsgBox.alert(pnlBackground, "Không đủ hàng tồn để xuất!");
                    modelCTPhieu.setValueAt(c.getOldValue(), row, 2);
                }
            }

            @Override
            public void editingCanceled(ChangeEvent e) {
            }
        });
    }

    // Đổ combobox tìm kiếm chi tiết phiếu
    private void fillToComboBoxTimKiemCTPhieu() {
        DefaultComboBoxModel model = (DefaultComboBoxModel) cboTimKiemCTPhieu.getModel();
        model.removeAllElements();
        for (int i = 0; i < tblCTPhieu.getColumnCount(); i++) {
            model.addElement(tblCTPhieu.getColumnName(i));
        }
    }

    // Lọc bảng theo từ khoá chi tiết phiếu
    private void searchCTPhieu() {
        int columnFilter = cboTimKiemCTPhieu.getSelectedIndex();
        String keyword = txtTimKiemCTPhieu.getText().toLowerCase();

        RowFilter<TableModel, Object> rf = null;
        try {
            rf = RowFilter.regexFilter(keyword.toLowerCase(), columnFilter);
        } catch (Exception e) {
            return;
        }
        sorterCTPhieu.setRowFilter(rf);
    }

    // Đổ combobox tìm kiếm phiếu
    private void fillToComboBoxTimKiemPhieu() {
        DefaultComboBoxModel model = (DefaultComboBoxModel) cboTimKiemPhieu.getModel();
        model.removeAllElements();
        for (int i = 0; i < tblPhieu.getColumnCount(); i++) {
            model.addElement(tblPhieu.getColumnName(i));
        }
    }

    // Lọc bảng theo từ khoá phiếu
    private void searchPhieu() {
        int columnFilter = cboTimKiemPhieu.getSelectedIndex();
        String keyword = txtTimKiemPhieu.getText();

        RowFilter<TableModel, Object> rf = null;
        try {
            rf = RowFilter.regexFilter(keyword.toLowerCase(), columnFilter);
        } catch (Exception e) {
            return;
        }
        sorterPhieu.setRowFilter(rf);
    }

    // Hiển thị phiếu đầu danh sách
    private void first() {
        this.rowPhieu = 0;
        this.edit();
    }

    // Hiển thị phiếu kế trước
    private void prev() {
        if (this.rowPhieu > 0) {
            this.rowPhieu--;
            this.edit();
        }
    }

    // Hiển thị phiếu kế tiếp
    private void next() {
        if (this.rowPhieu < (tblPhieu.getRowCount() - 1)) {
            this.rowPhieu++;
            this.edit();
        }
    }

    // Hiển thị phiếu cuối danh sách
    private void last() {
        this.rowPhieu = tblPhieu.getRowCount() - 1;
        this.edit();
    }

    // Hiển thị dữ liệu của phiếu được chọn lên form
    private void edit() {
        int rowPhieuModel = tblPhieu.convertRowIndexToModel(this.rowPhieu);

        delCTP.clear();

        Phieu phieu = (Phieu) tblPhieu.getModel().getValueAt(rowPhieuModel, 9);
        this.setFormPhieu(phieu);

        tabs.setSelectedIndex(0);
        cboTimKiemCTPhieu.setSelectedIndex(0);
        txtTimKiemCTPhieu.setText("");

        isUpdate = true;
        this.updateStatus();

        tblPhieu.setRowSelectionInterval(rowPhieu, rowPhieu);
    }

    // Tạo mã QR chứa mã phiếu
    private void createQRCode() {
        if (rowPhieu < 0) {
            MsgBox.alert(this, "Chưa chọn chi tiết phiếu!");
        } else {
            int rowPhieuModel = tblPhieu.convertRowIndexToModel(rowPhieu);
            Phieu phieu = (Phieu) tblPhieu.getModel().getValueAt(rowPhieuModel, 9);
            try {
                BufferedImage bi = QRCode.generateQRCodeImage(String.valueOf(phieu.getMaPhieu()));
                lblQRCodeImage.setIcon(new ImageIcon(bi));
                QRCodeDialog.setVisible(true);
            } catch (WriterException ex) {
                ex.printStackTrace();
            }
        }
    }

    // Xuất phiếu
    private void exportReport() {
        if (rowPhieu < 0) {
            MsgBox.alert(this, "Chưa chọn chi tiết phiếu!");
            return;
        }

        try {
            int rowPhieuModel = tblPhieu.convertRowIndexToModel(rowPhieu);
            Phieu phieu = (Phieu) this.modelPhieu.getValueAt(rowPhieuModel, 9);

            // Truyền tham số vào báo cáo
            HashMap parameters = new HashMap();
            parameters.put("MAPHIEU", phieu.getMaPhieu());

            String fileName = "";

            if (phieu.isLoai()) {
                fileName = "PhieuNhapSo" + phieu.getMaPhieu();
            } else {
                fileName = "PhieuXuatSo" + phieu.getMaPhieu();
            }
            XReport.exportFile(fileName, reportPath, parameters);
        } catch (SQLException | JRException | IOException e) {
            MsgBox.alert(this, "Xuất file thất bại!");
            e.printStackTrace();
        }
    }

    // In báo cáo
    private void printReport() {
        if (rowPhieu < 0) {
            MsgBox.alert(this, "Chưa chọn chi tiết phiếu!");
            return;
        }

        try {
            int rowPhieuModel = tblPhieu.convertRowIndexToModel(rowPhieu);
            Phieu phieu = (Phieu) this.modelPhieu.getValueAt(rowPhieuModel, 9);

            // Truyền tham số vào báo cáo
            HashMap parameters = new HashMap();
            parameters.put("MAPHIEU", phieu.getMaPhieu());

            String fileName = "";

            if (phieu.isLoai()) {
                fileName = "PhieuNhapSo" + phieu.getMaPhieu();
            } else {
                fileName = "PhieuXuatSo" + phieu.getMaPhieu();
            }
            XReport.printReport(fileName, reportPath, parameters);
        } catch (SQLException | JRException e) {
            MsgBox.alert(this, "In phiếu thất bại!");
            e.printStackTrace();
        }
    }

    // Cập nhật thành tiền khi sửa số lượng hoặc đơn giá trên bảng
    private void updateThanhTienCTPhieu(JTable table, int row) {
        if (row < 0) {
            return;
        }

        double soLuong = (Double) table.getValueAt(row, 2);
        double donGia = XNumber.toDouble((String) table.getModel().getValueAt(row, 3), numFormat);
        double thanhTien = soLuong * donGia;

        table.getModel().setValueAt(XNumber.toString(thanhTien, numFormat), row, 5);

        double tongTien = 0;
        for (int i = 0; i < table.getModel().getRowCount(); i++) {
            tongTien += XNumber.toDouble((String) table.getModel().getValueAt(i, 5), numFormat);
        }
        lblTongTien.setText(XNumber.toString(tongTien, numFormat));

        // Tự động cập nhật số lượng và đơn giá vào CSDL
        /*
        int maChiTiet = (int) table.getModel().getValueAt(table.convertRowIndexToModel(row), 4);
        ChiTietPhieu ctp = ctpDAO.selectByID(maChiTiet);
        if(ctp == null) return;
        ctp.setSoLuong(soLuong);
        ctp.setDonGia(donGia);
        ctpDAO.update(ctp);
         */
    }

    // Xác thực form
    private boolean isValidated() {
        if (txtNgayThucHien.getDate() == null) {
            MsgBox.alert(this, "Chưa nhập ngày thực hiện!");
            txtNgayThucHien.requestFocus();
            return false;
        }

        /*
        Date ngayLap = XDate.toDate(txtNgayLap.getText(), dateFormat);
        Date ngayThucHien = txtNgayThucHien.getDate();
        if (ngayThucHien.before(ngayLap)) {
            XOptionPane.alert(this, "Ngày thực hiện không nhỏ hơn ngày lập phiếu!");
            txtNgayThucHien.requestFocus();
            return false;
        }
         */
        if (chkChuyenHang.isSelected()) {
            if (txtNgayHoanThanh.getDate() == null) {
                MsgBox.alert(this, "Chưa nhập ngày hoàn thành!");
                txtNgayThucHien.requestFocus();
                return false;
            }

            Date ngayHoanThanh = txtNgayHoanThanh.getDate();
            if (ngayHoanThanh.before(txtNgayThucHien.getDate())) {

                txtNgayThucHien.requestFocus();
                return false;
            }
        }
        return true;
    }

    // Đổ lại dữ liệu 
    public void refreshForm() {

        this.fillToComboBoxKho();
        this.fillToTablePhieu();
        this.fillToComboBoxLoaiDT();
        this.fillToComboBoxLoaiHH();

        this.timer.restart();
    }

    // Sau hai phút tải lại dữ liệu
    private Timer timer = new Timer(120000, (e) -> {
        refreshForm();
    });

    // Nhấn enter không xuống dòng tiếp theo khi đang sửa ô trong table
    private void disableEnterCellNextLine(JTable table) {
        int row = table.getSelectedRow();
        if (row == 0) {
            row = table.getRowCount() - 1;
        } else {
            row--;
        }
        table.setRowSelectionInterval(row, row);
    }

    // Ánh xạ dòng được chọn của bảng này sang bảng khác
    private void mapSelectionTable(JTable TableToClick, JTable TableToMap) {
        int rowTableToClick = TableToClick.convertRowIndexToModel(TableToClick.getSelectedRow());
        int rowTableToMap = TableToMap.convertRowIndexToView(rowTableToClick);
        TableToMap.setRowSelectionInterval(rowTableToMap, rowTableToMap);
    }

}

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.stoman.ui;

import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import javax.swing.GroupLayout;
import javax.swing.LayoutStyle;
import javax.swing.border.*;
import com.formdev.flatlaf.FlatIntelliJLaf;
import com.stoman.dao.KhoDAO;
import com.stoman.dao.NhanVienDAO;
import com.stoman.entity.Kho;
import com.stoman.entity.NhanVien;
import com.stoman.utils.Auth;
import com.stoman.utils.MsgBox;
import com.stoman.utils.JTextFieldCustom;
import com.stoman.utils.LowerCaseStringConverter;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JLabel;
import javax.swing.RowFilter;
import javax.swing.SwingWorker;
import javax.swing.Timer;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import javax.swing.table.TableStringConverter;

/**
 *
 * @author MinhNH
 */
public class KhoJDialog extends javax.swing.JDialog {

    /**
     * Creates new form KhoJDialog
     */
    public KhoJDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        init();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        pnlBackground = new JPanel();
        pnlChucNang = new JPanel();
        btnMoi = new JButton();
        btnThem = new JButton();
        btnXoa = new JButton();
        btnSua = new JButton();
        pnlThongTinKho = new JPanel();
        lblDiaChi = new JLabel();
        pnlTxtDiaChi = new JScrollPane();
        txtDiaChi = new JTextArea();
        lblMaKho = new JLabel();
        txtMaKho = new JFormattedTextField();
        lblTruongKho = new JLabel();
        cboTruongKho = new JComboBox<>();
        lblTimKiem = new JLabel();
        txtTimKiem = new com.stoman.utils.JTextFieldCustom(defaultSearchKho);
        pnlTblKho = new JScrollPane();
        tblKho = new JTable();

        //======== this ========
        setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("StoMan - Qu\u1ea3n l\u00fd kho");
        setResizable(false);
        addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosed(WindowEvent e) {
                formWindowClosed(e);
            }
        });
        var contentPane = getContentPane();

        //======== pnlBackground ========
        {

            //======== pnlChucNang ========
            {
                pnlChucNang.setBorder(new EmptyBorder(10, 0, 10, 0));
                pnlChucNang.setOpaque(false);
                pnlChucNang.setLayout(new GridLayout());

                //---- btnMoi ----
                btnMoi.setIcon(new ImageIcon(getClass().getResource("/com/stoman/icons/icons8_document_24px.png")));
                btnMoi.setText("M\u1edbi");
                btnMoi.addActionListener(e -> btnMoiActionPerformed(e));
                pnlChucNang.add(btnMoi);

                //---- btnThem ----
                btnThem.setIcon(new ImageIcon(getClass().getResource("/com/stoman/icons/icons8_add_list_24px_4.png")));
                btnThem.setText("Th\u00eam");
                btnThem.addActionListener(e -> btnThemActionPerformed(e));
                pnlChucNang.add(btnThem);

                //---- btnXoa ----
                btnXoa.setIcon(new ImageIcon(getClass().getResource("/com/stoman/icons/icons8_delete_document_24px.png")));
                btnXoa.setText("Xo\u00e1");
                btnXoa.addActionListener(e -> btnXoaActionPerformed(e));
                pnlChucNang.add(btnXoa);

                //---- btnSua ----
                btnSua.setIcon(new ImageIcon(getClass().getResource("/com/stoman/icons/edit-property.png")));
                btnSua.setText("S\u1eeda");
                btnSua.addActionListener(e -> btnSuaActionPerformed(e));
                pnlChucNang.add(btnSua);
            }

            //======== pnlThongTinKho ========
            {
                pnlThongTinKho.setBorder(new TitledBorder(null, "Th\u00f4ng tin kho", TitledBorder.LEADING, TitledBorder.DEFAULT_POSITION,
                    new Font("Tahoma", Font.BOLD, 13), new Color(0x333333)));
                pnlThongTinKho.setOpaque(false);

                //---- lblDiaChi ----
                lblDiaChi.setFont(new Font("Segoe UI", Font.BOLD, 13));
                lblDiaChi.setForeground(new Color(0x666666));
                lblDiaChi.setText("\u0110\u1ecba ch\u1ec9");

                //======== pnlTxtDiaChi ========
                {

                    //---- txtDiaChi ----
                    txtDiaChi.setColumns(20);
                    txtDiaChi.setLineWrap(true);
                    txtDiaChi.setRows(3);
                    txtDiaChi.setWrapStyleWord(true);
                    txtDiaChi.addFocusListener(new FocusAdapter() {
                        @Override
                        public void focusGained(FocusEvent e) {
                            txtDiaChiFocusGained(e);
                        }
                    });
                    pnlTxtDiaChi.setViewportView(txtDiaChi);
                }

                //---- lblMaKho ----
                lblMaKho.setFont(new Font("Segoe UI", Font.BOLD, 13));
                lblMaKho.setForeground(new Color(0x666666));
                lblMaKho.setText("Kho s\u1ed1");

                //---- txtMaKho ----
                txtMaKho.addFocusListener(new FocusAdapter() {
                    @Override
                    public void focusGained(FocusEvent e) {
                        txtMaKhoFocusGained(e);
                    }
                });

                //---- lblTruongKho ----
                lblTruongKho.setFont(new Font("Segoe UI", Font.BOLD, 13));
                lblTruongKho.setForeground(new Color(0x666666));
                lblTruongKho.setText("Tr\u01b0\u1edfng kho");

                GroupLayout pnlThongTinKhoLayout = new GroupLayout(pnlThongTinKho);
                pnlThongTinKho.setLayout(pnlThongTinKhoLayout);
                pnlThongTinKhoLayout.setHorizontalGroup(
                    pnlThongTinKhoLayout.createParallelGroup()
                        .addGroup(pnlThongTinKhoLayout.createSequentialGroup()
                            .addContainerGap()
                            .addGroup(pnlThongTinKhoLayout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                                .addComponent(lblMaKho, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(lblDiaChi, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                            .addGroup(pnlThongTinKhoLayout.createParallelGroup()
                                .addComponent(pnlTxtDiaChi)
                                .addGroup(pnlThongTinKhoLayout.createSequentialGroup()
                                    .addComponent(txtMaKho, GroupLayout.PREFERRED_SIZE, 55, GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(lblTruongKho)
                                    .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(cboTruongKho)))
                            .addContainerGap())
                );
                pnlThongTinKhoLayout.setVerticalGroup(
                    pnlThongTinKhoLayout.createParallelGroup()
                        .addGroup(pnlThongTinKhoLayout.createSequentialGroup()
                            .addContainerGap()
                            .addGroup(pnlThongTinKhoLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                .addComponent(lblMaKho)
                                .addComponent(txtMaKho, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                .addComponent(cboTruongKho, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                .addComponent(lblTruongKho))
                            .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                            .addGroup(pnlThongTinKhoLayout.createParallelGroup()
                                .addGroup(pnlThongTinKhoLayout.createSequentialGroup()
                                    .addComponent(lblDiaChi)
                                    .addGap(0, 70, Short.MAX_VALUE))
                                .addComponent(pnlTxtDiaChi))
                            .addContainerGap())
                );
            }

            //---- lblTimKiem ----
            lblTimKiem.setForeground(new Color(0x333333));
            lblTimKiem.setIcon(new ImageIcon(getClass().getResource("/com/stoman/icons/search_24px.png")));

            //---- txtTimKiem ----
            txtTimKiem.addKeyListener(new KeyAdapter() {
                @Override
                public void keyReleased(KeyEvent e) {
                    txtTimKiemKeyReleased(e);
                }
            });

            //======== pnlTblKho ========
            {
                pnlTblKho.setBorder(new TitledBorder(null, "Danh s\u00e1ch kho", TitledBorder.LEADING, TitledBorder.DEFAULT_POSITION,
                    new Font("Tahoma", Font.BOLD, 13), new Color(0x333333)));
                pnlTblKho.setOpaque(false);

                //---- tblKho ----
                tblKho.setModel(new DefaultTableModel(
                    new Object[][] {
                    },
                    new String[] {
                        "Title 1", "Title 2", "Title 3", "Title 4"
                    }
                ) {
                    boolean[] columnEditable = new boolean[] {
                        false, false, false, false
                    };
                    @Override
                    public boolean isCellEditable(int rowIndex, int columnIndex) {
                        return columnEditable[columnIndex];
                    }
                });
                tblKho.setOpaque(false);
                tblKho.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
                tblKho.addMouseListener(new MouseAdapter() {
                    @Override
                    public void mouseClicked(MouseEvent e) {
                        tblKhoMouseClicked(e);
                    }
                });
                pnlTblKho.setViewportView(tblKho);
            }

            GroupLayout pnlBackgroundLayout = new GroupLayout(pnlBackground);
            pnlBackground.setLayout(pnlBackgroundLayout);
            pnlBackgroundLayout.setHorizontalGroup(
                pnlBackgroundLayout.createParallelGroup()
                    .addGroup(GroupLayout.Alignment.TRAILING, pnlBackgroundLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(pnlBackgroundLayout.createParallelGroup()
                            .addComponent(pnlTblKho, GroupLayout.Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(pnlThongTinKho, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(10, 10, 10))
                    .addGroup(GroupLayout.Alignment.TRAILING, pnlBackgroundLayout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addGroup(pnlBackgroundLayout.createParallelGroup(GroupLayout.Alignment.TRAILING)
                            .addGroup(pnlBackgroundLayout.createSequentialGroup()
                                .addComponent(lblTimKiem)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtTimKiem))
                            .addComponent(pnlChucNang, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(30, 30, 30))
            );
            pnlBackgroundLayout.setVerticalGroup(
                pnlBackgroundLayout.createParallelGroup()
                    .addGroup(GroupLayout.Alignment.TRAILING, pnlBackgroundLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(pnlThongTinKho, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(pnlChucNang, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addGroup(pnlBackgroundLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                            .addComponent(lblTimKiem)
                            .addComponent(txtTimKiem, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                        .addGap(10, 10, 10)
                        .addComponent(pnlTblKho, GroupLayout.DEFAULT_SIZE, 223, Short.MAX_VALUE)
                        .addGap(10, 10, 10))
            );
        }

        GroupLayout contentPaneLayout = new GroupLayout(contentPane);
        contentPane.setLayout(contentPaneLayout);
        contentPaneLayout.setHorizontalGroup(
            contentPaneLayout.createParallelGroup()
                .addComponent(pnlBackground, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        contentPaneLayout.setVerticalGroup(
            contentPaneLayout.createParallelGroup()
                .addComponent(pnlBackground, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        pack();
        setLocationRelativeTo(getOwner());
    }// </editor-fold>//GEN-END:initComponents

    private void tblKhoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblKhoMouseClicked
        // TODO add your handling code here:
        this.row = tblKho.getSelectedRow();
        this.edit();
    }//GEN-LAST:event_tblKhoMouseClicked

    private void btnMoiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMoiActionPerformed
        // TODO add your handling code here:
        clearForm();
    }//GEN-LAST:event_btnMoiActionPerformed

    private void btnThemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnThemActionPerformed
        // TODO add your handling code here:
        insert();
    }//GEN-LAST:event_btnThemActionPerformed

    private void btnXoaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnXoaActionPerformed
        // TODO add your handling code here:
        delete();
    }//GEN-LAST:event_btnXoaActionPerformed

    private void btnSuaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSuaActionPerformed
        // TODO add your handling code here:
        update();
    }//GEN-LAST:event_btnSuaActionPerformed

    private void txtTimKiemKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtTimKiemKeyReleased
        // TODO add your handling code here:
        search();
    }//GEN-LAST:event_txtTimKiemKeyReleased

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        // TODO add your handling code here:
        this.timer.stop();
    }//GEN-LAST:event_formWindowClosed

    private void txtMaKhoFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtMaKhoFocusGained
        // TODO add your handling code here:
        txtMaKho.selectAll();
    }//GEN-LAST:event_txtMaKhoFocusGained

    private void txtDiaChiFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDiaChiFocusGained
        // TODO add your handling code here:
        txtDiaChi.selectAll();
    }//GEN-LAST:event_txtDiaChiFocusGained

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            javax.swing.UIManager.setLookAndFeel(new FlatIntelliJLaf());
        } catch (UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(KhoJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                KhoJDialog dialog = new KhoJDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JPanel pnlBackground;
    private JPanel pnlChucNang;
    private JButton btnMoi;
    private JButton btnThem;
    private JButton btnXoa;
    private JButton btnSua;
    private JPanel pnlThongTinKho;
    private JLabel lblDiaChi;
    private JScrollPane pnlTxtDiaChi;
    private JTextArea txtDiaChi;
    private JLabel lblMaKho;
    private JFormattedTextField txtMaKho;
    private JLabel lblTruongKho;
    private JComboBox<String> cboTruongKho;
    private JLabel lblTimKiem;
    private JTextField txtTimKiem;
    private JScrollPane pnlTblKho;
    private JTable tblKho;
    // End of variables declaration//GEN-END:variables

    private KhoDAO kDAO;
    private NhanVienDAO nvDAO;

    private DefaultTableModel tblModel;
    private TableRowSorter<TableModel> sorterKho;
    
    private int row = -1;

    private String defaultSearchKho = "Nhập từ khoá tìm kiếm kho";

    private void init() {
        setLocationRelativeTo(null);
        
        this.kDAO = new KhoDAO();
        this.nvDAO = new NhanVienDAO();

        this.formatTable();

        this.fillToComboBox();
        this.fillToTable();
        this.updateStatus();

        this.timer.start();
    }

    // Tạo tiêu đề và định dạng bảng
    private void formatTable() {
        String header[] = {"MÃ KHO", "ĐỊA CHỈ", "TRƯỞNG KHO"};
        tblModel = new DefaultTableModel(header, 0) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
            
            Class[] types = new Class[] {
                Integer.class, String.class, NhanVien.class
            };

            @Override
            public Class getColumnClass(int columnIndex) {
                return types[columnIndex];
            }
        };
        tblKho.setModel(tblModel);
        
        // Set Table Sorter
        sorterKho = new TableRowSorter<TableModel>(tblModel);
        sorterKho.setStringConverter(new LowerCaseStringConverter());
        tblKho.setRowSorter(sorterKho);

        // Điều chỉnh size column
        tblKho.getColumnModel().getColumn(0).setPreferredWidth(22);
        tblKho.getColumnModel().getColumn(1).setPreferredWidth(130);
        tblKho.getColumnModel().getColumn(2).setPreferredWidth(107);
        
        DefaultTableCellRenderer rightRenderer = new DefaultTableCellRenderer();
        rightRenderer.setHorizontalAlignment(JLabel.CENTER);
        tblKho.getColumnModel().getColumn(0).setCellRenderer(rightRenderer);
    }

    // Đổ dữ liệu combobox mã kho
    private void fillToComboBox() {
        DefaultComboBoxModel model = (DefaultComboBoxModel) cboTruongKho.getModel();
        model.removeAllElements();
        try {
            List<NhanVien> list = nvDAO.selectTruongKho();
            model.addElement(new NhanVien("Chọn trưởng kho..."));
            for (NhanVien nv : list) {
                model.addElement(nv);
            }
        } catch (Exception e) {
            MsgBox.alert(this, "Lỗi truy vấn dữ liệu!");
            e.printStackTrace();
        }
    }

    // Đổ dữ liệu vào bảng
    private SwingWorker worker;

    private void fillToTable() {
        if (worker != null) {
            worker.cancel(true);
        }
        tblModel.setRowCount(0);
        try {
            worker = new SwingWorker() {
                @Override
                protected Object doInBackground() throws Exception {
                    Thread.sleep(100);
                    String keyword = txtTimKiem.getText();
                    if (keyword.equals(defaultSearchKho)) {
                        keyword = "";
                    }
                    List<Kho> list = kDAO.selectAll();
                    for (Kho k : list) {
                        if (worker.isCancelled()) {
                            break;
                        }
                        NhanVien tk = nvDAO.selectByID(k.getMaTK());
                        tblModel.addRow(new Object[]{
                            k.getMaKho(),
                            k.getDiaChi(),
                            tk == null ? new NhanVien("<none>") : tk
                        });
                    }
                    if (worker.isCancelled()) {
                        tblModel.setRowCount(0);
                    }
                    return null;
                }

                @Override
                protected void done() {
                    if (row >= 0) {
                        tblKho.setRowSelectionInterval(row, row);
                    }
                }
                
            };
            worker.execute();
        } catch (Exception e) {
            MsgBox.alert(this, "Lỗi truy vấn dữ liệu!");
            e.printStackTrace();
        }
    }

    // Cập nhật trạng thái nút và form
    private void updateStatus() {
        boolean edit = (this.row >= 0);
        boolean isManager = Auth.isManager();

        pnlChucNang.setVisible(isManager);
        pnlThongTinKho.setVisible(isManager);

        txtMaKho.setEditable(!edit);
        btnThem.setEnabled(!edit);
        btnSua.setEnabled(edit);
        btnXoa.setEnabled(edit);

    }

    // Lấy dữ liệu từ form
    private Kho getForm() {
        Kho k = new Kho();
        NhanVien nv = new NhanVien();
        if (cboTruongKho.getSelectedIndex() == 0) {
            nv.setMaNV(null);
        } else {
            nv = (NhanVien) cboTruongKho.getSelectedItem();
        }
        k.setMaKho(Integer.parseInt(txtMaKho.getText()));
        k.setDiaChi(txtDiaChi.getText());
        int index = this.cboTruongKho.getSelectedIndex();
        if (index != 0) {
            k.setMaTK(((NhanVien) this.cboTruongKho.getSelectedItem()).getMaNV());
        } else {
            k.setMaTK(null);
        }
        return k;
    }

    // Hiển thị dữ liệu lên form
    private void setForm(Kho k, NhanVien nv) {
        txtMaKho.setText(String.valueOf(k.getMaKho()));
        txtDiaChi.setText(k.getDiaChi());
        cboTruongKho.setSelectedItem(nv);
    }

    // Xoá trắng form
    private void clearForm() {
        txtMaKho.setText("");
        txtDiaChi.setText("");
        tblKho.clearSelection();
        cboTruongKho.setSelectedIndex(0);
        this.row = -1;
        this.updateStatus();
    }

    // Hiển thị dữ liệu đang chọn trên bảng lên form
    private void edit() {
        int maKho = (int) tblKho.getValueAt(tblKho.convertRowIndexToModel(this.row), 0);
        String maNV = ((NhanVien) tblKho.getValueAt(this.row, 2)).getMaNV();
        Kho k = kDAO.selectByID(maKho);
        NhanVien nv = nvDAO.selectByID(maNV);
        this.setForm(k, nv);
        this.updateStatus();
    }

    // Xác thực dữ liệu trên form
    private boolean isValidated() {
        if (txtMaKho.getText().isEmpty()) {
            MsgBox.alert(this, "Chưa nhập số kho!");
            txtMaKho.requestFocus();
            return false;
        }
        try {
            int maKho = Integer.parseInt(txtMaKho.getText());
            if (maKho < 0) {
                throw new NumberFormatException();
            }
        } catch (NumberFormatException e) {
            MsgBox.alert(this, "Mã kho phải là số và lớn hơn 0!");
            txtMaKho.requestFocus();
            return false;
        }
        if (txtDiaChi.getText().isEmpty()) {
            MsgBox.alert(this, "Chưa nhập địa chỉ!");
            txtDiaChi.requestFocus();
            return false;
        }
        if (cboTruongKho.getSelectedIndex() == 0) {
            MsgBox.alert(this, "Chưa chọn trưởng kho!");
            return false;
        }
        return true;
    }

    // Thêm kho mới
    private void insert() {
        if (isValidated()) {
            Kho k = getForm();
            if (kDAO.selectByID(k.getMaKho()) != null) {
                MsgBox.alert(this, "Mã kho đã tồn tại!");
                return;
            }
            try {
                kDAO.insert(k);
                this.fillToTable();
                this.clearForm();
                MsgBox.alert(this, "Thêm mới thành công!");
            } catch (Exception e) {
                MsgBox.alert(this, "Thêm mới thất bại!");
                e.printStackTrace();
            }
        }
    }
    // Cập nhật kho

    private void update() {
        if (isValidated()) {
            Kho k = getForm();
            try {
                kDAO.update(k);
                this.fillToTable();
                MsgBox.alert(this, "Cập nhật thành công!");
            } catch (Exception e) {
                MsgBox.alert(this, "Cập nhật thất bại!");
                e.printStackTrace();
            }
        }
    }

    // Xoá kho
    private void delete() {
        String message = "Các hàng hoá đang lưu trữ trong kho này cũng sẽ bị xoá!"
                + "\nBạn có muốn tiếp tục xoá không?";
        if (MsgBox.confirm(this, message)) {
            try {
                int maKho = (int) tblKho.getValueAt(this.row, 0);
                kDAO.delete(maKho);
                this.fillToTable();
                this.clearForm();
                MsgBox.alert(this, "Xoá kho thành công!");
            } catch (Exception e) {
                MsgBox.alert(this, "Xoá kho thất bại!");
                e.printStackTrace();
            }
        }
    }

    private void search() {
        String keyword = txtTimKiem.getText().toLowerCase();

        RowFilter<TableModel, Object> rf = null;
        try {
            rf = RowFilter.regexFilter(keyword.toLowerCase());
        } catch (Exception e) {
            return;
        }
        sorterKho.setRowFilter(rf);
    }

    // Đỗ lại dữ liệu 
    public void refreshForm() {
        this.fillToComboBox();
        this.fillToTable();

        this.timer.restart();
    }

    // sau hai phút tải lại dữ liệu
    private Timer timer = new Timer(120000, (e) -> {
        refreshForm();
    });

}

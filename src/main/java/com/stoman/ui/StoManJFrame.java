/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.stoman.ui;

import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import javax.swing.GroupLayout;
import javax.swing.LayoutStyle;
import javax.swing.border.*;
import com.formdev.flatlaf.FlatIntelliJLaf;
import com.formdev.flatlaf.themes.FlatMacLightLaf;
import com.stoman.dao.KhoDAO;
import com.stoman.dao.LoaiHangHoaDAO;
import com.stoman.dao.ThongKeDAO;
import com.stoman.entity.Kho;
import com.stoman.entity.LoaiHangHoa;
import com.stoman.utils.Auth;
import com.stoman.utils.MsgBox;
import com.stoman.utils.XImages;
import com.stoman.utils.XNumber;
import java.awt.Color;
import java.awt.Font;
import java.awt.GradientPaint;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.sql.SQLException;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.Timer;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.SubCategoryAxis;
import org.jfree.chart.block.BlockBorder;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.renderer.category.BarRenderer;
import org.jfree.chart.renderer.category.StandardBarPainter;
import org.jfree.chart.title.LegendTitle;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.ui.RectangleEdge;

/**
 *
 * @author Huy
 */
public class StoManJFrame extends javax.swing.JFrame {

    /**
     * Creates new form StoManJFrame
     */
    public StoManJFrame() {
        initComponents();
        init();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        menuBar = new JMenuBar();
        mnuHeThong = new JMenu();
        mniTaiKhoan = new JMenuItem();
        mniDoiMK = new JMenuItem();
        mniThoat = new JMenuItem();
        mnuQuanLy = new JMenu();
        mniHangHoa = new JMenuItem();
        mniDoiTac = new JMenuItem();
        mniKho = new JMenuItem();
        mniPhieuNhapXuat = new JMenuItem();
        mniPhieuKiemKho = new JMenuItem();
        mniNhanVien = new JMenuItem();
        mnuTroGiup = new JMenu();
        mniGioiThieu = new JMenuItem();
        toolBar = new javax.swing.JToolBar() {
            @Override
            protected void paintComponent(Graphics g){
                Graphics2D g2 = (Graphics2D)g.create();

                Color startColor = new Color(141, 220, 250);
                Color endColor = new Color(137, 236, 186);

                g2.setPaint(new GradientPaint(0, 0, startColor, 0, getHeight(), endColor));
                g2.fillRect(0, 0, getWidth(), getHeight());

                g2.dispose();
            }
        };
        btnTaiKhoan = new JButton();
        btnThoat = new JButton();
        btnNhapXuat = new JButton();
        btnKiemKho = new JButton();
        btnDoiTac = new JButton();
        cboThongTin = new JButton();
        tabs = new JTabbedPane();
        pnlTongQuan = new JPanel();
        pnlBieuDo = new JPanel();
        pnlThongTin = new JPanel();
        pnlLuongNhap = new JPanel();
        lblLuongNhap = new JLabel();
        lblSoLuongNhap = new JLabel();
        pnlLuongXuat = new JPanel();
        lblLuongXuat = new JLabel();
        lblSoLuongXuat = new JLabel();
        pnlLuongTonKho = new JPanel();
        lblTonKho = new JLabel();
        lblSoLuongTK = new JLabel();
        separator10 = new JSeparator();
        lblDShangHoa1 = new JLabel();
        lblLocBieuDo = new JPanel();
        jPanel1 = new JPanel();
        lblKhoTQ = new JLabel();
        cboKhoTQ = new JComboBox<>();
        jPanel3 = new JPanel();
        lblNamTQ = new JLabel();
        cboNamTQ = new JComboBox<>();
        jPanel4 = new JPanel();
        lblQuyTQ = new JLabel();
        cboQuyTQ = new JComboBox<>();
        pnlTonKho = new JPanel();
        slpHangTK = new JSplitPane();
        pnlHangTonKho = new JPanel();
        lblTblLuuTru = new JScrollPane();
        tblLuuTru = new JTable();
        separator = new JSeparator();
        pnlTongGiaTri = new JPanel();
        lblTongGiaTri = new JLabel();
        lblSumTongGiaTri = new JLabel();
        pnlTongTonKho = new JPanel();
        lblTonKhoLT = new JLabel();
        lblSoLuongTKLT = new JLabel();
        lblPhanLoaiHH = new JLabel();
        lblKhoLT = new JLabel();
        cboKhoLT = new JComboBox();
        lblDShangHoa = new JLabel();
        lblLoaiHangHoaLT = new JLabel();
        lblTimKiemLT = new JLabel();
        cboLoaiHangHoaLT = new JComboBox();
        txtTimKiemLT = new com.stoman.utils.JTextFieldCustom();
        separator6 = new JSeparator();
        lblTheoLT = new JLabel();
        cboTimKiemLT = new JComboBox<>();
        pnlTop10HangTK = new JPanel();
        splTop10HangTK = new JSplitPane();
        pnlTopHH = new JPanel();
        lblTopHH = new JLabel();
        oblTopHH = new JScrollPane();
        tblTopHH = new JTable();
        pnlTopLHH = new JPanel();
        lblTopLHH = new JLabel();
        jspTopLHH = new JScrollPane();
        tblTopLHH = new JTable();
        pnlTKNhap = new JPanel();
        slpTKNhap = new JSplitPane();
        pnlHangNhap = new JPanel();
        separator18 = new JSeparator();
        lblKhoNhap = new JLabel();
        cboKhoNhap = new JComboBox();
        lblLoaiHangHoaNhap = new JLabel();
        cboLoaiHangHoaNhap = new JComboBox();
        separator5 = new JSeparator();
        lblTrongNhap = new JLabel();
        lblThangNhap = new JLabel();
        cboThangNhap = new JComboBox();
        lblNamNhap = new JLabel();
        cboNamNhap = new JComboBox();
        lblPhanLoaiN = new JLabel();
        separator4 = new JSeparator();
        pnlTongLGNhap = new JPanel();
        lblTongGiaTriNhap = new JLabel();
        lblTongSoGTN = new JLabel();
        pnlTongGTNhap = new JPanel();
        lblTongLuongNhap = new JLabel();
        lblTongSoLN = new JLabel();
        lblDShangHoaNhap = new JLabel();
        lblTimKiemNhap = new JLabel();
        txtTimKiemNhap = new com.stoman.utils.JTextFieldCustom();
        lblTheoNhap = new JLabel();
        cboTimKiemNhap = new JComboBox<>();
        lblTblTKnhap = new JScrollPane();
        tblTKnhap = new JTable();
        pnlTop10HangNhap = new JPanel();
        splTop10HangNhap = new JSplitPane();
        pnlTopLHHNhap = new JPanel();
        lblTopLHHNhap = new JLabel();
        scplTopLHHNhap = new JScrollPane();
        tblTopLHHNhap = new JTable();
        pnlTopHHNhap = new JPanel();
        lblTopHHNhap = new JLabel();
        oblTopHHNhap = new JScrollPane();
        tblTopHHNhap = new JTable();
        pnlTKXuat = new JPanel();
        slpTKXuat = new JSplitPane();
        pnlHangXuat = new JPanel();
        separator25 = new JSeparator();
        lblTrongXuat = new JLabel();
        lblThangXuat = new JLabel();
        cboThangXuat = new JComboBox();
        lblNamXuat = new JLabel();
        cboNamXuat = new JComboBox();
        lblPhanXuat = new JLabel();
        separator26 = new JSeparator();
        pnlTongLGXuat = new JPanel();
        lblTongGiaTriXuat = new JLabel();
        lblTongSoGTX = new JLabel();
        lblDShangHoaXuat = new JLabel();
        lblTimKiemXuat = new JLabel();
        txtTimKiemXuat = new com.stoman.utils.JTextFieldCustom();
        pnlTongGTXuat = new JPanel();
        lblTongLuongXuat = new JLabel();
        lblTongSoLX = new JLabel();
        lblTheoXuat = new JLabel();
        cboTimKiemXuat = new JComboBox<>();
        lblTblTKxuat = new JScrollPane();
        tblTKxuat = new JTable();
        separator24 = new JSeparator();
        lblKhoXuat = new JLabel();
        cboKhoXuat = new JComboBox();
        lblLoaiHangHoaXuat = new JLabel();
        cboLoaiHangHoaXuat = new JComboBox();
        pnlTopHangXuat = new JPanel();
        splTopHangXuat = new JSplitPane();
        pnlTopHHX = new JPanel();
        lblTopHHXuat = new JLabel();
        oblTopHHXuat = new JScrollPane();
        tblTopHHXuat = new JTable();
        pnlTopLHHX = new JPanel();
        lblTopLHHXuat = new JLabel();
        pnlTopLHHXuat = new JScrollPane();
        tblTopLHHXuat = new JTable();
        pnlTongHop = new JPanel();
        slpTongHop = new JSplitPane();
        pnlTopGiaTriNhapXuat = new JPanel();
        slpTopGiaTriNhapXuat = new JSplitPane();
        pnlTopHHTH = new JPanel();
        oblTopHHTH = new JScrollPane();
        tblTopHHTH = new JTable();
        lblTopHHTH = new JLabel();
        pnlTopLHHTH = new JPanel();
        lblTopLHHTH = new JLabel();
        sclTopLHHTH = new JScrollPane();
        tblTopLHHTH = new JTable();
        pnlCanCanXuatNhap = new JPanel();
        lblKhoTH = new JLabel();
        lblThangTH = new JLabel();
        pnlTongLGXuatTH = new JPanel();
        lblTongGiaTriXuatTH = new JLabel();
        lblTongSoGTXTH = new JLabel();
        cboThangTH = new JComboBox();
        lblLoaiHangHoaTH = new JLabel();
        cboLoaiHangHoaTH = new JComboBox();
        pnlTongLGNhapTH = new JPanel();
        lblTongGiaTriNhapTH = new JLabel();
        lblTongSoGTNTH = new JLabel();
        lblDSTongHop = new JLabel();
        lblTimKiemTH = new JLabel();
        pnlTongCCGTXuatNhap = new JPanel();
        lblTongGiaTriXN = new JLabel();
        lblTongSoGTXN = new JLabel();
        txtTimKiemTH = new com.stoman.utils.JTextFieldCustom();
        lblTheoTH = new JLabel();
        cboTimKiemTH = new JComboBox<>();
        lblTblTongHop = new JScrollPane();
        tblTongHop = new JTable();
        separator29 = new JSeparator();
        lblPhanTH = new JLabel();
        cboKhoTH = new JComboBox();
        separator30 = new JSeparator();
        lblTrongTH = new JLabel();
        lblNamTH = new JLabel();
        cboNamTH = new JComboBox();
        separator31 = new JSeparator();
        pnlTrangThai = new JPanel();
        lblDongHo = new JLabel();
        lblTrangThai = new JLabel();

        //======== this ========
        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        setTitle("STOMAN - STROGE MANAGER SYSTEM");
        setMinimumSize(new Dimension(1020, 700));
        var contentPane = getContentPane();
        contentPane.setLayout(new BorderLayout());

        //======== menuBar ========
        {

            //======== mnuHeThong ========
            {
                mnuHeThong.setText("H\u1ec7 th\u1ed1ng");

                //---- mniTaiKhoan ----
                mniTaiKhoan.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_O, KeyEvent.CTRL_DOWN_MASK));
                mniTaiKhoan.setIcon(new ImageIcon(getClass().getResource("/com/stoman/icons/logout.png")));
                mniTaiKhoan.setText("\u0110\u0103ng xu\u1ea5t");
                mniTaiKhoan.addActionListener(e -> mniTaiKhoanActionPerformed(e));
                mnuHeThong.add(mniTaiKhoan);

                //---- mniDoiMK ----
                mniDoiMK.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_O, KeyEvent.CTRL_DOWN_MASK));
                mniDoiMK.setIcon(new ImageIcon(getClass().getResource("/com/stoman/icons/password-reset.png")));
                mniDoiMK.setText("\u0110\u1ed5i m\u1eadt kh\u1ea9u");
                mniDoiMK.addActionListener(e -> mniDoiMKActionPerformed(e));
                mnuHeThong.add(mniDoiMK);
                mnuHeThong.addSeparator();

                //---- mniThoat ----
                mniThoat.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_O, KeyEvent.CTRL_DOWN_MASK));
                mniThoat.setIcon(new ImageIcon(getClass().getResource("/com/stoman/icons/close.png")));
                mniThoat.setText("Tho\u00e1t");
                mniThoat.addActionListener(e -> mniThoatActionPerformed(e));
                mnuHeThong.add(mniThoat);
            }
            menuBar.add(mnuHeThong);

            //======== mnuQuanLy ========
            {
                mnuQuanLy.setText("Qu\u1ea3n l\u00fd");

                //---- mniHangHoa ----
                mniHangHoa.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_F1, KeyEvent.CTRL_DOWN_MASK));
                mniHangHoa.setIcon(new ImageIcon(getClass().getResource("/com/stoman/icons/cardboard-box.png")));
                mniHangHoa.setText("H\u00e0ng ho\u00e1");
                mniHangHoa.addActionListener(e -> mniHangHoaActionPerformed(e));
                mnuQuanLy.add(mniHangHoa);

                //---- mniDoiTac ----
                mniDoiTac.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_F2, KeyEvent.CTRL_DOWN_MASK));
                mniDoiTac.setIcon(new ImageIcon(getClass().getResource("/com/stoman/icons/handshake.png")));
                mniDoiTac.setText("\u0110\u1ed1i t\u00e1c");
                mniDoiTac.addActionListener(e -> mniDoiTacActionPerformed(e));
                mnuQuanLy.add(mniDoiTac);

                //---- mniKho ----
                mniKho.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_F3, KeyEvent.CTRL_DOWN_MASK));
                mniKho.setIcon(new ImageIcon(getClass().getResource("/com/stoman/icons/warehouse.png")));
                mniKho.setText("Kho");
                mniKho.addActionListener(e -> mniKhoActionPerformed(e));
                mnuQuanLy.add(mniKho);
                mnuQuanLy.addSeparator();

                //---- mniPhieuNhapXuat ----
                mniPhieuNhapXuat.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_F4, KeyEvent.CTRL_DOWN_MASK));
                mniPhieuNhapXuat.setIcon(new ImageIcon(getClass().getResource("/com/stoman/icons/compare.png")));
                mniPhieuNhapXuat.setText("Phi\u1ebfu nh\u1eadp xu\u1ea5t");
                mniPhieuNhapXuat.addActionListener(e -> mniPhieuNhapXuatActionPerformed(e));
                mnuQuanLy.add(mniPhieuNhapXuat);

                //---- mniPhieuKiemKho ----
                mniPhieuKiemKho.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_F5, KeyEvent.CTRL_DOWN_MASK));
                mniPhieuKiemKho.setIcon(new ImageIcon(getClass().getResource("/com/stoman/icons/attendance.png")));
                mniPhieuKiemKho.setText("Phi\u1ebfu ki\u1ec3m kho");
                mniPhieuKiemKho.addActionListener(e -> mniPhieuKiemKhoActionPerformed(e));
                mnuQuanLy.add(mniPhieuKiemKho);
                mnuQuanLy.addSeparator();

                //---- mniNhanVien ----
                mniNhanVien.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_F6, KeyEvent.CTRL_DOWN_MASK));
                mniNhanVien.setIcon(new ImageIcon(getClass().getResource("/com/stoman/icons/name-tag.png")));
                mniNhanVien.setText("Nh\u00e2n vi\u00ean");
                mniNhanVien.addActionListener(e -> mniNhanVienActionPerformed(e));
                mnuQuanLy.add(mniNhanVien);
            }
            menuBar.add(mnuQuanLy);

            //======== mnuTroGiup ========
            {
                mnuTroGiup.setText("Tr\u1ee3 gi\u00fap");

                //---- mniGioiThieu ----
                mniGioiThieu.setIcon(new ImageIcon(getClass().getResource("/com/stoman/icons/info.png")));
                mniGioiThieu.setText("Gi\u1edbi thi\u1ec7u ph\u1ea7n m\u1ec1m");
                mniGioiThieu.addActionListener(e -> mniGioiThieuActionPerformed(e));
                mnuTroGiup.add(mniGioiThieu);
            }
            menuBar.add(mnuTroGiup);
        }
        setJMenuBar(menuBar);

        //======== toolBar ========
        {
            toolBar.setRollover(true);

            //---- btnTaiKhoan ----
            btnTaiKhoan.setIcon(new ImageIcon(getClass().getResource("/com/stoman/icons/logout.png")));
            btnTaiKhoan.setText("\u0110\u0103ng xu\u1ea5t");
            btnTaiKhoan.setFocusable(false);
            btnTaiKhoan.setHorizontalTextPosition(SwingConstants.CENTER);
            btnTaiKhoan.setMargin(new Insets(2, 10, 2, 10));
            btnTaiKhoan.setVerticalTextPosition(SwingConstants.BOTTOM);
            btnTaiKhoan.addActionListener(e -> btnTaiKhoanActionPerformed(e));
            toolBar.add(btnTaiKhoan);

            //---- btnThoat ----
            btnThoat.setIcon(new ImageIcon(getClass().getResource("/com/stoman/icons/close.png")));
            btnThoat.setText("Tho\u00e1t");
            btnThoat.setFocusable(false);
            btnThoat.setHorizontalTextPosition(SwingConstants.CENTER);
            btnThoat.setMargin(new Insets(2, 10, 2, 10));
            btnThoat.setVerticalTextPosition(SwingConstants.BOTTOM);
            btnThoat.addActionListener(e -> btnThoatActionPerformed(e));
            toolBar.add(btnThoat);
            toolBar.addSeparator();

            //---- btnNhapXuat ----
            btnNhapXuat.setIcon(new ImageIcon(getClass().getResource("/com/stoman/icons/up-down-arrow.png")));
            btnNhapXuat.setText("Nh\u1eadp/Xu\u1ea5t");
            btnNhapXuat.setFocusable(false);
            btnNhapXuat.setHorizontalTextPosition(SwingConstants.CENTER);
            btnNhapXuat.setMargin(new Insets(2, 10, 2, 10));
            btnNhapXuat.setVerticalTextPosition(SwingConstants.BOTTOM);
            btnNhapXuat.addActionListener(e -> btnNhapXuatActionPerformed(e));
            toolBar.add(btnNhapXuat);

            //---- btnKiemKho ----
            btnKiemKho.setIcon(new ImageIcon(getClass().getResource("/com/stoman/icons/warehouse.png")));
            btnKiemKho.setText("Ki\u1ec3m kho");
            btnKiemKho.setFocusable(false);
            btnKiemKho.setHorizontalTextPosition(SwingConstants.CENTER);
            btnKiemKho.setMargin(new Insets(2, 10, 2, 10));
            btnKiemKho.setVerticalTextPosition(SwingConstants.BOTTOM);
            btnKiemKho.addActionListener(e -> btnKiemKhoActionPerformed(e));
            toolBar.add(btnKiemKho);

            //---- btnDoiTac ----
            btnDoiTac.setIcon(new ImageIcon(getClass().getResource("/com/stoman/icons/handshake.png")));
            btnDoiTac.setText("Qu\u1ea3n l\u00fd \u0111\u1ed1i t\u00e1c");
            btnDoiTac.setFocusable(false);
            btnDoiTac.setHorizontalTextPosition(SwingConstants.CENTER);
            btnDoiTac.setMargin(new Insets(2, 10, 2, 10));
            btnDoiTac.setVerticalTextPosition(SwingConstants.BOTTOM);
            btnDoiTac.addActionListener(e -> btnDoiTacActionPerformed(e));
            toolBar.add(btnDoiTac);
            toolBar.addSeparator();

            //---- cboThongTin ----
            cboThongTin.setIcon(new ImageIcon(getClass().getResource("/com/stoman/icons/info.png")));
            cboThongTin.setText("Th\u00f4ng tin");
            cboThongTin.setFocusable(false);
            cboThongTin.setHorizontalTextPosition(SwingConstants.CENTER);
            cboThongTin.setMargin(new Insets(2, 10, 2, 10));
            cboThongTin.setVerticalTextPosition(SwingConstants.BOTTOM);
            cboThongTin.addActionListener(e -> cboThongTinActionPerformed(e));
            toolBar.add(cboThongTin);
        }
        contentPane.add(toolBar, BorderLayout.PAGE_START);

        //======== tabs ========
        {
            tabs.setFont(new Font("Segoe UI", Font.PLAIN, 14));

            //======== pnlTongQuan ========
            {

                //======== pnlBieuDo ========
                {
                    pnlBieuDo.setLayout(new BorderLayout());
                }

                //======== pnlThongTin ========
                {
                    pnlThongTin.setLayout(new GridLayout(0, 1));

                    //======== pnlLuongNhap ========
                    {
                        pnlLuongNhap.setBackground(new Color(0xff6666));
                        pnlLuongNhap.setBorder(new SoftBevelBorder(SoftBevelBorder.RAISED));
                        pnlLuongNhap.setLayout(new GridLayout(0, 1));

                        //---- lblLuongNhap ----
                        lblLuongNhap.setFont(new Font("Segoe UI", Font.BOLD, 14));
                        lblLuongNhap.setForeground(Color.white);
                        lblLuongNhap.setHorizontalAlignment(SwingConstants.CENTER);
                        lblLuongNhap.setText("<html><center>L\u01b0\u1ee3ng nh\u1eadp<br>trong n\u0103m</center></html>");
                        pnlLuongNhap.add(lblLuongNhap);

                        //---- lblSoLuongNhap ----
                        lblSoLuongNhap.setFont(new Font("Segoe UI", Font.PLAIN, 24));
                        lblSoLuongNhap.setForeground(Color.white);
                        lblSoLuongNhap.setHorizontalAlignment(SwingConstants.CENTER);
                        lblSoLuongNhap.setText("0");
                        pnlLuongNhap.add(lblSoLuongNhap);
                    }
                    pnlThongTin.add(pnlLuongNhap);

                    //======== pnlLuongXuat ========
                    {
                        pnlLuongXuat.setBackground(new Color(0x0099cc));
                        pnlLuongXuat.setBorder(new SoftBevelBorder(SoftBevelBorder.RAISED));
                        pnlLuongXuat.setLayout(new GridLayout(0, 1));

                        //---- lblLuongXuat ----
                        lblLuongXuat.setFont(new Font("Segoe UI", Font.BOLD, 14));
                        lblLuongXuat.setForeground(Color.white);
                        lblLuongXuat.setHorizontalAlignment(SwingConstants.CENTER);
                        lblLuongXuat.setText("<html><center>L\u01b0\u1ee3ng xu\u1ea5t<br>trong n\u0103m</center></html>");
                        pnlLuongXuat.add(lblLuongXuat);

                        //---- lblSoLuongXuat ----
                        lblSoLuongXuat.setFont(new Font("Segoe UI", Font.PLAIN, 24));
                        lblSoLuongXuat.setForeground(Color.white);
                        lblSoLuongXuat.setHorizontalAlignment(SwingConstants.CENTER);
                        lblSoLuongXuat.setText("0");
                        pnlLuongXuat.add(lblSoLuongXuat);
                    }
                    pnlThongTin.add(pnlLuongXuat);

                    //======== pnlLuongTonKho ========
                    {
                        pnlLuongTonKho.setBackground(new Color(0x00cc66));
                        pnlLuongTonKho.setBorder(new SoftBevelBorder(SoftBevelBorder.RAISED));
                        pnlLuongTonKho.setLayout(new GridLayout(0, 1));

                        //---- lblTonKho ----
                        lblTonKho.setFont(new Font("Segoe UI", Font.BOLD, 14));
                        lblTonKho.setForeground(Color.white);
                        lblTonKho.setHorizontalAlignment(SwingConstants.CENTER);
                        lblTonKho.setText("T\u1ed3n kho hi\u1ec7n t\u1ea1i");
                        pnlLuongTonKho.add(lblTonKho);

                        //---- lblSoLuongTK ----
                        lblSoLuongTK.setFont(new Font("Segoe UI", Font.PLAIN, 24));
                        lblSoLuongTK.setForeground(Color.white);
                        lblSoLuongTK.setHorizontalAlignment(SwingConstants.CENTER);
                        lblSoLuongTK.setText("0");
                        pnlLuongTonKho.add(lblSoLuongTK);
                    }
                    pnlThongTin.add(pnlLuongTonKho);
                }

                //---- separator10 ----
                separator10.setOrientation(SwingConstants.VERTICAL);

                //---- lblDShangHoa1 ----
                lblDShangHoa1.setFont(new Font("Segoe UI", Font.BOLD, 14));
                lblDShangHoa1.setHorizontalAlignment(SwingConstants.CENTER);
                lblDShangHoa1.setText("Bi\u1ec3u \u0111\u1ed3 nh\u1eadp xu\u1ea5t");

                //======== lblLocBieuDo ========
                {
                    lblLocBieuDo.setLayout(new FlowLayout());

                    //======== jPanel1 ========
                    {
                        jPanel1.setLayout(new FlowLayout());

                        //---- lblKhoTQ ----
                        lblKhoTQ.setFont(new Font("Segoe UI", Font.PLAIN, 14));
                        lblKhoTQ.setText("KHO");
                        jPanel1.add(lblKhoTQ);

                        //---- cboKhoTQ ----
                        cboKhoTQ.setFont(new Font("Tahoma", Font.PLAIN, 14));
                        cboKhoTQ.setModel(new DefaultComboBoxModel<>(new String[] {
                            "Item 1",
                            "Item 2",
                            "Item 3",
                            "Item 4"
                        }));
                        cboKhoTQ.addActionListener(e -> cboKhoTQActionPerformed(e));
                        jPanel1.add(cboKhoTQ);
                    }
                    lblLocBieuDo.add(jPanel1);

                    //======== jPanel3 ========
                    {
                        jPanel3.setLayout(new FlowLayout());

                        //---- lblNamTQ ----
                        lblNamTQ.setFont(new Font("Segoe UI", Font.PLAIN, 14));
                        lblNamTQ.setText("N\u0102M");
                        jPanel3.add(lblNamTQ);

                        //---- cboNamTQ ----
                        cboNamTQ.setFont(new Font("Tahoma", Font.PLAIN, 14));
                        cboNamTQ.setModel(new DefaultComboBoxModel<>(new String[] {
                            "Item 1",
                            "Item 2",
                            "Item 3",
                            "Item 4"
                        }));
                        cboNamTQ.addActionListener(e -> cboNamTQActionPerformed(e));
                        jPanel3.add(cboNamTQ);
                    }
                    lblLocBieuDo.add(jPanel3);

                    //======== jPanel4 ========
                    {
                        jPanel4.setLayout(new FlowLayout());

                        //---- lblQuyTQ ----
                        lblQuyTQ.setFont(new Font("Segoe UI", Font.PLAIN, 14));
                        lblQuyTQ.setText("QU\u00dd");
                        jPanel4.add(lblQuyTQ);

                        //---- cboQuyTQ ----
                        cboQuyTQ.setFont(new Font("Tahoma", Font.PLAIN, 14));
                        cboQuyTQ.setModel(new DefaultComboBoxModel<>(new String[] {
                            "C\u1ea3 n\u0103m",
                            "1",
                            "2",
                            "3",
                            "4"
                        }));
                        cboQuyTQ.addActionListener(e -> cboQuyTQActionPerformed(e));
                        jPanel4.add(cboQuyTQ);
                    }
                    lblLocBieuDo.add(jPanel4);
                }

                GroupLayout pnlTongQuanLayout = new GroupLayout(pnlTongQuan);
                pnlTongQuan.setLayout(pnlTongQuanLayout);
                pnlTongQuanLayout.setHorizontalGroup(
                    pnlTongQuanLayout.createParallelGroup()
                        .addGroup(pnlTongQuanLayout.createSequentialGroup()
                            .addContainerGap()
                            .addGroup(pnlTongQuanLayout.createParallelGroup()
                                .addComponent(pnlBieuDo, GroupLayout.DEFAULT_SIZE, 887, Short.MAX_VALUE)
                                .addComponent(lblLocBieuDo, GroupLayout.Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(lblDShangHoa1, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(separator10, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(pnlThongTin, GroupLayout.PREFERRED_SIZE, 169, GroupLayout.PREFERRED_SIZE)
                            .addGap(10, 10, 10))
                );
                pnlTongQuanLayout.setVerticalGroup(
                    pnlTongQuanLayout.createParallelGroup()
                        .addGroup(pnlTongQuanLayout.createSequentialGroup()
                            .addGap(10, 10, 10)
                            .addGroup(pnlTongQuanLayout.createParallelGroup()
                                .addComponent(pnlThongTin, GroupLayout.DEFAULT_SIZE, 598, Short.MAX_VALUE)
                                .addGroup(GroupLayout.Alignment.TRAILING, pnlTongQuanLayout.createSequentialGroup()
                                    .addComponent(lblDShangHoa1)
                                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(lblLocBieuDo, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(pnlBieuDo, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addComponent(separator10, GroupLayout.Alignment.TRAILING))
                            .addGap(10, 10, 10))
                );
            }
            tabs.addTab("T\u1ed5ng quan", pnlTongQuan);

            //======== pnlTonKho ========
            {

                //======== slpHangTK ========
                {
                    slpHangTK.setOrientation(JSplitPane.VERTICAL_SPLIT);

                    //======== pnlHangTonKho ========
                    {

                        //======== lblTblLuuTru ========
                        {

                            //---- tblLuuTru ----
                            tblLuuTru.setModel(new DefaultTableModel(
                                new Object[][] {
                                },
                                new String[] {
                                    "Title 1", "Title 2", "Title 3", "Title 4"
                                }
                            ));
                            tblLuuTru.setRowHeight(25);
                            tblLuuTru.setSelectionMode(ListSelectionModel.SINGLE_INTERVAL_SELECTION);
                            lblTblLuuTru.setViewportView(tblLuuTru);
                        }

                        //---- separator ----
                        separator.setOrientation(SwingConstants.VERTICAL);

                        //======== pnlTongGiaTri ========
                        {
                            pnlTongGiaTri.setBackground(new Color(0x00cc66));
                            pnlTongGiaTri.setBorder(new SoftBevelBorder(SoftBevelBorder.RAISED));
                            pnlTongGiaTri.setLayout(new GridLayout(0, 1));

                            //---- lblTongGiaTri ----
                            lblTongGiaTri.setFont(new Font("Segoe UI", Font.BOLD, 14));
                            lblTongGiaTri.setForeground(Color.white);
                            lblTongGiaTri.setHorizontalAlignment(SwingConstants.CENTER);
                            lblTongGiaTri.setText("T\u1ed5ng Gi\u00e1 Tr\u1ecb");
                            pnlTongGiaTri.add(lblTongGiaTri);

                            //---- lblSumTongGiaTri ----
                            lblSumTongGiaTri.setFont(new Font("Segoe UI", Font.PLAIN, 24));
                            lblSumTongGiaTri.setForeground(Color.white);
                            lblSumTongGiaTri.setHorizontalAlignment(SwingConstants.CENTER);
                            lblSumTongGiaTri.setText("0");
                            pnlTongGiaTri.add(lblSumTongGiaTri);
                        }

                        //======== pnlTongTonKho ========
                        {
                            pnlTongTonKho.setBackground(new Color(0x00cc66));
                            pnlTongTonKho.setBorder(new SoftBevelBorder(SoftBevelBorder.RAISED));
                            pnlTongTonKho.setLayout(new GridLayout(0, 1));

                            //---- lblTonKhoLT ----
                            lblTonKhoLT.setFont(new Font("Segoe UI", Font.BOLD, 14));
                            lblTonKhoLT.setForeground(Color.white);
                            lblTonKhoLT.setHorizontalAlignment(SwingConstants.CENTER);
                            lblTonKhoLT.setText("T\u1ed5ng t\u1ed3n kho");
                            pnlTongTonKho.add(lblTonKhoLT);

                            //---- lblSoLuongTKLT ----
                            lblSoLuongTKLT.setFont(new Font("Segoe UI", Font.PLAIN, 24));
                            lblSoLuongTKLT.setForeground(Color.white);
                            lblSoLuongTKLT.setHorizontalAlignment(SwingConstants.CENTER);
                            lblSoLuongTKLT.setText("0");
                            pnlTongTonKho.add(lblSoLuongTKLT);
                        }

                        //---- lblPhanLoaiHH ----
                        lblPhanLoaiHH.setFont(new Font("Segoe UI", Font.BOLD, 14));
                        lblPhanLoaiHH.setText("Ph\u00e2n lo\u1ea1i danh s\u00e1ch");

                        //---- lblKhoLT ----
                        lblKhoLT.setText("Kho");

                        //---- cboKhoLT ----
                        cboKhoLT.addActionListener(e -> cboKhoLTActionPerformed(e));

                        //---- lblDShangHoa ----
                        lblDShangHoa.setFont(new Font("Segoe UI", Font.BOLD, 14));
                        lblDShangHoa.setHorizontalAlignment(SwingConstants.CENTER);
                        lblDShangHoa.setText("Danh s\u00e1ch h\u00e0ng h\u00f3a");

                        //---- lblLoaiHangHoaLT ----
                        lblLoaiHangHoaLT.setText("Lo\u1ea1i H\u00e0ng H\u00f3a");

                        //---- lblTimKiemLT ----
                        lblTimKiemLT.setIcon(new ImageIcon(getClass().getResource("/com/stoman/icons/search_24px.png")));

                        //---- cboLoaiHangHoaLT ----
                        cboLoaiHangHoaLT.addActionListener(e -> cboLoaiHangHoaLTActionPerformed(e));

                        //---- txtTimKiemLT ----
                        txtTimKiemLT.addKeyListener(new KeyAdapter() {
                            @Override
                            public void keyReleased(KeyEvent e) {
                                txtTimKiemLTKeyReleased(e);
                            }
                        });

                        //---- lblTheoLT ----
                        lblTheoLT.setText("theo");

                        //---- cboTimKiemLT ----
                        cboTimKiemLT.addActionListener(e -> cboTimKiemLTActionPerformed(e));

                        GroupLayout pnlHangTonKhoLayout = new GroupLayout(pnlHangTonKho);
                        pnlHangTonKho.setLayout(pnlHangTonKhoLayout);
                        pnlHangTonKhoLayout.setHorizontalGroup(
                            pnlHangTonKhoLayout.createParallelGroup()
                                .addGroup(pnlHangTonKhoLayout.createSequentialGroup()
                                    .addContainerGap()
                                    .addGroup(pnlHangTonKhoLayout.createParallelGroup(GroupLayout.Alignment.TRAILING)
                                        .addGroup(pnlHangTonKhoLayout.createSequentialGroup()
                                            .addComponent(lblTimKiemLT)
                                            .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(txtTimKiemLT)
                                            .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addComponent(lblTheoLT)
                                            .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addComponent(cboTimKiemLT, GroupLayout.PREFERRED_SIZE, 250, GroupLayout.PREFERRED_SIZE))
                                        .addComponent(lblTblLuuTru, GroupLayout.DEFAULT_SIZE, 809, Short.MAX_VALUE)
                                        .addComponent(lblDShangHoa, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(separator, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(pnlHangTonKhoLayout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                                        .addComponent(pnlTongTonKho, GroupLayout.Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(pnlTongGiaTri, GroupLayout.Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(GroupLayout.Alignment.TRAILING, pnlHangTonKhoLayout.createSequentialGroup()
                                            .addGroup(pnlHangTonKhoLayout.createParallelGroup(GroupLayout.Alignment.TRAILING)
                                                .addComponent(lblKhoLT)
                                                .addComponent(lblLoaiHangHoaLT))
                                            .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                            .addGroup(pnlHangTonKhoLayout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                                                .addComponent(cboKhoLT, GroupLayout.PREFERRED_SIZE, 165, GroupLayout.PREFERRED_SIZE)
                                                .addComponent(cboLoaiHangHoaLT, GroupLayout.PREFERRED_SIZE, 165, GroupLayout.PREFERRED_SIZE)))
                                        .addComponent(separator6)
                                        .addComponent(lblPhanLoaiHH, GroupLayout.PREFERRED_SIZE, 250, GroupLayout.PREFERRED_SIZE))
                                    .addGap(6, 6, 6))
                        );
                        pnlHangTonKhoLayout.setVerticalGroup(
                            pnlHangTonKhoLayout.createParallelGroup()
                                .addGroup(pnlHangTonKhoLayout.createSequentialGroup()
                                    .addContainerGap()
                                    .addGroup(pnlHangTonKhoLayout.createParallelGroup()
                                        .addComponent(separator)
                                        .addGroup(GroupLayout.Alignment.TRAILING, pnlHangTonKhoLayout.createSequentialGroup()
                                            .addComponent(lblDShangHoa, GroupLayout.PREFERRED_SIZE, 20, GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                            .addGroup(pnlHangTonKhoLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                                .addComponent(lblTimKiemLT)
                                                .addComponent(txtTimKiemLT, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                                .addComponent(lblTheoLT)
                                                .addComponent(cboTimKiemLT, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                                            .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(lblTblLuuTru, GroupLayout.DEFAULT_SIZE, 0, Short.MAX_VALUE))
                                        .addGroup(pnlHangTonKhoLayout.createSequentialGroup()
                                            .addComponent(lblPhanLoaiHH)
                                            .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                            .addGroup(pnlHangTonKhoLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                                .addComponent(cboKhoLT, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                                .addComponent(lblKhoLT))
                                            .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                            .addGroup(pnlHangTonKhoLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                                .addComponent(lblLoaiHangHoaLT)
                                                .addComponent(cboLoaiHangHoaLT, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                                            .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(separator6, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(pnlTongGiaTri, GroupLayout.PREFERRED_SIZE, 100, GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(pnlTongTonKho, GroupLayout.PREFERRED_SIZE, 100, GroupLayout.PREFERRED_SIZE)
                                            .addGap(0, 0, Short.MAX_VALUE)))
                                    .addContainerGap())
                        );
                    }
                    slpHangTK.add(pnlHangTonKho, "top");

                    //======== pnlTop10HangTK ========
                    {

                        //======== splTop10HangTK ========
                        {
                            splTop10HangTK.setToolTipText("");
                            splTop10HangTK.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));

                            //======== pnlTopHH ========
                            {
                                pnlTopHH.setPreferredSize(new Dimension(720, 297));

                                //---- lblTopHH ----
                                lblTopHH.setFont(new Font("Segoe UI", Font.BOLD, 14));
                                lblTopHH.setHorizontalAlignment(SwingConstants.CENTER);
                                lblTopHH.setText("10 m\u1eb7t h\u00e0ng t\u1ed3n nhi\u1ec1u nh\u1ea5t");

                                //======== oblTopHH ========
                                {

                                    //---- tblTopHH ----
                                    tblTopHH.setModel(new DefaultTableModel(
                                        new Object[][] {
                                        },
                                        new String[] {
                                            "Title 1", "Title 2", "Title 3", "Title 4"
                                        }
                                    ));
                                    oblTopHH.setViewportView(tblTopHH);
                                }

                                GroupLayout pnlTopHHLayout = new GroupLayout(pnlTopHH);
                                pnlTopHH.setLayout(pnlTopHHLayout);
                                pnlTopHHLayout.setHorizontalGroup(
                                    pnlTopHHLayout.createParallelGroup()
                                        .addGroup(pnlTopHHLayout.createParallelGroup()
                                            .addGroup(pnlTopHHLayout.createSequentialGroup()
                                                .addContainerGap()
                                                .addGroup(pnlTopHHLayout.createParallelGroup()
                                                    .addComponent(oblTopHH, GroupLayout.DEFAULT_SIZE, 708, Short.MAX_VALUE)
                                                    .addComponent(lblTopHH, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                                .addContainerGap()))
                                        .addGap(0, 720, Short.MAX_VALUE)
                                );
                                pnlTopHHLayout.setVerticalGroup(
                                    pnlTopHHLayout.createParallelGroup()
                                        .addGroup(pnlTopHHLayout.createParallelGroup()
                                            .addGroup(pnlTopHHLayout.createSequentialGroup()
                                                .addGap(3, 3, 3)
                                                .addComponent(lblTopHH)
                                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(oblTopHH, GroupLayout.DEFAULT_SIZE, 269, Short.MAX_VALUE)
                                                .addContainerGap()))
                                        .addGap(0, 304, Short.MAX_VALUE)
                                );
                            }
                            splTop10HangTK.setLeftComponent(pnlTopHH);

                            //======== pnlTopLHH ========
                            {
                                pnlTopLHH.setPreferredSize(new Dimension(359, 297));
                                pnlTopLHH.setRequestFocusEnabled(false);

                                //---- lblTopLHH ----
                                lblTopLHH.setFont(new Font("Segoe UI", Font.BOLD, 14));
                                lblTopLHH.setHorizontalAlignment(SwingConstants.CENTER);
                                lblTopLHH.setText("10 lo\u1ea1i h\u00e0ng t\u1ed3n nhi\u1ec1u nh\u1ea5t");

                                //======== jspTopLHH ========
                                {

                                    //---- tblTopLHH ----
                                    tblTopLHH.setModel(new DefaultTableModel(
                                        new Object[][] {
                                        },
                                        new String[] {
                                            "Title 1", "Title 2", "Title 3", "Title 4"
                                        }
                                    ));
                                    jspTopLHH.setViewportView(tblTopLHH);
                                }

                                GroupLayout pnlTopLHHLayout = new GroupLayout(pnlTopLHH);
                                pnlTopLHH.setLayout(pnlTopLHHLayout);
                                pnlTopLHHLayout.setHorizontalGroup(
                                    pnlTopLHHLayout.createParallelGroup()
                                        .addGroup(pnlTopLHHLayout.createParallelGroup()
                                            .addGroup(pnlTopLHHLayout.createSequentialGroup()
                                                .addContainerGap()
                                                .addGroup(pnlTopLHHLayout.createParallelGroup()
                                                    .addComponent(jspTopLHH, GroupLayout.DEFAULT_SIZE, 350, Short.MAX_VALUE)
                                                    .addComponent(lblTopLHH, GroupLayout.DEFAULT_SIZE, 350, Short.MAX_VALUE))
                                                .addContainerGap()))
                                        .addGap(0, 362, Short.MAX_VALUE)
                                );
                                pnlTopLHHLayout.setVerticalGroup(
                                    pnlTopLHHLayout.createParallelGroup()
                                        .addGroup(pnlTopLHHLayout.createParallelGroup()
                                            .addGroup(pnlTopLHHLayout.createSequentialGroup()
                                                .addGap(3, 3, 3)
                                                .addComponent(lblTopLHH)
                                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jspTopLHH, GroupLayout.DEFAULT_SIZE, 269, Short.MAX_VALUE)
                                                .addContainerGap()))
                                        .addGap(0, 304, Short.MAX_VALUE)
                                );
                            }
                            splTop10HangTK.setRightComponent(pnlTopLHH);
                        }

                        GroupLayout pnlTop10HangTKLayout = new GroupLayout(pnlTop10HangTK);
                        pnlTop10HangTK.setLayout(pnlTop10HangTKLayout);
                        pnlTop10HangTKLayout.setHorizontalGroup(
                            pnlTop10HangTKLayout.createParallelGroup()
                                .addComponent(splTop10HangTK)
                        );
                        pnlTop10HangTKLayout.setVerticalGroup(
                            pnlTop10HangTKLayout.createParallelGroup()
                                .addComponent(splTop10HangTK, GroupLayout.Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, 304, Short.MAX_VALUE)
                        );
                    }
                    slpHangTK.add(pnlTop10HangTK, "bottom");
                }

                GroupLayout pnlTonKhoLayout = new GroupLayout(pnlTonKho);
                pnlTonKho.setLayout(pnlTonKhoLayout);
                pnlTonKhoLayout.setHorizontalGroup(
                    pnlTonKhoLayout.createParallelGroup()
                        .addGroup(GroupLayout.Alignment.TRAILING, pnlTonKhoLayout.createSequentialGroup()
                            .addComponent(slpHangTK)
                            .addGap(0, 0, 0))
                );
                pnlTonKhoLayout.setVerticalGroup(
                    pnlTonKhoLayout.createParallelGroup()
                        .addGroup(pnlTonKhoLayout.createSequentialGroup()
                            .addGap(0, 0, 0)
                            .addComponent(slpHangTK))
                );
            }
            tabs.addTab("H\u00e0ng t\u1ed3n kho", pnlTonKho);

            //======== pnlTKNhap ========
            {

                //======== slpTKNhap ========
                {
                    slpTKNhap.setOrientation(JSplitPane.VERTICAL_SPLIT);

                    //======== pnlHangNhap ========
                    {

                        //---- separator18 ----
                        separator18.setOrientation(SwingConstants.VERTICAL);

                        //---- lblKhoNhap ----
                        lblKhoNhap.setText("Kho");

                        //---- cboKhoNhap ----
                        cboKhoNhap.addActionListener(e -> cboKhoNhapActionPerformed(e));

                        //---- lblLoaiHangHoaNhap ----
                        lblLoaiHangHoaNhap.setText("Lo\u1ea1i H\u00e0ng H\u00f3a");

                        //---- cboLoaiHangHoaNhap ----
                        cboLoaiHangHoaNhap.addActionListener(e -> cboLoaiHangHoaNhapActionPerformed(e));

                        //---- lblTrongNhap ----
                        lblTrongNhap.setFont(new Font("Segoe UI", Font.BOLD, 14));
                        lblTrongNhap.setText("Th\u1eddi gian");

                        //---- lblThangNhap ----
                        lblThangNhap.setText("Th\u00e1ng");

                        //---- cboThangNhap ----
                        cboThangNhap.addActionListener(e -> cboThangNhapActionPerformed(e));

                        //---- lblNamNhap ----
                        lblNamNhap.setText("N\u0103m");

                        //---- cboNamNhap ----
                        cboNamNhap.addActionListener(e -> cboNamNhapActionPerformed(e));

                        //---- lblPhanLoaiN ----
                        lblPhanLoaiN.setFont(new Font("Segoe UI", Font.BOLD, 14));
                        lblPhanLoaiN.setText("Ph\u00e2n lo\u1ea1i danh s\u00e1ch");

                        //======== pnlTongLGNhap ========
                        {
                            pnlTongLGNhap.setBackground(new Color(0xff6666));
                            pnlTongLGNhap.setBorder(new SoftBevelBorder(SoftBevelBorder.RAISED));
                            pnlTongLGNhap.setLayout(new GridLayout(0, 1));

                            //---- lblTongGiaTriNhap ----
                            lblTongGiaTriNhap.setFont(new Font("Segoe UI", Font.BOLD, 14));
                            lblTongGiaTriNhap.setForeground(Color.white);
                            lblTongGiaTriNhap.setHorizontalAlignment(SwingConstants.CENTER);
                            lblTongGiaTriNhap.setText("T\u1ed5ng Gi\u00e1 Tr\u1ecb Nh\u1eadp");
                            pnlTongLGNhap.add(lblTongGiaTriNhap);

                            //---- lblTongSoGTN ----
                            lblTongSoGTN.setFont(new Font("Segoe UI", Font.PLAIN, 24));
                            lblTongSoGTN.setForeground(Color.white);
                            lblTongSoGTN.setHorizontalAlignment(SwingConstants.CENTER);
                            lblTongSoGTN.setText("0");
                            pnlTongLGNhap.add(lblTongSoGTN);
                        }

                        //======== pnlTongGTNhap ========
                        {
                            pnlTongGTNhap.setBackground(new Color(0xff6666));
                            pnlTongGTNhap.setBorder(new SoftBevelBorder(SoftBevelBorder.RAISED));
                            pnlTongGTNhap.setLayout(new GridLayout(0, 1));

                            //---- lblTongLuongNhap ----
                            lblTongLuongNhap.setFont(new Font("Segoe UI", Font.BOLD, 14));
                            lblTongLuongNhap.setForeground(Color.white);
                            lblTongLuongNhap.setHorizontalAlignment(SwingConstants.CENTER);
                            lblTongLuongNhap.setText("T\u1ed5ng l\u01b0\u1ee3ng Nh\u1eadp");
                            pnlTongGTNhap.add(lblTongLuongNhap);

                            //---- lblTongSoLN ----
                            lblTongSoLN.setFont(new Font("Segoe UI", Font.PLAIN, 24));
                            lblTongSoLN.setForeground(Color.white);
                            lblTongSoLN.setHorizontalAlignment(SwingConstants.CENTER);
                            lblTongSoLN.setText("0");
                            pnlTongGTNhap.add(lblTongSoLN);
                        }

                        //---- lblDShangHoaNhap ----
                        lblDShangHoaNhap.setFont(new Font("Segoe UI", Font.BOLD, 14));
                        lblDShangHoaNhap.setHorizontalAlignment(SwingConstants.CENTER);
                        lblDShangHoaNhap.setText("Danh s\u00e1ch h\u00e0ng h\u00f3a nh\u1eadp");

                        //---- lblTimKiemNhap ----
                        lblTimKiemNhap.setIcon(new ImageIcon(getClass().getResource("/com/stoman/icons/search_24px.png")));

                        //---- txtTimKiemNhap ----
                        txtTimKiemNhap.addKeyListener(new KeyAdapter() {
                            @Override
                            public void keyReleased(KeyEvent e) {
                                txtTimKiemNhapKeyReleased(e);
                            }
                        });

                        //---- lblTheoNhap ----
                        lblTheoNhap.setText("theo");

                        //---- cboTimKiemNhap ----
                        cboTimKiemNhap.addActionListener(e -> cboTimKiemNhapActionPerformed(e));

                        //======== lblTblTKnhap ========
                        {

                            //---- tblTKnhap ----
                            tblTKnhap.setModel(new DefaultTableModel(
                                new Object[][] {
                                },
                                new String[] {
                                    "Title 1", "Title 2", "Title 3", "Title 4"
                                }
                            ));
                            tblTKnhap.setRowHeight(25);
                            tblTKnhap.setSelectionMode(ListSelectionModel.SINGLE_INTERVAL_SELECTION);
                            lblTblTKnhap.setViewportView(tblTKnhap);
                        }

                        GroupLayout pnlHangNhapLayout = new GroupLayout(pnlHangNhap);
                        pnlHangNhap.setLayout(pnlHangNhapLayout);
                        pnlHangNhapLayout.setHorizontalGroup(
                            pnlHangNhapLayout.createParallelGroup()
                                .addGroup(pnlHangNhapLayout.createSequentialGroup()
                                    .addContainerGap()
                                    .addGroup(pnlHangNhapLayout.createParallelGroup()
                                        .addComponent(lblTblTKnhap, GroupLayout.DEFAULT_SIZE, 809, Short.MAX_VALUE)
                                        .addGroup(pnlHangNhapLayout.createSequentialGroup()
                                            .addComponent(lblTimKiemNhap)
                                            .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(txtTimKiemNhap)
                                            .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addComponent(lblTheoNhap)
                                            .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addComponent(cboTimKiemNhap, GroupLayout.PREFERRED_SIZE, 250, GroupLayout.PREFERRED_SIZE))
                                        .addComponent(lblDShangHoaNhap, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(separator18, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(pnlHangNhapLayout.createParallelGroup()
                                        .addComponent(lblPhanLoaiN, GroupLayout.PREFERRED_SIZE, 250, GroupLayout.PREFERRED_SIZE)
                                        .addGroup(pnlHangNhapLayout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                                            .addComponent(pnlTongGTNhap, GroupLayout.Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(pnlTongLGNhap, GroupLayout.Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(separator4, GroupLayout.Alignment.TRAILING)
                                            .addGroup(GroupLayout.Alignment.TRAILING, pnlHangNhapLayout.createSequentialGroup()
                                                .addComponent(lblThangNhap)
                                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(cboThangNhap, GroupLayout.PREFERRED_SIZE, 80, GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(lblNamNhap)
                                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(cboNamNhap, GroupLayout.PREFERRED_SIZE, 80, GroupLayout.PREFERRED_SIZE))
                                            .addComponent(separator5, GroupLayout.Alignment.TRAILING)
                                            .addGroup(pnlHangNhapLayout.createSequentialGroup()
                                                .addGroup(pnlHangNhapLayout.createParallelGroup(GroupLayout.Alignment.TRAILING)
                                                    .addComponent(lblKhoNhap)
                                                    .addComponent(lblLoaiHangHoaNhap))
                                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(pnlHangNhapLayout.createParallelGroup()
                                                    .addComponent(cboLoaiHangHoaNhap, GroupLayout.DEFAULT_SIZE, 165, Short.MAX_VALUE)
                                                    .addComponent(cboKhoNhap)))
                                            .addComponent(lblTrongNhap)))
                                    .addContainerGap())
                        );
                        pnlHangNhapLayout.setVerticalGroup(
                            pnlHangNhapLayout.createParallelGroup()
                                .addGroup(pnlHangNhapLayout.createSequentialGroup()
                                    .addContainerGap()
                                    .addGroup(pnlHangNhapLayout.createParallelGroup()
                                        .addComponent(separator18)
                                        .addGroup(pnlHangNhapLayout.createSequentialGroup()
                                            .addGroup(pnlHangNhapLayout.createParallelGroup()
                                                .addComponent(lblPhanLoaiN)
                                                .addComponent(lblDShangHoaNhap))
                                            .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                            .addGroup(pnlHangNhapLayout.createParallelGroup()
                                                .addGroup(pnlHangNhapLayout.createSequentialGroup()
                                                    .addGroup(pnlHangNhapLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                                        .addComponent(lblTimKiemNhap)
                                                        .addComponent(txtTimKiemNhap, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(lblTheoNhap)
                                                        .addComponent(cboTimKiemNhap, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                                                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                    .addComponent(lblTblTKnhap, GroupLayout.DEFAULT_SIZE, 0, Short.MAX_VALUE))
                                                .addGroup(pnlHangNhapLayout.createSequentialGroup()
                                                    .addGroup(pnlHangNhapLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                                        .addComponent(cboKhoNhap, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(lblKhoNhap))
                                                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                    .addGroup(pnlHangNhapLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                                        .addComponent(cboLoaiHangHoaNhap, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(lblLoaiHangHoaNhap))
                                                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                    .addComponent(separator5, GroupLayout.PREFERRED_SIZE, 2, GroupLayout.PREFERRED_SIZE)
                                                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                    .addComponent(lblTrongNhap)
                                                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                    .addGroup(pnlHangNhapLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                                        .addComponent(lblThangNhap)
                                                        .addComponent(cboThangNhap, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(lblNamNhap)
                                                        .addComponent(cboNamNhap, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                                                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                    .addComponent(separator4, GroupLayout.PREFERRED_SIZE, 2, GroupLayout.PREFERRED_SIZE)
                                                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                    .addComponent(pnlTongLGNhap, GroupLayout.PREFERRED_SIZE, 90, GroupLayout.PREFERRED_SIZE)
                                                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                    .addComponent(pnlTongGTNhap, GroupLayout.PREFERRED_SIZE, 90, GroupLayout.PREFERRED_SIZE)
                                                    .addGap(0, 0, Short.MAX_VALUE)))))
                                    .addContainerGap())
                        );
                    }
                    slpTKNhap.add(pnlHangNhap, "top");

                    //======== pnlTop10HangNhap ========
                    {

                        //======== splTop10HangNhap ========
                        {

                            //======== pnlTopLHHNhap ========
                            {
                                pnlTopLHHNhap.setPreferredSize(new Dimension(359, 261));

                                //---- lblTopLHHNhap ----
                                lblTopLHHNhap.setFont(new Font("Segoe UI", Font.BOLD, 14));
                                lblTopLHHNhap.setHorizontalAlignment(SwingConstants.CENTER);
                                lblTopLHHNhap.setText("10 lo\u1ea1i h\u00e0ng nh\u1eadp nhi\u1ec1u nh\u1ea5t");

                                //======== scplTopLHHNhap ========
                                {

                                    //---- tblTopLHHNhap ----
                                    tblTopLHHNhap.setModel(new DefaultTableModel(
                                        new Object[][] {
                                        },
                                        new String[] {
                                            "Title 1", "Title 2", "Title 3", "Title 4"
                                        }
                                    ));
                                    scplTopLHHNhap.setViewportView(tblTopLHHNhap);
                                }

                                GroupLayout pnlTopLHHNhapLayout = new GroupLayout(pnlTopLHHNhap);
                                pnlTopLHHNhap.setLayout(pnlTopLHHNhapLayout);
                                pnlTopLHHNhapLayout.setHorizontalGroup(
                                    pnlTopLHHNhapLayout.createParallelGroup()
                                        .addGroup(pnlTopLHHNhapLayout.createParallelGroup()
                                            .addGroup(pnlTopLHHNhapLayout.createSequentialGroup()
                                                .addContainerGap()
                                                .addGroup(pnlTopLHHNhapLayout.createParallelGroup()
                                                    .addComponent(lblTopLHHNhap, GroupLayout.DEFAULT_SIZE, 350, Short.MAX_VALUE)
                                                    .addComponent(scplTopLHHNhap, GroupLayout.DEFAULT_SIZE, 0, Short.MAX_VALUE))
                                                .addContainerGap()))
                                        .addGap(0, 362, Short.MAX_VALUE)
                                );
                                pnlTopLHHNhapLayout.setVerticalGroup(
                                    pnlTopLHHNhapLayout.createParallelGroup()
                                        .addGroup(pnlTopLHHNhapLayout.createParallelGroup()
                                            .addGroup(pnlTopLHHNhapLayout.createSequentialGroup()
                                                .addContainerGap()
                                                .addComponent(lblTopLHHNhap)
                                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(scplTopLHHNhap, GroupLayout.DEFAULT_SIZE, 225, Short.MAX_VALUE)
                                                .addContainerGap()))
                                        .addGap(0, 263, Short.MAX_VALUE)
                                );
                            }
                            splTop10HangNhap.setRightComponent(pnlTopLHHNhap);

                            //======== pnlTopHHNhap ========
                            {
                                pnlTopHHNhap.setPreferredSize(new Dimension(720, 261));

                                //---- lblTopHHNhap ----
                                lblTopHHNhap.setFont(new Font("Segoe UI", Font.BOLD, 14));
                                lblTopHHNhap.setHorizontalAlignment(SwingConstants.CENTER);
                                lblTopHHNhap.setText("10 m\u1eb7t h\u00e0ng nh\u1eadp nhi\u1ec1u nh\u1ea5t");

                                //======== oblTopHHNhap ========
                                {

                                    //---- tblTopHHNhap ----
                                    tblTopHHNhap.setModel(new DefaultTableModel(
                                        new Object[][] {
                                        },
                                        new String[] {
                                            "Title 1", "Title 2", "Title 3", "Title 4"
                                        }
                                    ));
                                    oblTopHHNhap.setViewportView(tblTopHHNhap);
                                }

                                GroupLayout pnlTopHHNhapLayout = new GroupLayout(pnlTopHHNhap);
                                pnlTopHHNhap.setLayout(pnlTopHHNhapLayout);
                                pnlTopHHNhapLayout.setHorizontalGroup(
                                    pnlTopHHNhapLayout.createParallelGroup()
                                        .addGroup(pnlTopHHNhapLayout.createParallelGroup()
                                            .addGroup(pnlTopHHNhapLayout.createSequentialGroup()
                                                .addContainerGap()
                                                .addGroup(pnlTopHHNhapLayout.createParallelGroup()
                                                    .addComponent(lblTopHHNhap, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                    .addComponent(oblTopHHNhap, GroupLayout.DEFAULT_SIZE, 0, Short.MAX_VALUE))
                                                .addContainerGap()))
                                        .addGap(0, 720, Short.MAX_VALUE)
                                );
                                pnlTopHHNhapLayout.setVerticalGroup(
                                    pnlTopHHNhapLayout.createParallelGroup()
                                        .addGroup(pnlTopHHNhapLayout.createParallelGroup()
                                            .addGroup(pnlTopHHNhapLayout.createSequentialGroup()
                                                .addContainerGap()
                                                .addComponent(lblTopHHNhap)
                                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(oblTopHHNhap, GroupLayout.DEFAULT_SIZE, 225, Short.MAX_VALUE)
                                                .addContainerGap()))
                                        .addGap(0, 263, Short.MAX_VALUE)
                                );
                            }
                            splTop10HangNhap.setLeftComponent(pnlTopHHNhap);
                        }

                        GroupLayout pnlTop10HangNhapLayout = new GroupLayout(pnlTop10HangNhap);
                        pnlTop10HangNhap.setLayout(pnlTop10HangNhapLayout);
                        pnlTop10HangNhapLayout.setHorizontalGroup(
                            pnlTop10HangNhapLayout.createParallelGroup()
                                .addGroup(pnlTop10HangNhapLayout.createParallelGroup()
                                    .addComponent(splTop10HangNhap, GroupLayout.DEFAULT_SIZE, 1087, Short.MAX_VALUE))
                                .addGap(0, 1087, Short.MAX_VALUE)
                        );
                        pnlTop10HangNhapLayout.setVerticalGroup(
                            pnlTop10HangNhapLayout.createParallelGroup()
                                .addGroup(pnlTop10HangNhapLayout.createParallelGroup()
                                    .addComponent(splTop10HangNhap, GroupLayout.Alignment.TRAILING))
                                .addGap(0, 263, Short.MAX_VALUE)
                        );
                    }
                    slpTKNhap.add(pnlTop10HangNhap, "bottom");
                }

                GroupLayout pnlTKNhapLayout = new GroupLayout(pnlTKNhap);
                pnlTKNhap.setLayout(pnlTKNhapLayout);
                pnlTKNhapLayout.setHorizontalGroup(
                    pnlTKNhapLayout.createParallelGroup()
                        .addComponent(slpTKNhap, GroupLayout.Alignment.TRAILING)
                );
                pnlTKNhapLayout.setVerticalGroup(
                    pnlTKNhapLayout.createParallelGroup()
                        .addComponent(slpTKNhap)
                );
            }
            tabs.addTab("Th\u1ed1ng k\u00ea nh\u1eadp", pnlTKNhap);

            //======== pnlTKXuat ========
            {

                //======== slpTKXuat ========
                {
                    slpTKXuat.setOrientation(JSplitPane.VERTICAL_SPLIT);

                    //======== pnlHangXuat ========
                    {

                        //---- lblTrongXuat ----
                        lblTrongXuat.setFont(new Font("Segoe UI", Font.BOLD, 14));
                        lblTrongXuat.setText("Th\u1eddi gian");

                        //---- lblThangXuat ----
                        lblThangXuat.setText("Th\u00e1ng");

                        //---- cboThangXuat ----
                        cboThangXuat.addActionListener(e -> cboThangXuatActionPerformed(e));

                        //---- lblNamXuat ----
                        lblNamXuat.setText("N\u0103m");

                        //---- cboNamXuat ----
                        cboNamXuat.addActionListener(e -> cboNamXuatActionPerformed(e));

                        //---- lblPhanXuat ----
                        lblPhanXuat.setFont(new Font("Segoe UI", Font.BOLD, 14));
                        lblPhanXuat.setText("Ph\u00e2n lo\u1ea1i danh s\u00e1ch");

                        //======== pnlTongLGXuat ========
                        {
                            pnlTongLGXuat.setBackground(new Color(0x0099cc));
                            pnlTongLGXuat.setBorder(new SoftBevelBorder(SoftBevelBorder.RAISED));
                            pnlTongLGXuat.setLayout(new GridLayout(0, 1));

                            //---- lblTongGiaTriXuat ----
                            lblTongGiaTriXuat.setFont(new Font("Segoe UI", Font.BOLD, 14));
                            lblTongGiaTriXuat.setForeground(Color.white);
                            lblTongGiaTriXuat.setHorizontalAlignment(SwingConstants.CENTER);
                            lblTongGiaTriXuat.setText("T\u1ed5ng Gi\u00e1 Tr\u1ecb Xu\u1ea5t");
                            pnlTongLGXuat.add(lblTongGiaTriXuat);

                            //---- lblTongSoGTX ----
                            lblTongSoGTX.setFont(new Font("Segoe UI", Font.PLAIN, 24));
                            lblTongSoGTX.setForeground(Color.white);
                            lblTongSoGTX.setHorizontalAlignment(SwingConstants.CENTER);
                            lblTongSoGTX.setText("0");
                            pnlTongLGXuat.add(lblTongSoGTX);
                        }

                        //---- lblDShangHoaXuat ----
                        lblDShangHoaXuat.setFont(new Font("Segoe UI", Font.BOLD, 14));
                        lblDShangHoaXuat.setHorizontalAlignment(SwingConstants.CENTER);
                        lblDShangHoaXuat.setText("Danh s\u00e1ch h\u00e0ng h\u00f3a xu\u1ea5t");

                        //---- lblTimKiemXuat ----
                        lblTimKiemXuat.setIcon(new ImageIcon(getClass().getResource("/com/stoman/icons/search_24px.png")));

                        //---- txtTimKiemXuat ----
                        txtTimKiemXuat.addKeyListener(new KeyAdapter() {
                            @Override
                            public void keyReleased(KeyEvent e) {
                                txtTimKiemXuatKeyReleased(e);
                            }
                        });

                        //======== pnlTongGTXuat ========
                        {
                            pnlTongGTXuat.setBackground(new Color(0x0099cc));
                            pnlTongGTXuat.setBorder(new SoftBevelBorder(SoftBevelBorder.RAISED));
                            pnlTongGTXuat.setLayout(new GridLayout(0, 1));

                            //---- lblTongLuongXuat ----
                            lblTongLuongXuat.setFont(new Font("Segoe UI", Font.BOLD, 14));
                            lblTongLuongXuat.setForeground(Color.white);
                            lblTongLuongXuat.setHorizontalAlignment(SwingConstants.CENTER);
                            lblTongLuongXuat.setText("T\u1ed5ng l\u01b0\u1ee3ng Xu\u1ea5t");
                            pnlTongGTXuat.add(lblTongLuongXuat);

                            //---- lblTongSoLX ----
                            lblTongSoLX.setFont(new Font("Segoe UI", Font.PLAIN, 24));
                            lblTongSoLX.setForeground(Color.white);
                            lblTongSoLX.setHorizontalAlignment(SwingConstants.CENTER);
                            lblTongSoLX.setText("0");
                            pnlTongGTXuat.add(lblTongSoLX);
                        }

                        //---- lblTheoXuat ----
                        lblTheoXuat.setText("theo");

                        //---- cboTimKiemXuat ----
                        cboTimKiemXuat.addActionListener(e -> cboTimKiemXuatActionPerformed(e));

                        //======== lblTblTKxuat ========
                        {

                            //---- tblTKxuat ----
                            tblTKxuat.setModel(new DefaultTableModel(
                                new Object[][] {
                                },
                                new String[] {
                                    "Title 1", "Title 2", "Title 3", "Title 4"
                                }
                            ));
                            tblTKxuat.setRowHeight(25);
                            lblTblTKxuat.setViewportView(tblTKxuat);
                        }

                        //---- separator24 ----
                        separator24.setOrientation(SwingConstants.VERTICAL);

                        //---- lblKhoXuat ----
                        lblKhoXuat.setText("Kho");

                        //---- cboKhoXuat ----
                        cboKhoXuat.addActionListener(e -> cboKhoXuatActionPerformed(e));

                        //---- lblLoaiHangHoaXuat ----
                        lblLoaiHangHoaXuat.setText("Lo\u1ea1i H\u00e0ng H\u00f3a");

                        //---- cboLoaiHangHoaXuat ----
                        cboLoaiHangHoaXuat.addActionListener(e -> cboLoaiHangHoaXuatActionPerformed(e));

                        GroupLayout pnlHangXuatLayout = new GroupLayout(pnlHangXuat);
                        pnlHangXuat.setLayout(pnlHangXuatLayout);
                        pnlHangXuatLayout.setHorizontalGroup(
                            pnlHangXuatLayout.createParallelGroup()
                                .addGroup(GroupLayout.Alignment.TRAILING, pnlHangXuatLayout.createSequentialGroup()
                                    .addContainerGap()
                                    .addGroup(pnlHangXuatLayout.createParallelGroup()
                                        .addGroup(pnlHangXuatLayout.createSequentialGroup()
                                            .addComponent(lblTimKiemXuat)
                                            .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(txtTimKiemXuat)
                                            .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addComponent(lblTheoXuat)
                                            .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addComponent(cboTimKiemXuat, GroupLayout.PREFERRED_SIZE, 250, GroupLayout.PREFERRED_SIZE))
                                        .addComponent(lblDShangHoaXuat, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(lblTblTKxuat, GroupLayout.Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, 809, Short.MAX_VALUE))
                                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(separator24, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(pnlHangXuatLayout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                                        .addComponent(lblPhanXuat, GroupLayout.Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(separator26, GroupLayout.Alignment.TRAILING)
                                        .addGroup(GroupLayout.Alignment.TRAILING, pnlHangXuatLayout.createSequentialGroup()
                                            .addComponent(lblThangXuat)
                                            .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(cboThangXuat, GroupLayout.PREFERRED_SIZE, 80, GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(lblNamXuat)
                                            .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(cboNamXuat, GroupLayout.PREFERRED_SIZE, 80, GroupLayout.PREFERRED_SIZE))
                                        .addComponent(separator25, GroupLayout.Alignment.TRAILING)
                                        .addGroup(pnlHangXuatLayout.createSequentialGroup()
                                            .addGroup(pnlHangXuatLayout.createParallelGroup(GroupLayout.Alignment.TRAILING)
                                                .addComponent(lblKhoXuat)
                                                .addComponent(lblLoaiHangHoaXuat))
                                            .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                            .addGroup(pnlHangXuatLayout.createParallelGroup()
                                                .addComponent(cboKhoXuat, GroupLayout.DEFAULT_SIZE, 165, Short.MAX_VALUE)
                                                .addComponent(cboLoaiHangHoaXuat)))
                                        .addComponent(pnlTongGTXuat, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(pnlTongLGXuat, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(lblTrongXuat))
                                    .addContainerGap())
                        );
                        pnlHangXuatLayout.setVerticalGroup(
                            pnlHangXuatLayout.createParallelGroup()
                                .addGroup(pnlHangXuatLayout.createSequentialGroup()
                                    .addContainerGap()
                                    .addGroup(pnlHangXuatLayout.createParallelGroup()
                                        .addComponent(separator24)
                                        .addGroup(pnlHangXuatLayout.createSequentialGroup()
                                            .addGroup(pnlHangXuatLayout.createParallelGroup()
                                                .addComponent(lblPhanXuat)
                                                .addComponent(lblDShangHoaXuat))
                                            .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                            .addGroup(pnlHangXuatLayout.createParallelGroup()
                                                .addGroup(pnlHangXuatLayout.createSequentialGroup()
                                                    .addGroup(pnlHangXuatLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                                        .addComponent(lblTheoXuat)
                                                        .addComponent(lblTimKiemXuat)
                                                        .addComponent(txtTimKiemXuat, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(cboTimKiemXuat, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                                                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                    .addComponent(lblTblTKxuat, GroupLayout.DEFAULT_SIZE, 0, Short.MAX_VALUE))
                                                .addGroup(pnlHangXuatLayout.createSequentialGroup()
                                                    .addGroup(pnlHangXuatLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                                        .addComponent(lblKhoXuat)
                                                        .addComponent(cboKhoXuat, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                                                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                    .addGroup(pnlHangXuatLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                                        .addComponent(lblLoaiHangHoaXuat)
                                                        .addComponent(cboLoaiHangHoaXuat, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                                                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                    .addComponent(separator25, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                                    .addGap(5, 5, 5)
                                                    .addComponent(lblTrongXuat)
                                                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                    .addGroup(pnlHangXuatLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                                        .addComponent(lblThangXuat)
                                                        .addComponent(lblNamXuat)
                                                        .addComponent(cboThangXuat, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(cboNamXuat, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                                                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                    .addComponent(separator26, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                    .addComponent(pnlTongLGXuat, GroupLayout.PREFERRED_SIZE, 90, GroupLayout.PREFERRED_SIZE)
                                                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                    .addComponent(pnlTongGTXuat, GroupLayout.PREFERRED_SIZE, 90, GroupLayout.PREFERRED_SIZE)))))
                                    .addContainerGap())
                        );
                    }
                    slpTKXuat.add(pnlHangXuat, "top");

                    //======== pnlTopHangXuat ========
                    {

                        //======== splTopHangXuat ========
                        {

                            //======== pnlTopHHX ========
                            {
                                pnlTopHHX.setPreferredSize(new Dimension(720, 261));

                                //---- lblTopHHXuat ----
                                lblTopHHXuat.setFont(new Font("Segoe UI", Font.BOLD, 14));
                                lblTopHHXuat.setHorizontalAlignment(SwingConstants.CENTER);
                                lblTopHHXuat.setText("10 m\u1eb7t h\u00e0ng xu\u1ea5t nhi\u1ec1u nh\u1ea5t");

                                //======== oblTopHHXuat ========
                                {

                                    //---- tblTopHHXuat ----
                                    tblTopHHXuat.setModel(new DefaultTableModel(
                                        new Object[][] {
                                        },
                                        new String[] {
                                            "Title 1", "Title 2", "Title 3", "Title 4"
                                        }
                                    ));
                                    oblTopHHXuat.setViewportView(tblTopHHXuat);
                                }

                                GroupLayout pnlTopHHXLayout = new GroupLayout(pnlTopHHX);
                                pnlTopHHX.setLayout(pnlTopHHXLayout);
                                pnlTopHHXLayout.setHorizontalGroup(
                                    pnlTopHHXLayout.createParallelGroup()
                                        .addGroup(pnlTopHHXLayout.createParallelGroup()
                                            .addGroup(pnlTopHHXLayout.createSequentialGroup()
                                                .addContainerGap()
                                                .addGroup(pnlTopHHXLayout.createParallelGroup()
                                                    .addComponent(lblTopHHXuat, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                    .addComponent(oblTopHHXuat, GroupLayout.DEFAULT_SIZE, 0, Short.MAX_VALUE))
                                                .addContainerGap()))
                                        .addGap(0, 0, Short.MAX_VALUE)
                                );
                                pnlTopHHXLayout.setVerticalGroup(
                                    pnlTopHHXLayout.createParallelGroup()
                                        .addGroup(pnlTopHHXLayout.createParallelGroup()
                                            .addGroup(pnlTopHHXLayout.createSequentialGroup()
                                                .addContainerGap()
                                                .addComponent(lblTopHHXuat)
                                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(oblTopHHXuat, GroupLayout.DEFAULT_SIZE, 224, Short.MAX_VALUE)
                                                .addContainerGap()))
                                        .addGap(0, 262, Short.MAX_VALUE)
                                );
                            }
                            splTopHangXuat.setLeftComponent(pnlTopHHX);

                            //======== pnlTopLHHX ========
                            {
                                pnlTopLHHX.setPreferredSize(new Dimension(359, 261));

                                //---- lblTopLHHXuat ----
                                lblTopLHHXuat.setFont(new Font("Segoe UI", Font.BOLD, 14));
                                lblTopLHHXuat.setHorizontalAlignment(SwingConstants.CENTER);
                                lblTopLHHXuat.setText("10 lo\u1ea1i h\u00e0ng xu\u1ea5t nhi\u1ec1u nh\u1ea5t");

                                //======== pnlTopLHHXuat ========
                                {

                                    //---- tblTopLHHXuat ----
                                    tblTopLHHXuat.setModel(new DefaultTableModel(
                                        new Object[][] {
                                        },
                                        new String[] {
                                            "Title 1", "Title 2", "Title 3", "Title 4"
                                        }
                                    ));
                                    pnlTopLHHXuat.setViewportView(tblTopLHHXuat);
                                }

                                GroupLayout pnlTopLHHXLayout = new GroupLayout(pnlTopLHHX);
                                pnlTopLHHX.setLayout(pnlTopLHHXLayout);
                                pnlTopLHHXLayout.setHorizontalGroup(
                                    pnlTopLHHXLayout.createParallelGroup()
                                        .addGroup(pnlTopLHHXLayout.createParallelGroup()
                                            .addGroup(pnlTopLHHXLayout.createSequentialGroup()
                                                .addContainerGap()
                                                .addGroup(pnlTopLHHXLayout.createParallelGroup()
                                                    .addComponent(lblTopLHHXuat, GroupLayout.DEFAULT_SIZE, 350, Short.MAX_VALUE)
                                                    .addComponent(pnlTopLHHXuat, GroupLayout.DEFAULT_SIZE, 0, Short.MAX_VALUE))
                                                .addContainerGap()))
                                        .addGap(0, 362, Short.MAX_VALUE)
                                );
                                pnlTopLHHXLayout.setVerticalGroup(
                                    pnlTopLHHXLayout.createParallelGroup()
                                        .addGroup(pnlTopLHHXLayout.createParallelGroup()
                                            .addGroup(pnlTopLHHXLayout.createSequentialGroup()
                                                .addContainerGap()
                                                .addComponent(lblTopLHHXuat)
                                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(pnlTopLHHXuat, GroupLayout.DEFAULT_SIZE, 224, Short.MAX_VALUE)
                                                .addContainerGap()))
                                        .addGap(0, 262, Short.MAX_VALUE)
                                );
                            }
                            splTopHangXuat.setRightComponent(pnlTopLHHX);
                        }

                        GroupLayout pnlTopHangXuatLayout = new GroupLayout(pnlTopHangXuat);
                        pnlTopHangXuat.setLayout(pnlTopHangXuatLayout);
                        pnlTopHangXuatLayout.setHorizontalGroup(
                            pnlTopHangXuatLayout.createParallelGroup()
                                .addComponent(splTopHangXuat)
                        );
                        pnlTopHangXuatLayout.setVerticalGroup(
                            pnlTopHangXuatLayout.createParallelGroup()
                                .addGroup(pnlTopHangXuatLayout.createSequentialGroup()
                                    .addGap(0, 0, 0)
                                    .addComponent(splTopHangXuat)
                                    .addGap(0, 0, 0))
                        );
                    }
                    slpTKXuat.add(pnlTopHangXuat, "bottom");
                }

                GroupLayout pnlTKXuatLayout = new GroupLayout(pnlTKXuat);
                pnlTKXuat.setLayout(pnlTKXuatLayout);
                pnlTKXuatLayout.setHorizontalGroup(
                    pnlTKXuatLayout.createParallelGroup()
                        .addComponent(slpTKXuat, GroupLayout.Alignment.TRAILING)
                );
                pnlTKXuatLayout.setVerticalGroup(
                    pnlTKXuatLayout.createParallelGroup()
                        .addComponent(slpTKXuat)
                );
            }
            tabs.addTab("Th\u1ed1ng k\u00ea xu\u1ea5t", pnlTKXuat);

            //======== pnlTongHop ========
            {

                //======== slpTongHop ========
                {
                    slpTongHop.setOrientation(JSplitPane.VERTICAL_SPLIT);

                    //======== pnlTopGiaTriNhapXuat ========
                    {

                        //======== slpTopGiaTriNhapXuat ========
                        {

                            //======== pnlTopHHTH ========
                            {
                                pnlTopHHTH.setPreferredSize(new Dimension(720, 224));

                                //======== oblTopHHTH ========
                                {

                                    //---- tblTopHHTH ----
                                    tblTopHHTH.setModel(new DefaultTableModel(
                                        new Object[][] {
                                        },
                                        new String[] {
                                            "Title 1", "Title 2", "Title 3", "Title 4"
                                        }
                                    ));
                                    oblTopHHTH.setViewportView(tblTopHHTH);
                                }

                                //---- lblTopHHTH ----
                                lblTopHHTH.setFont(new Font("Segoe UI", Font.BOLD, 14));
                                lblTopHHTH.setHorizontalAlignment(SwingConstants.CENTER);
                                lblTopHHTH.setText("10 m\u1eb7t h\u00e0ng gi\u00e1 tr\u1ecb nh\u1eadp xu\u1ea5t cao");

                                GroupLayout pnlTopHHTHLayout = new GroupLayout(pnlTopHHTH);
                                pnlTopHHTH.setLayout(pnlTopHHTHLayout);
                                pnlTopHHTHLayout.setHorizontalGroup(
                                    pnlTopHHTHLayout.createParallelGroup()
                                        .addGroup(pnlTopHHTHLayout.createParallelGroup()
                                            .addGroup(pnlTopHHTHLayout.createSequentialGroup()
                                                .addContainerGap()
                                                .addGroup(pnlTopHHTHLayout.createParallelGroup()
                                                    .addComponent(oblTopHHTH, GroupLayout.DEFAULT_SIZE, 0, Short.MAX_VALUE)
                                                    .addComponent(lblTopHHTH, GroupLayout.DEFAULT_SIZE, 345, Short.MAX_VALUE))
                                                .addContainerGap()))
                                        .addGap(0, 357, Short.MAX_VALUE)
                                );
                                pnlTopHHTHLayout.setVerticalGroup(
                                    pnlTopHHTHLayout.createParallelGroup()
                                        .addGroup(pnlTopHHTHLayout.createParallelGroup()
                                            .addGroup(pnlTopHHTHLayout.createSequentialGroup()
                                                .addContainerGap()
                                                .addComponent(lblTopHHTH)
                                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(oblTopHHTH, GroupLayout.DEFAULT_SIZE, 187, Short.MAX_VALUE)
                                                .addContainerGap()))
                                        .addGap(0, 225, Short.MAX_VALUE)
                                );
                            }
                            slpTopGiaTriNhapXuat.setLeftComponent(pnlTopHHTH);

                            //======== pnlTopLHHTH ========
                            {
                                pnlTopLHHTH.setPreferredSize(new Dimension(359, 224));

                                //---- lblTopLHHTH ----
                                lblTopLHHTH.setFont(new Font("Segoe UI", Font.BOLD, 14));
                                lblTopLHHTH.setHorizontalAlignment(SwingConstants.CENTER);
                                lblTopLHHTH.setText("10 lo\u1ea1i h\u00e0ng gi\u00e1 tr\u1ecb nh\u1eadp xu\u1ea5t cao");

                                //======== sclTopLHHTH ========
                                {

                                    //---- tblTopLHHTH ----
                                    tblTopLHHTH.setModel(new DefaultTableModel(
                                        new Object[][] {
                                        },
                                        new String[] {
                                            "Title 1", "Title 2", "Title 3", "Title 4"
                                        }
                                    ));
                                    sclTopLHHTH.setViewportView(tblTopLHHTH);
                                }

                                GroupLayout pnlTopLHHTHLayout = new GroupLayout(pnlTopLHHTH);
                                pnlTopLHHTH.setLayout(pnlTopLHHTHLayout);
                                pnlTopLHHTHLayout.setHorizontalGroup(
                                    pnlTopLHHTHLayout.createParallelGroup()
                                        .addGroup(pnlTopLHHTHLayout.createParallelGroup()
                                            .addGroup(pnlTopLHHTHLayout.createSequentialGroup()
                                                .addContainerGap()
                                                .addGroup(pnlTopLHHTHLayout.createParallelGroup()
                                                    .addComponent(lblTopLHHTH, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                    .addComponent(sclTopLHHTH, GroupLayout.DEFAULT_SIZE, 713, Short.MAX_VALUE))
                                                .addContainerGap()))
                                        .addGap(0, 725, Short.MAX_VALUE)
                                );
                                pnlTopLHHTHLayout.setVerticalGroup(
                                    pnlTopLHHTHLayout.createParallelGroup()
                                        .addGroup(pnlTopLHHTHLayout.createParallelGroup()
                                            .addGroup(pnlTopLHHTHLayout.createSequentialGroup()
                                                .addContainerGap()
                                                .addComponent(lblTopLHHTH)
                                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(sclTopLHHTH, GroupLayout.DEFAULT_SIZE, 0, Short.MAX_VALUE)
                                                .addContainerGap()))
                                        .addGap(0, 225, Short.MAX_VALUE)
                                );
                            }
                            slpTopGiaTriNhapXuat.setRightComponent(pnlTopLHHTH);
                        }

                        GroupLayout pnlTopGiaTriNhapXuatLayout = new GroupLayout(pnlTopGiaTriNhapXuat);
                        pnlTopGiaTriNhapXuat.setLayout(pnlTopGiaTriNhapXuatLayout);
                        pnlTopGiaTriNhapXuatLayout.setHorizontalGroup(
                            pnlTopGiaTriNhapXuatLayout.createParallelGroup()
                                .addComponent(slpTopGiaTriNhapXuat)
                        );
                        pnlTopGiaTriNhapXuatLayout.setVerticalGroup(
                            pnlTopGiaTriNhapXuatLayout.createParallelGroup()
                                .addComponent(slpTopGiaTriNhapXuat)
                        );
                    }
                    slpTongHop.add(pnlTopGiaTriNhapXuat, "bottom");

                    //======== pnlCanCanXuatNhap ========
                    {

                        //---- lblKhoTH ----
                        lblKhoTH.setText("Kho");

                        //---- lblThangTH ----
                        lblThangTH.setText("Th\u00e1ng");

                        //======== pnlTongLGXuatTH ========
                        {
                            pnlTongLGXuatTH.setBackground(new Color(0x0099cc));
                            pnlTongLGXuatTH.setBorder(new SoftBevelBorder(SoftBevelBorder.RAISED));
                            pnlTongLGXuatTH.setLayout(new GridLayout(0, 1));

                            //---- lblTongGiaTriXuatTH ----
                            lblTongGiaTriXuatTH.setFont(new Font("Segoe UI", Font.BOLD, 14));
                            lblTongGiaTriXuatTH.setForeground(Color.white);
                            lblTongGiaTriXuatTH.setHorizontalAlignment(SwingConstants.CENTER);
                            lblTongGiaTriXuatTH.setText("T\u1ed5ng Gi\u00e1 Tr\u1ecb Xu\u1ea5t");
                            pnlTongLGXuatTH.add(lblTongGiaTriXuatTH);

                            //---- lblTongSoGTXTH ----
                            lblTongSoGTXTH.setFont(new Font("Segoe UI", Font.PLAIN, 24));
                            lblTongSoGTXTH.setForeground(Color.white);
                            lblTongSoGTXTH.setHorizontalAlignment(SwingConstants.CENTER);
                            lblTongSoGTXTH.setText("0");
                            pnlTongLGXuatTH.add(lblTongSoGTXTH);
                        }

                        //---- cboThangTH ----
                        cboThangTH.addActionListener(e -> cboThangTHActionPerformed(e));

                        //---- lblLoaiHangHoaTH ----
                        lblLoaiHangHoaTH.setText("Lo\u1ea1i H\u00e0ng H\u00f3a");

                        //---- cboLoaiHangHoaTH ----
                        cboLoaiHangHoaTH.addActionListener(e -> cboLoaiHangHoaTHActionPerformed(e));

                        //======== pnlTongLGNhapTH ========
                        {
                            pnlTongLGNhapTH.setBackground(new Color(0xff6666));
                            pnlTongLGNhapTH.setBorder(new SoftBevelBorder(SoftBevelBorder.RAISED));
                            pnlTongLGNhapTH.setLayout(new GridLayout(0, 1));

                            //---- lblTongGiaTriNhapTH ----
                            lblTongGiaTriNhapTH.setFont(new Font("Segoe UI", Font.BOLD, 14));
                            lblTongGiaTriNhapTH.setForeground(Color.white);
                            lblTongGiaTriNhapTH.setHorizontalAlignment(SwingConstants.CENTER);
                            lblTongGiaTriNhapTH.setText("T\u1ed5ng Gi\u00e1 Tr\u1ecb Nh\u1eadp");
                            pnlTongLGNhapTH.add(lblTongGiaTriNhapTH);

                            //---- lblTongSoGTNTH ----
                            lblTongSoGTNTH.setFont(new Font("Segoe UI", Font.PLAIN, 24));
                            lblTongSoGTNTH.setForeground(Color.white);
                            lblTongSoGTNTH.setHorizontalAlignment(SwingConstants.CENTER);
                            lblTongSoGTNTH.setText("0");
                            pnlTongLGNhapTH.add(lblTongSoGTNTH);
                        }

                        //---- lblDSTongHop ----
                        lblDSTongHop.setFont(new Font("Segoe UI", Font.BOLD, 14));
                        lblDSTongHop.setHorizontalAlignment(SwingConstants.CENTER);
                        lblDSTongHop.setText("C\u00e1n c\u00e2n xu\u1ea5t nh\u1eadp");

                        //---- lblTimKiemTH ----
                        lblTimKiemTH.setIcon(new ImageIcon(getClass().getResource("/com/stoman/icons/search_24px.png")));

                        //======== pnlTongCCGTXuatNhap ========
                        {
                            pnlTongCCGTXuatNhap.setBackground(new Color(0xff9933));
                            pnlTongCCGTXuatNhap.setBorder(new SoftBevelBorder(SoftBevelBorder.RAISED));
                            pnlTongCCGTXuatNhap.setLayout(new GridLayout(0, 1));

                            //---- lblTongGiaTriXN ----
                            lblTongGiaTriXN.setFont(new Font("Segoe UI", Font.BOLD, 14));
                            lblTongGiaTriXN.setForeground(Color.white);
                            lblTongGiaTriXN.setHorizontalAlignment(SwingConstants.CENTER);
                            lblTongGiaTriXN.setText("T\u1ed5ng c\u00e1n c\u00e2n xu\u1ea5t nh\u1eadp");
                            pnlTongCCGTXuatNhap.add(lblTongGiaTriXN);

                            //---- lblTongSoGTXN ----
                            lblTongSoGTXN.setFont(new Font("Segoe UI", Font.PLAIN, 24));
                            lblTongSoGTXN.setForeground(Color.white);
                            lblTongSoGTXN.setHorizontalAlignment(SwingConstants.CENTER);
                            lblTongSoGTXN.setText("0");
                            pnlTongCCGTXuatNhap.add(lblTongSoGTXN);
                        }

                        //---- txtTimKiemTH ----
                        txtTimKiemTH.addKeyListener(new KeyAdapter() {
                            @Override
                            public void keyReleased(KeyEvent e) {
                                txtTimKiemTHKeyReleased(e);
                            }
                        });

                        //---- lblTheoTH ----
                        lblTheoTH.setText("theo");

                        //---- cboTimKiemTH ----
                        cboTimKiemTH.addActionListener(e -> cboTimKiemTHActionPerformed(e));

                        //======== lblTblTongHop ========
                        {

                            //---- tblTongHop ----
                            tblTongHop.setModel(new DefaultTableModel(
                                new Object[][] {
                                },
                                new String[] {
                                    "Title 1", "Title 2", "Title 3", "Title 4"
                                }
                            ));
                            tblTongHop.setRowHeight(25);
                            tblTongHop.setSelectionMode(ListSelectionModel.SINGLE_INTERVAL_SELECTION);
                            lblTblTongHop.setViewportView(tblTongHop);
                        }

                        //---- separator29 ----
                        separator29.setOrientation(SwingConstants.VERTICAL);

                        //---- lblPhanTH ----
                        lblPhanTH.setFont(new Font("Segoe UI", Font.BOLD, 14));
                        lblPhanTH.setText("Ph\u00e2n lo\u1ea1i danh s\u00e1ch");

                        //---- cboKhoTH ----
                        cboKhoTH.addActionListener(e -> cboKhoTHActionPerformed(e));

                        //---- lblTrongTH ----
                        lblTrongTH.setFont(new Font("Segoe UI", Font.BOLD, 14));
                        lblTrongTH.setText("Th\u1eddi gian");

                        //---- lblNamTH ----
                        lblNamTH.setText("N\u0103m");

                        //---- cboNamTH ----
                        cboNamTH.addActionListener(e -> cboNamTHActionPerformed(e));

                        GroupLayout pnlCanCanXuatNhapLayout = new GroupLayout(pnlCanCanXuatNhap);
                        pnlCanCanXuatNhap.setLayout(pnlCanCanXuatNhapLayout);
                        pnlCanCanXuatNhapLayout.setHorizontalGroup(
                            pnlCanCanXuatNhapLayout.createParallelGroup()
                                .addGroup(pnlCanCanXuatNhapLayout.createSequentialGroup()
                                    .addContainerGap()
                                    .addGroup(pnlCanCanXuatNhapLayout.createParallelGroup()
                                        .addGroup(pnlCanCanXuatNhapLayout.createSequentialGroup()
                                            .addComponent(lblTimKiemTH)
                                            .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(txtTimKiemTH)
                                            .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addComponent(lblTheoTH)
                                            .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addComponent(cboTimKiemTH, GroupLayout.PREFERRED_SIZE, 250, GroupLayout.PREFERRED_SIZE))
                                        .addComponent(lblTblTongHop, GroupLayout.DEFAULT_SIZE, 809, Short.MAX_VALUE)
                                        .addComponent(lblDSTongHop, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(separator29, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(pnlCanCanXuatNhapLayout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                                        .addComponent(lblPhanTH, GroupLayout.Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(separator31, GroupLayout.Alignment.TRAILING)
                                        .addComponent(separator30, GroupLayout.Alignment.TRAILING)
                                        .addComponent(pnlTongLGXuatTH, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(pnlTongLGNhapTH, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(pnlTongCCGTXuatNhap, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(GroupLayout.Alignment.TRAILING, pnlCanCanXuatNhapLayout.createSequentialGroup()
                                            .addComponent(lblThangTH)
                                            .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(cboThangTH, GroupLayout.PREFERRED_SIZE, 80, GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(lblNamTH)
                                            .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(cboNamTH, GroupLayout.PREFERRED_SIZE, 80, GroupLayout.PREFERRED_SIZE))
                                        .addGroup(pnlCanCanXuatNhapLayout.createSequentialGroup()
                                            .addGroup(pnlCanCanXuatNhapLayout.createParallelGroup(GroupLayout.Alignment.TRAILING)
                                                .addComponent(lblLoaiHangHoaTH)
                                                .addComponent(lblKhoTH))
                                            .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                            .addGroup(pnlCanCanXuatNhapLayout.createParallelGroup()
                                                .addComponent(cboKhoTH, GroupLayout.Alignment.TRAILING)
                                                .addComponent(cboLoaiHangHoaTH, GroupLayout.PREFERRED_SIZE, 165, GroupLayout.PREFERRED_SIZE)))
                                        .addComponent(lblTrongTH))
                                    .addContainerGap())
                        );
                        pnlCanCanXuatNhapLayout.setVerticalGroup(
                            pnlCanCanXuatNhapLayout.createParallelGroup()
                                .addGroup(pnlCanCanXuatNhapLayout.createSequentialGroup()
                                    .addContainerGap()
                                    .addGroup(pnlCanCanXuatNhapLayout.createParallelGroup()
                                        .addComponent(separator29)
                                        .addGroup(pnlCanCanXuatNhapLayout.createSequentialGroup()
                                            .addGroup(pnlCanCanXuatNhapLayout.createParallelGroup()
                                                .addComponent(lblPhanTH)
                                                .addComponent(lblDSTongHop))
                                            .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                            .addGroup(pnlCanCanXuatNhapLayout.createParallelGroup()
                                                .addGroup(pnlCanCanXuatNhapLayout.createSequentialGroup()
                                                    .addGroup(pnlCanCanXuatNhapLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                                        .addComponent(cboKhoTH, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(lblKhoTH))
                                                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                    .addGroup(pnlCanCanXuatNhapLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                                        .addComponent(cboLoaiHangHoaTH, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(lblLoaiHangHoaTH))
                                                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                    .addComponent(separator30, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                    .addComponent(lblTrongTH)
                                                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                    .addGroup(pnlCanCanXuatNhapLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                                        .addComponent(cboNamTH, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(lblNamTH)
                                                        .addComponent(lblThangTH)
                                                        .addComponent(cboThangTH, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                                                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                    .addComponent(separator31, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                    .addComponent(pnlTongLGXuatTH, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                    .addComponent(pnlTongLGNhapTH, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                    .addComponent(pnlTongCCGTXuatNhap, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                                    .addGap(0, 0, Short.MAX_VALUE))
                                                .addGroup(pnlCanCanXuatNhapLayout.createSequentialGroup()
                                                    .addGroup(pnlCanCanXuatNhapLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                                        .addComponent(lblTheoTH)
                                                        .addComponent(lblTimKiemTH)
                                                        .addComponent(txtTimKiemTH, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(cboTimKiemTH, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                                                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                    .addComponent(lblTblTongHop, GroupLayout.DEFAULT_SIZE, 0, Short.MAX_VALUE)))))
                                    .addContainerGap())
                        );
                    }
                    slpTongHop.add(pnlCanCanXuatNhap, "top");
                }

                GroupLayout pnlTongHopLayout = new GroupLayout(pnlTongHop);
                pnlTongHop.setLayout(pnlTongHopLayout);
                pnlTongHopLayout.setHorizontalGroup(
                    pnlTongHopLayout.createParallelGroup()
                        .addComponent(slpTongHop, GroupLayout.Alignment.TRAILING)
                );
                pnlTongHopLayout.setVerticalGroup(
                    pnlTongHopLayout.createParallelGroup()
                        .addComponent(slpTongHop, GroupLayout.Alignment.TRAILING)
                );
            }
            tabs.addTab("T\u1ed5ng h\u1ee3p", pnlTongHop);
        }
        contentPane.add(tabs, BorderLayout.CENTER);

        //======== pnlTrangThai ========
        {
            pnlTrangThai.setBackground(Color.white);
            pnlTrangThai.setBorder(new MatteBorder(2, 0, 0, 0, new Color(0x666666)));
            pnlTrangThai.setLayout(new BorderLayout());

            //---- lblDongHo ----
            lblDongHo.setIcon(new ImageIcon(getClass().getResource("/com/stoman/icons/alarm_clock_32px.png")));
            lblDongHo.setText("00:00:00 AM");
            lblDongHo.setBorder(new EmptyBorder(1, 1, 1, 10));
            pnlTrangThai.add(lblDongHo, BorderLayout.EAST);
        }
        contentPane.add(pnlTrangThai, BorderLayout.PAGE_END);
        pack();
        setLocationRelativeTo(getOwner());

        //---- lblTrangThai ----
        lblTrangThai.setIcon(new ImageIcon(getClass().getResource("/com/stoman/icons/team_32px.png")));
        lblTrangThai.setText("Ch\u01b0a \u0111\u0103ng nh\u1eadp!");
        lblTrangThai.setBorder(new EmptyBorder(1, 10, 1, 1));
    }// </editor-fold>//GEN-END:initComponents

    private void mniTaiKhoanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniTaiKhoanActionPerformed
        // TODO add your handling code here:
        logout();
        
    }//GEN-LAST:event_mniTaiKhoanActionPerformed

    private void mniDoiMKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniDoiMKActionPerformed
        // TODO add your handling code here:
        openDoiMatKhauDialog();
    }//GEN-LAST:event_mniDoiMKActionPerformed

    private void mniThoatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniThoatActionPerformed
        // TODO add your handling code here:
        exit();
    }//GEN-LAST:event_mniThoatActionPerformed

    private void mniHangHoaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniHangHoaActionPerformed
        // TODO add your handling code here:
        openHangHoaDialog();
    }//GEN-LAST:event_mniHangHoaActionPerformed

    private void mniDoiTacActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniDoiTacActionPerformed
        // TODO add your handling code here:
        openDoiTacDialog();
    }//GEN-LAST:event_mniDoiTacActionPerformed

    private void mniKhoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniKhoActionPerformed
        // TODO add your handling code here:
        openKhoDialog();
    }//GEN-LAST:event_mniKhoActionPerformed

    private void mniPhieuNhapXuatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniPhieuNhapXuatActionPerformed
        // TODO add your handling code here:
        openNhapXuatKhoDialog();
    }//GEN-LAST:event_mniPhieuNhapXuatActionPerformed

    private void mniPhieuKiemKhoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniPhieuKiemKhoActionPerformed
        // TODO add your handling code here:
        openKiemKhoDialog();
    }//GEN-LAST:event_mniPhieuKiemKhoActionPerformed

    private void mniNhanVienActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniNhanVienActionPerformed
        // TODO add your handling code here:
        openNhanVienDialog();
    }//GEN-LAST:event_mniNhanVienActionPerformed

    private void mniGioiThieuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniGioiThieuActionPerformed
        // TODO add your handling code here:
        openGioiThieuDialog();
    }//GEN-LAST:event_mniGioiThieuActionPerformed

    private void cboThongTinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboThongTinActionPerformed
        // TODO add your handling code here:
        openGioiThieuDialog();
    }//GEN-LAST:event_cboThongTinActionPerformed

    private void btnDoiTacActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDoiTacActionPerformed
        // TODO add your handling code here:
        openDoiTacDialog();
    }//GEN-LAST:event_btnDoiTacActionPerformed

    private void btnKiemKhoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnKiemKhoActionPerformed
        // TODO add your handling code here:
        openKiemKhoDialog();
    }//GEN-LAST:event_btnKiemKhoActionPerformed

    private void btnNhapXuatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNhapXuatActionPerformed
        // TODO add your handling code here:
        openNhapXuatKhoDialog();
    }//GEN-LAST:event_btnNhapXuatActionPerformed

    private void btnThoatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnThoatActionPerformed
        // TODO add your handling code here:
        exit();
    }//GEN-LAST:event_btnThoatActionPerformed

    private void btnTaiKhoanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTaiKhoanActionPerformed
        // TODO add your handling code here:
        logout();
    }//GEN-LAST:event_btnTaiKhoanActionPerformed

    private void cboKhoLTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboKhoLTActionPerformed
        // TODO add your handling code here:
        this.fillToTableLuuTru();
        this.fillToTableTop10HHLT();
        this.fillToTableTop10LHHLT();
    }//GEN-LAST:event_cboKhoLTActionPerformed

    private void cboLoaiHangHoaLTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboLoaiHangHoaLTActionPerformed
        // TODO add your handling code here:
        this.fillToTableLuuTru();
        this.fillToTableTop10HHLT();
    }//GEN-LAST:event_cboLoaiHangHoaLTActionPerformed

    private void cboKhoNhapActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboKhoNhapActionPerformed
        // TODO add your handling code here:
        this.fillToTableNhap();
        this.fillToTableTop10HHnhap();
        this.fillToTableTop10LHHnhap();
    }//GEN-LAST:event_cboKhoNhapActionPerformed

    private void cboLoaiHangHoaNhapActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboLoaiHangHoaNhapActionPerformed
        // TODO add your handling code here:
        this.fillToTableNhap();
        this.fillToTableTop10HHnhap();
    }//GEN-LAST:event_cboLoaiHangHoaNhapActionPerformed

    private void cboNamNhapActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboNamNhapActionPerformed
        // TODO add your handling code here:
        this.fillToComboBoxThangNhap();
        this.fillToTableNhap();
        this.fillToTableTop10HHnhap();
        this.fillToTableTop10LHHnhap();
    }//GEN-LAST:event_cboNamNhapActionPerformed

    private void cboThangNhapActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboThangNhapActionPerformed
        // TODO add your handling code here:
        this.fillToTableNhap();
        this.fillToTableTop10HHnhap();
        this.fillToTableTop10LHHnhap();
    }//GEN-LAST:event_cboThangNhapActionPerformed

    private void cboKhoXuatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboKhoXuatActionPerformed
        // TODO add your handling code here:
        this.fillToTableXuat();
        this.fillToTableTop10HHxuat();
        this.fillToTableTop10LHHxuat();

    }//GEN-LAST:event_cboKhoXuatActionPerformed

    private void cboLoaiHangHoaXuatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboLoaiHangHoaXuatActionPerformed
        // TODO add your handling code here:
        this.fillToTableXuat();
        this.fillToTableTop10HHxuat();
    }//GEN-LAST:event_cboLoaiHangHoaXuatActionPerformed

    private void cboThangXuatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboThangXuatActionPerformed
        // TODO add your handling code here:
        this.fillToTableXuat();
        this.fillToTableTop10HHxuat();
        this.fillToTableTop10LHHxuat();
    }//GEN-LAST:event_cboThangXuatActionPerformed

    private void cboNamXuatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboNamXuatActionPerformed
        // TODO add your handling code here:
        this.fillToComboBoxThangXuat();
        this.fillToTableXuat();
        this.fillToTableTop10HHxuat();
        this.fillToTableTop10LHHxuat();
    }//GEN-LAST:event_cboNamXuatActionPerformed

    private void cboNamTQActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboNamTQActionPerformed
        this.fillToChartTongQuan();
    }//GEN-LAST:event_cboNamTQActionPerformed

    private void cboKhoTHActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboKhoTHActionPerformed
        // TODO add your handling code here:
        this.fillToTableTongHop();
        this.fillToTableTop10HHTH();
        this.fillToTableTop10LHHTH();
    }//GEN-LAST:event_cboKhoTHActionPerformed

    private void cboNamTHActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboNamTHActionPerformed
        // TODO add your handling code here:
        this.fillToTableTongHop();
        this.fillToTableTop10HHTH();
        this.fillToTableTop10LHHTH();
    }//GEN-LAST:event_cboNamTHActionPerformed

    private void cboTimKiemNhapActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboTimKiemNhapActionPerformed
        // TODO add your handling code here:
        this.fillToTableNhap();
    }//GEN-LAST:event_cboTimKiemNhapActionPerformed

    private void txtTimKiemNhapKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtTimKiemNhapKeyReleased
        // TODO add your handling code here:
        this.fillToTableNhap();
    }//GEN-LAST:event_txtTimKiemNhapKeyReleased

    private void cboTimKiemTHActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboTimKiemTHActionPerformed
        // TODO add your handling code here:
        this.fillToTableTongHop();
    }//GEN-LAST:event_cboTimKiemTHActionPerformed

    private void txtTimKiemTHKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtTimKiemTHKeyReleased
        // TODO add your handling code here:
        this.fillToTableTongHop();
    }//GEN-LAST:event_txtTimKiemTHKeyReleased

    private void txtTimKiemXuatKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtTimKiemXuatKeyReleased
        // TODO add your handling code here:
        this.fillToTableXuat();
    }//GEN-LAST:event_txtTimKiemXuatKeyReleased

    private void cboTimKiemXuatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboTimKiemXuatActionPerformed
        // TODO add your handling code here:
        this.fillToTableXuat();
    }//GEN-LAST:event_cboTimKiemXuatActionPerformed

    private void cboTimKiemLTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboTimKiemLTActionPerformed
        // TODO add your handling code here:
        this.fillToTableLuuTru();
    }//GEN-LAST:event_cboTimKiemLTActionPerformed

    private void txtTimKiemLTKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtTimKiemLTKeyReleased
        // TODO add your handling code here:
        this.fillToTableLuuTru();
    }//GEN-LAST:event_txtTimKiemLTKeyReleased

    private void cboKhoTQActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboKhoTQActionPerformed
        // TODO add your handling code here:
        this.fillToChartTongQuan();
    }//GEN-LAST:event_cboKhoTQActionPerformed

    private void cboQuyTQActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboQuyTQActionPerformed
        // TODO add your handling code here:
        this.fillToChartTongQuan();
    }//GEN-LAST:event_cboQuyTQActionPerformed

    private void cboThangTHActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboThangTHActionPerformed
        // TODO add your handling code here:
        this.fillToTableTop10HHTH();
        this.fillToTableTop10LHHTH();
        this.fillToTableTongHop();
    }//GEN-LAST:event_cboThangTHActionPerformed

    private void cboLoaiHangHoaTHActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboLoaiHangHoaTHActionPerformed
        // TODO add your handling code here:
        this.fillToTableTop10HHTH();
        this.fillToTableTongHop();
    }//GEN-LAST:event_cboLoaiHangHoaTHActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        System.setProperty("sun.java2d.uiScale", "100%");
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
 /*
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(StoManJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(StoManJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(StoManJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(StoManJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
         */
        //</editor-fold>
        try {
            UIManager.setLookAndFeel(new FlatMacLightLaf());
            UIManager.put("Table.showHorizontalLines", true);
            UIManager.put("Table.showVerticalLines", false);
            UIManager.put("TitlePane.unifiedBackground", true);
            UIManager.put("Button.arc", 10);
            UIManager.put("Component.arc", 10);
            UIManager.put("ProgressBar.arc", 10);
            UIManager.put("TextComponent.arc", 10);
            UIManager.put("FileChooser.useSystemExtensionHiding", true);
        } catch (UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(StoManJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new StoManJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JMenuBar menuBar;
    private JMenu mnuHeThong;
    private JMenuItem mniTaiKhoan;
    private JMenuItem mniDoiMK;
    private JMenuItem mniThoat;
    private JMenu mnuQuanLy;
    private JMenuItem mniHangHoa;
    private JMenuItem mniDoiTac;
    private JMenuItem mniKho;
    private JMenuItem mniPhieuNhapXuat;
    private JMenuItem mniPhieuKiemKho;
    private JMenuItem mniNhanVien;
    private JMenu mnuTroGiup;
    private JMenuItem mniGioiThieu;
    private JToolBar toolBar;
    private JButton btnTaiKhoan;
    private JButton btnThoat;
    private JButton btnNhapXuat;
    private JButton btnKiemKho;
    private JButton btnDoiTac;
    private JButton cboThongTin;
    private JTabbedPane tabs;
    private JPanel pnlTongQuan;
    private JPanel pnlBieuDo;
    private JPanel pnlThongTin;
    private JPanel pnlLuongNhap;
    private JLabel lblLuongNhap;
    private JLabel lblSoLuongNhap;
    private JPanel pnlLuongXuat;
    private JLabel lblLuongXuat;
    private JLabel lblSoLuongXuat;
    private JPanel pnlLuongTonKho;
    private JLabel lblTonKho;
    private JLabel lblSoLuongTK;
    private JSeparator separator10;
    private JLabel lblDShangHoa1;
    private JPanel lblLocBieuDo;
    private JPanel jPanel1;
    private JLabel lblKhoTQ;
    private JComboBox<String> cboKhoTQ;
    private JPanel jPanel3;
    private JLabel lblNamTQ;
    private JComboBox<String> cboNamTQ;
    private JPanel jPanel4;
    private JLabel lblQuyTQ;
    private JComboBox<String> cboQuyTQ;
    private JPanel pnlTonKho;
    private JSplitPane slpHangTK;
    private JPanel pnlHangTonKho;
    private JScrollPane lblTblLuuTru;
    private JTable tblLuuTru;
    private JSeparator separator;
    private JPanel pnlTongGiaTri;
    private JLabel lblTongGiaTri;
    private JLabel lblSumTongGiaTri;
    private JPanel pnlTongTonKho;
    private JLabel lblTonKhoLT;
    private JLabel lblSoLuongTKLT;
    private JLabel lblPhanLoaiHH;
    private JLabel lblKhoLT;
    private JComboBox cboKhoLT;
    private JLabel lblDShangHoa;
    private JLabel lblLoaiHangHoaLT;
    private JLabel lblTimKiemLT;
    private JComboBox cboLoaiHangHoaLT;
    private JTextField txtTimKiemLT;
    private JSeparator separator6;
    private JLabel lblTheoLT;
    private JComboBox<String> cboTimKiemLT;
    private JPanel pnlTop10HangTK;
    private JSplitPane splTop10HangTK;
    private JPanel pnlTopHH;
    private JLabel lblTopHH;
    private JScrollPane oblTopHH;
    private JTable tblTopHH;
    private JPanel pnlTopLHH;
    private JLabel lblTopLHH;
    private JScrollPane jspTopLHH;
    private JTable tblTopLHH;
    private JPanel pnlTKNhap;
    private JSplitPane slpTKNhap;
    private JPanel pnlHangNhap;
    private JSeparator separator18;
    private JLabel lblKhoNhap;
    private JComboBox cboKhoNhap;
    private JLabel lblLoaiHangHoaNhap;
    private JComboBox cboLoaiHangHoaNhap;
    private JSeparator separator5;
    private JLabel lblTrongNhap;
    private JLabel lblThangNhap;
    private JComboBox cboThangNhap;
    private JLabel lblNamNhap;
    private JComboBox cboNamNhap;
    private JLabel lblPhanLoaiN;
    private JSeparator separator4;
    private JPanel pnlTongLGNhap;
    private JLabel lblTongGiaTriNhap;
    private JLabel lblTongSoGTN;
    private JPanel pnlTongGTNhap;
    private JLabel lblTongLuongNhap;
    private JLabel lblTongSoLN;
    private JLabel lblDShangHoaNhap;
    private JLabel lblTimKiemNhap;
    private JTextField txtTimKiemNhap;
    private JLabel lblTheoNhap;
    private JComboBox<String> cboTimKiemNhap;
    private JScrollPane lblTblTKnhap;
    private JTable tblTKnhap;
    private JPanel pnlTop10HangNhap;
    private JSplitPane splTop10HangNhap;
    private JPanel pnlTopLHHNhap;
    private JLabel lblTopLHHNhap;
    private JScrollPane scplTopLHHNhap;
    private JTable tblTopLHHNhap;
    private JPanel pnlTopHHNhap;
    private JLabel lblTopHHNhap;
    private JScrollPane oblTopHHNhap;
    private JTable tblTopHHNhap;
    private JPanel pnlTKXuat;
    private JSplitPane slpTKXuat;
    private JPanel pnlHangXuat;
    private JSeparator separator25;
    private JLabel lblTrongXuat;
    private JLabel lblThangXuat;
    private JComboBox cboThangXuat;
    private JLabel lblNamXuat;
    private JComboBox cboNamXuat;
    private JLabel lblPhanXuat;
    private JSeparator separator26;
    private JPanel pnlTongLGXuat;
    private JLabel lblTongGiaTriXuat;
    private JLabel lblTongSoGTX;
    private JLabel lblDShangHoaXuat;
    private JLabel lblTimKiemXuat;
    private JTextField txtTimKiemXuat;
    private JPanel pnlTongGTXuat;
    private JLabel lblTongLuongXuat;
    private JLabel lblTongSoLX;
    private JLabel lblTheoXuat;
    private JComboBox<String> cboTimKiemXuat;
    private JScrollPane lblTblTKxuat;
    private JTable tblTKxuat;
    private JSeparator separator24;
    private JLabel lblKhoXuat;
    private JComboBox cboKhoXuat;
    private JLabel lblLoaiHangHoaXuat;
    private JComboBox cboLoaiHangHoaXuat;
    private JPanel pnlTopHangXuat;
    private JSplitPane splTopHangXuat;
    private JPanel pnlTopHHX;
    private JLabel lblTopHHXuat;
    private JScrollPane oblTopHHXuat;
    private JTable tblTopHHXuat;
    private JPanel pnlTopLHHX;
    private JLabel lblTopLHHXuat;
    private JScrollPane pnlTopLHHXuat;
    private JTable tblTopLHHXuat;
    private JPanel pnlTongHop;
    private JSplitPane slpTongHop;
    private JPanel pnlTopGiaTriNhapXuat;
    private JSplitPane slpTopGiaTriNhapXuat;
    private JPanel pnlTopHHTH;
    private JScrollPane oblTopHHTH;
    private JTable tblTopHHTH;
    private JLabel lblTopHHTH;
    private JPanel pnlTopLHHTH;
    private JLabel lblTopLHHTH;
    private JScrollPane sclTopLHHTH;
    private JTable tblTopLHHTH;
    private JPanel pnlCanCanXuatNhap;
    private JLabel lblKhoTH;
    private JLabel lblThangTH;
    private JPanel pnlTongLGXuatTH;
    private JLabel lblTongGiaTriXuatTH;
    private JLabel lblTongSoGTXTH;
    private JComboBox cboThangTH;
    private JLabel lblLoaiHangHoaTH;
    private JComboBox cboLoaiHangHoaTH;
    private JPanel pnlTongLGNhapTH;
    private JLabel lblTongGiaTriNhapTH;
    private JLabel lblTongSoGTNTH;
    private JLabel lblDSTongHop;
    private JLabel lblTimKiemTH;
    private JPanel pnlTongCCGTXuatNhap;
    private JLabel lblTongGiaTriXN;
    private JLabel lblTongSoGTXN;
    private JTextField txtTimKiemTH;
    private JLabel lblTheoTH;
    private JComboBox<String> cboTimKiemTH;
    private JScrollPane lblTblTongHop;
    private JTable tblTongHop;
    private JSeparator separator29;
    private JLabel lblPhanTH;
    private JComboBox cboKhoTH;
    private JSeparator separator30;
    private JLabel lblTrongTH;
    private JLabel lblNamTH;
    private JComboBox cboNamTH;
    private JSeparator separator31;
    private JPanel pnlTrangThai;
    private JLabel lblDongHo;
    private JLabel lblTrangThai;
    // End of variables declaration//GEN-END:variables

    private KhoDAO kDAO = new KhoDAO();
    private ThongKeDAO tkDAO = new ThongKeDAO();
    private LoaiHangHoaDAO lhhDAO = new LoaiHangHoaDAO();

    private DefaultTableModel tblLuuTruModel;
    private DefaultTableModel tblNhapModel;
    private DefaultTableModel tblXuatModel;
    private DefaultTableModel tblTongHopModel;

    private DefaultTableModel tblTopLHHModel;
    private DefaultTableModel tblTopHHModel;
    private DefaultTableModel tblTopLHHNhapModel;
    private DefaultTableModel tblTopHHNhapModel;
    private DefaultTableModel tblTopLHHXuatModel;
    private DefaultTableModel tblTopHHXuatModel;
    private DefaultTableModel tblTopLHHTHModel;
    private DefaultTableModel tblTopHHTHModel;

    private final String numFormat = "#,##0.0";

    private void init() {
        this.setIconImage(XImages.getAppIcon());
        this.setLocationRelativeTo(null);

        new ChaoJDialog(this, true).setVisible(true);
        new DangNhapJDialog(this, true).setVisible(true);
        
        this.clock();
        this.formatTable();
        this.loginStatus();

        this.refreshForm();

        timer.start();

    }

    // Tạo tiêu đề và định dạng bảng
    private void formatTable() {
        String headerLT[] = {"STT", "HÀNG HÓA", "SỐ LƯỢNG TỒN"};
        tblLuuTruModel = new DefaultTableModel(headerLT, 0) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
            
            @Override
            public Class getColumnClass(int columnIndex) {
                if (tblLuuTru.getRowCount() == 0) {
                    return String.class;
                }
                if (getValueAt(0, columnIndex) == null) {
                    return Object.class;
                }
                return getValueAt(0, columnIndex).getClass();
            }
        };
        tblLuuTru.setModel(tblLuuTruModel);

        String headerNhap[] = {"STT", "HÀNG HÓA", "SỐ LƯỢNG NHẬP", "NHẬP TB", "GIÁ NHẬP TB", "TỔNG GIÁ TRỊ"};
        tblNhapModel = new DefaultTableModel(headerNhap, 0) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }

            @Override
            public Class getColumnClass(int columnIndex) {
                if (tblNhapModel.getRowCount() == 0) {
                    return String.class;
                }
                if (getValueAt(0, columnIndex) == null) {
                    return Object.class;
                }
                return getValueAt(0, columnIndex).getClass();
            }
        };
        tblTKnhap.setModel(tblNhapModel);

        String headerXuat[] = {"STT", "HÀNG HÓA", "SỐ LƯỢNG XUẤT", "XUẤT TB", "GIÁ XUẤT TB", "TỔNG GIÁ TRỊ"};
        tblXuatModel = new DefaultTableModel(headerXuat, 0) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }

            @Override
            public Class getColumnClass(int columnIndex) {
                if (tblXuatModel.getRowCount() == 0) {
                    return String.class;
                }
                if (getValueAt(0, columnIndex) == null) {
                    return Object.class;
                }
                return getValueAt(0, columnIndex).getClass();
            }
        };
        tblTKxuat.setModel(tblXuatModel);

        String headerTH[] = {"STT", "TÊN HÀNG HÓA", "TỔNG GIÁ TRỊ XUẤT NHẬP", "LỢI NHUẬN TB"};
        tblTongHopModel = new DefaultTableModel(headerTH, 0) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }

            @Override
            public Class getColumnClass(int columnIndex) {
                if (tblTongHopModel.getRowCount() == 0) {
                    return String.class;
                }
                if (getValueAt(0, columnIndex) == null) {
                    return Object.class;
                }
                return getValueAt(0, columnIndex).getClass();
            }
        };
        tblTongHop.setModel(tblTongHopModel);

        String headerTopLHH[] = {"STT", "LOẠI HÀNG HÓA", "SỐ LƯỢNG TỒN"};
        tblTopLHHModel = new DefaultTableModel(headerTopLHH, 0) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }

            @Override
            public Class getColumnClass(int columnIndex) {
                if (tblTopLHHModel.getRowCount() == 0) {
                    return String.class;
                }
                if (getValueAt(0, columnIndex) == null) {
                    return Object.class;
                }
                return getValueAt(0, columnIndex).getClass();
            }
        };
        tblTopLHH.setModel(tblTopLHHModel);

        String headerTopHH[] = {"STT", "TÊN HÀNG HÓA", "SỐ LƯỢNG TỒN"};
        tblTopHHModel = new DefaultTableModel(headerTopHH, 0) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }

            @Override
            public Class getColumnClass(int columnIndex) {
                if (tblTopHHModel.getRowCount() == 0) {
                    return String.class;
                }
                if (getValueAt(0, columnIndex) == null) {
                    return Object.class;
                }
                return getValueAt(0, columnIndex).getClass();
            }
        };
        tblTopHH.setModel(tblTopHHModel);

        String headerTopLHHNhap[] = {"STT", "LOẠI HÀNG HÓA", "SỐ LƯỢNG NHẬP"};
        tblTopLHHNhapModel = new DefaultTableModel(headerTopLHHNhap, 0) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }

            @Override
            public Class getColumnClass(int columnIndex) {
                if (tblTopLHHNhapModel.getRowCount() == 0) {
                    return String.class;
                }
                if (getValueAt(0, columnIndex) == null) {
                    return Object.class;
                }
                return getValueAt(0, columnIndex).getClass();
            }
        };
        tblTopLHHNhap.setModel(tblTopLHHNhapModel);

        String headerTopHHNhap[] = {"STT", "TÊN HÀNG HÓA", "SỐ LƯỢNG NHẬP"};
        tblTopHHNhapModel = new DefaultTableModel(headerTopHHNhap, 0) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }

            @Override
            public Class getColumnClass(int columnIndex) {
                if (tblTopHHNhapModel.getRowCount() == 0) {
                    return String.class;
                }
                if (getValueAt(0, columnIndex) == null) {
                    return Object.class;
                }
                return getValueAt(0, columnIndex).getClass();
            }
        };
        tblTopHHNhap.setModel(tblTopHHNhapModel);

        String headerTopLHHXuat[] = {"STT", "LOẠI HÀNG HÓA", "SỐ LƯỢNG XUẤT"};
        tblTopLHHXuatModel = new DefaultTableModel(headerTopLHHXuat, 0) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }

            @Override
            public Class getColumnClass(int columnIndex) {
                if (tblTopLHHXuatModel.getRowCount() == 0) {
                    return String.class;
                }
                if (getValueAt(0, columnIndex) == null) {
                    return Object.class;
                }
                return getValueAt(0, columnIndex).getClass();
            }
        };
        tblTopLHHXuat.setModel(tblTopLHHXuatModel);

        String headerTopHHXuat[] = {"STT", "TÊN HÀNG HÓA", "SỐ LƯỢNG XUẤT"};
        tblTopHHXuatModel = new DefaultTableModel(headerTopHHXuat, 0) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }

            @Override
            public Class getColumnClass(int columnIndex) {
                if (tblTopHHXuatModel.getRowCount() == 0) {
                    return String.class;
                }
                if (getValueAt(0, columnIndex) == null) {
                    return Object.class;
                }
                return getValueAt(0, columnIndex).getClass();
            }
        };
        tblTopHHXuat.setModel(tblTopHHXuatModel);

        String headerTopLHHTH[] = {"STT", "LOẠI HÀNG HÓA", "TỔNG GIÁ TRỊ XUẤT NHẬP", "LỢI NHUẬN TB"};
        tblTopLHHTHModel = new DefaultTableModel(headerTopLHHTH, 0) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }

            @Override
            public Class getColumnClass(int columnIndex) {
                if (tblTopLHHTHModel.getRowCount() == 0) {
                    return String.class;
                }
                if (getValueAt(0, columnIndex) == null) {
                    return Object.class;
                }
                return getValueAt(0, columnIndex).getClass();
            }
        };
        tblTopLHHTH.setModel(tblTopLHHTHModel);

        String headerTopHHTH[] = {"STT", "TÊN HÀNG HÓA", "TỔNG GIÁ TRỊ XUẤT NHẬP", "LỢI NHUẬN TB"};
        tblTopHHTHModel = new DefaultTableModel(headerTopHHTH, 0) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }

            @Override
            public Class getColumnClass(int columnIndex) {
                if (tblTopHHTHModel.getRowCount() == 0) {
                    return String.class;
                }
                if (getValueAt(0, columnIndex) == null) {
                    return Object.class;
                }
                return getValueAt(0, columnIndex).getClass();
            }
        };
        tblTopHHTH.setModel(tblTopHHTHModel);

        // Điều chỉnh size column        
        // Chỉnh size cột các bảng
        tblLuuTru.getColumnModel().getColumn(0).setPreferredWidth(35);
        tblLuuTru.getColumnModel().getColumn(1).setPreferredWidth(700);
        tblLuuTru.getColumnModel().getColumn(2).setPreferredWidth(100);

        tblTopLHH.getColumnModel().getColumn(0).setPreferredWidth(35);
        tblTopLHH.getColumnModel().getColumn(1).setPreferredWidth(200);
        tblTopLHH.getColumnModel().getColumn(2).setPreferredWidth(200);

        tblTopHH.getColumnModel().getColumn(0).setPreferredWidth(35);
        tblTopHH.getColumnModel().getColumn(1).setPreferredWidth(600);
        tblTopHH.getColumnModel().getColumn(2).setPreferredWidth(200);

        tblTKnhap.getColumnModel().getColumn(0).setPreferredWidth(35);
        tblTKnhap.getColumnModel().getColumn(1).setPreferredWidth(330);
        tblTKnhap.getColumnModel().getColumn(2).setPreferredWidth(50);
        tblTKnhap.getColumnModel().getColumn(3).setPreferredWidth(50);
        tblTKnhap.getColumnModel().getColumn(4).setPreferredWidth(100);
        tblTKnhap.getColumnModel().getColumn(5).setPreferredWidth(100);

        tblTopLHHNhap.getColumnModel().getColumn(0).setPreferredWidth(35);
        tblTopLHHNhap.getColumnModel().getColumn(1).setPreferredWidth(200);
        tblTopLHHNhap.getColumnModel().getColumn(2).setPreferredWidth(200);

        tblTopHHNhap.getColumnModel().getColumn(0).setPreferredWidth(35);
        tblTopHHNhap.getColumnModel().getColumn(1).setPreferredWidth(600);
        tblTopHHNhap.getColumnModel().getColumn(2).setPreferredWidth(200);

        tblTKxuat.getColumnModel().getColumn(0).setPreferredWidth(35);
        tblTKxuat.getColumnModel().getColumn(1).setPreferredWidth(330);
        tblTKxuat.getColumnModel().getColumn(2).setPreferredWidth(50);
        tblTKxuat.getColumnModel().getColumn(3).setPreferredWidth(50);
        tblTKxuat.getColumnModel().getColumn(4).setPreferredWidth(100);
        tblTKxuat.getColumnModel().getColumn(5).setPreferredWidth(100);

        tblTopLHHXuat.getColumnModel().getColumn(0).setPreferredWidth(35);
        tblTopLHHXuat.getColumnModel().getColumn(1).setPreferredWidth(200);
        tblTopLHHXuat.getColumnModel().getColumn(2).setPreferredWidth(200);

        tblTopHHXuat.getColumnModel().getColumn(0).setPreferredWidth(35);
        tblTopHHXuat.getColumnModel().getColumn(1).setPreferredWidth(600);
        tblTopHHXuat.getColumnModel().getColumn(2).setPreferredWidth(200);

        tblTongHop.getColumnModel().getColumn(0).setPreferredWidth(35);
        tblTongHop.getColumnModel().getColumn(1).setPreferredWidth(600);
        tblTongHop.getColumnModel().getColumn(2).setPreferredWidth(200);
        tblTongHop.getColumnModel().getColumn(3).setPreferredWidth(200);

        tblTopLHHTH.getColumnModel().getColumn(0).setPreferredWidth(35);
        tblTopLHHTH.getColumnModel().getColumn(1).setPreferredWidth(150);
        tblTopLHHTH.getColumnModel().getColumn(2).setPreferredWidth(100);
        tblTopLHHTH.getColumnModel().getColumn(3).setPreferredWidth(100);

        tblTopHHTH.getColumnModel().getColumn(0).setPreferredWidth(35);
        tblTopHHTH.getColumnModel().getColumn(1).setPreferredWidth(400);
        tblTopHHTH.getColumnModel().getColumn(2).setPreferredWidth(150);
        tblTopHHTH.getColumnModel().getColumn(3).setPreferredWidth(150);

        // thể hiện các cột    
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(JLabel.CENTER);

        tblLuuTru.getColumnModel().getColumn(0).setCellRenderer(centerRenderer);
        tblTopLHH.getColumnModel().getColumn(0).setCellRenderer(centerRenderer);
        tblTopHH.getColumnModel().getColumn(0).setCellRenderer(centerRenderer);
        tblTKnhap.getColumnModel().getColumn(0).setCellRenderer(centerRenderer);
        tblTopLHHNhap.getColumnModel().getColumn(0).setCellRenderer(centerRenderer);
        tblTopHHNhap.getColumnModel().getColumn(0).setCellRenderer(centerRenderer);
        tblTKxuat.getColumnModel().getColumn(0).setCellRenderer(centerRenderer);
        tblTopLHHXuat.getColumnModel().getColumn(0).setCellRenderer(centerRenderer);
        tblTopHHXuat.getColumnModel().getColumn(0).setCellRenderer(centerRenderer);
        tblTongHop.getColumnModel().getColumn(0).setCellRenderer(centerRenderer);
        tblTopLHHTH.getColumnModel().getColumn(0).setCellRenderer(centerRenderer);
        tblTopHHTH.getColumnModel().getColumn(0).setCellRenderer(centerRenderer);

    }

    // Tự động điều chỉnh nút đăng nhập/đăng xuất
    public void loginStatus() {
        if (!Auth.isLogin()) {
            mniTaiKhoan.setText("Đăng nhập");
            mniTaiKhoan.setIcon(new ImageIcon(getClass().getResource("/com/stoman/icons/login.png")));
            btnTaiKhoan.setText("Đăng nhập");
            btnTaiKhoan.setIcon(new ImageIcon(getClass().getResource("/com/stoman/icons/login.png")));
            lblTrangThai.setText("Chưa đăng nhập vào hệ thống!");

            mnuQuanLy.setVisible(false);
            mniDoiMK.setVisible(false);
            tabs.setVisible(false);

            hideComponents(false);
        } else {
            mniTaiKhoan.setText("Đăng xuất");
            mniTaiKhoan.setIcon(new ImageIcon(getClass().getResource("/com/stoman/icons/logout.png")));
            btnTaiKhoan.setText("Đăng xuất");
            btnTaiKhoan.setIcon(new ImageIcon(getClass().getResource("/com/stoman/icons/logout.png")));
            String vaiTro = Auth.user.isVaiTro() ? "Trưởng kho" : "Thủ kho";
            lblTrangThai.setText(Auth.user.getTenNV() + " | " + vaiTro);

            mnuQuanLy.setVisible(true);
            mniDoiMK.setVisible(true);
            tabs.setVisible(true);

            hideComponents(Auth.user.isVaiTro());
        }

    }

    // Giấu các bộ phận form
    private void hideComponents(boolean init) {
        // separatorMniNhanVien.setVisible(init);
        mniNhanVien.setVisible(init);
        pnlTongHop.setVisible(init);
        if (init) {
            tabs.addTab("Tổng hợp", this.pnlTongHop);
        } else {
            tabs.remove(this.pnlTongHop);
        }
    }

    // Đồng hồ
    private void clock() {
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("hh:mm:ss a");
        lblDongHo.setText(LocalTime.now().format(formatter));
        new Timer(1000, (e) -> {
            lblDongHo.setText(LocalTime.now().format(formatter));
        }).start();

    }

    // Đỗ dữ liệu cho biểu đồ
    private void fillToChartTongQuan() {
        try {
            pnlBieuDo.removeAll();
            DefaultCategoryDataset dataset = new DefaultCategoryDataset();

            Double tongNhap = 0.0;
            Double tongXuat = 0.0;
            Double tongTonKho = (Double) ((Object[]) tkDAO.getListTongLuongSP().get(0))[0];
            if(cboNamTQ.getItemCount() == 0) return;
            int nam = (Integer) cboNamTQ.getSelectedItem();

            String maKho;
            int indexKho = cboKhoTQ.getSelectedIndex();

            if (indexKho > 0) {
                maKho = ((Kho) cboKhoTQ.getSelectedItem()).toString();
            } else {
                maKho = "";
            }

            int quy = (Integer) cboQuyTQ.getSelectedIndex();

            // Đổ dữ liệu vào biểu đồ
            try {
                List<Object[]> list = tkDAO.getListTongQuan(nam, maKho);

                int i = 0;

                addValue:
                for (Object[] values : list) {
                    check:
                    switch (quy) {
                        case 1:
                            if ((Integer) values[0] > 3) {
                                continue addValue;
                            }
                            break;
                        case 2:
                            if ((Integer) values[0] < 4 || (Integer) values[0] > 6) {
                                continue addValue;
                            }
                            break;
                        case 3:
                            if ((Integer) values[0] < 7 || (Integer) values[0] > 9) {
                                continue addValue;
                            }
                            break;
                        case 4:
                            if ((Integer) values[0] < 10 || (Integer) values[0] > 12) {
                                continue addValue;
                            }
                            break;
                        default:
                    }

                    dataset.setValue((Double) values[2], "Lượng nhập", "T " + values[0]);
                    dataset.setValue((Double) values[1], "Lượng xuất", "T " + values[0]);

                    tongNhap += (Double) values[2];
                    tongXuat += (Double) values[1];
                    i++;
                }
                // Tạo biểu đồ Bar Chart
                JFreeChart barChart = ChartFactory.createBarChart(null,
                        "Tháng", "Số lượng", dataset, PlotOrientation.VERTICAL, true, true, false);
                CategoryPlot plot = barChart.getCategoryPlot();
                plot.setRangeGridlinePaint(Color.black);

                //khoảng chống giữa các thanh
                SubCategoryAxis domainAxis = new SubCategoryAxis(" ");
                domainAxis.setCategoryMargin(0.40);
                plot.setDomainAxis(domainAxis);

                ChartPanel chtBieuDo = new ChartPanel(barChart);

                Color trans = new Color(0xFF, 0xFF, 0xFF, 0);
                barChart.setBackgroundPaint(trans);

                plot.setOutlinePaint(trans);
                plot.setBackgroundPaint(trans);

                LegendTitle legend = barChart.getLegend();
                legend.setPosition(RectangleEdge.TOP);
                legend.setBackgroundPaint(trans);
                legend.setFrame(BlockBorder.NONE);
                legend.setItemFont(new Font("Arial", 0, 15));

                ((BarRenderer) plot.getRenderer()).setBarPainter(new StandardBarPainter());

                // Chỉnh màu cột
                ((CategoryPlot) chtBieuDo.getChart().getPlot()).getRenderer().setSeriesPaint(0, new Color(255, 102, 102));
                ((CategoryPlot) chtBieuDo.getChart().getPlot()).getRenderer().setSeriesPaint(1, new Color(0, 153, 204));

                if (i > 0) {
                    pnlBieuDo.add(chtBieuDo);
                }
                pnlBieuDo.updateUI();
                lblSoLuongNhap.setText(XNumber.toString(tongNhap, numFormat));
                lblSoLuongXuat.setText(XNumber.toString(tongXuat, numFormat));
                lblSoLuongTK.setText(XNumber.toString(tongTonKho, numFormat));

            } catch (Exception e) {
                e.printStackTrace();
            }

        } catch (SQLException ex) {
            Logger.getLogger(StoManJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    // Đăng xuất
    private void logout() {
        Auth.clear();
        this.loginStatus();
        new DangNhapJDialog(this, true).setVisible(true);
    }

    // Thoát chương trình
    private void exit() {
        if (MsgBox.confirm(this, "Bạn có muốn kết thúc chương trình?")) {
            System.exit(0);
        }
    }

    // Mở form đổi mật khẩu
    private void openDoiMatKhauDialog() {
        new DoiMatKhauJDialog(this, true).setVisible(true);
    }

    // Mở form quản lý đối tác
    private void openDoiTacDialog() {
        if(!Auth.isLogin()) {
            MsgBox.alert(this, "Vui lòng đăng nhập!");
            return;
        }
        this.timer.stop();
        new DoiTacJDialog(this, true).setVisible(true);
        this.refreshForm();
    }

    // Mở form giới thiệu phần mềm
    private void openGioiThieuDialog() {
        this.timer.stop();
        new GioiThieuJDialog(this, true).setVisible(true);
        this.refreshForm();
    }

    // Mở form quản lý hàng hoá
    private void openHangHoaDialog() {
        if(!Auth.isLogin()) {
            MsgBox.alert(this, "Vui lòng đăng nhập!");
            return;
        }
        this.timer.stop();
        new HangHoaJDialog(this, true).setVisible(true);
        this.refreshForm();
    }

    // Mở form quản lý kho
    private void openKhoDialog() {
        if(!Auth.isLogin()) {
            MsgBox.alert(this, "Vui lòng đăng nhập!");
            return;
        }
        this.timer.stop();
        new KhoJDialog(this, true).setVisible(true);
        this.refreshForm();
    }

    // Mở form quản lý nhân viên
    private void openNhanVienDialog() {
        if(!Auth.isLogin()) {
            MsgBox.alert(this, "Vui lòng đăng nhập!");
            return;
        }
        this.timer.stop();
        new NhanVienJDialog(this, true).setVisible(true);
        this.refreshForm();
    }

    // Mở form quản lý phiếu kiểm kho
    private void openKiemKhoDialog() {
        if(!Auth.isLogin()) {
            MsgBox.alert(this, "Vui lòng đăng nhập!");
            return;
        }
        this.timer.stop();
        new PhieuKiemKhoJDialog(this, true).setVisible(true);
        this.refreshForm();
    }

    // Mở form quản lý phiếu nhập xuất kho
    private void openNhapXuatKhoDialog() {
        if(!Auth.isLogin()) {
            MsgBox.alert(this, "Vui lòng đăng nhập!");
            return;
        }
        this.timer.stop();
        new PhieuNhapXuatKhoJDialog(this, true).setVisible(true);
        this.refreshForm();
    }

    // Đổ dữ liệu vào ComboBox kho
    private void fillToComboBoxKho() {
        DefaultComboBoxModel model1 = new DefaultComboBoxModel();
        DefaultComboBoxModel model2 = new DefaultComboBoxModel();
        DefaultComboBoxModel model3 = new DefaultComboBoxModel();
        DefaultComboBoxModel model4 = new DefaultComboBoxModel();
        DefaultComboBoxModel model5 = new DefaultComboBoxModel();

        model1.removeAllElements();
        model2.removeAllElements();
        model3.removeAllElements();
        model4.removeAllElements();
        model5.removeAllElements();

        try {
            List<Kho> list = kDAO.selectAll();
            model1.addElement(new String("Tất cả"));
            model2.addElement(new String("Tất cả"));
            model3.addElement(new String("Tất cả"));
            model4.addElement(new String("Tất cả"));
            model5.addElement(new String("Tất cả"));

            for (Kho k : list) {
                model1.addElement(k);
                model2.addElement(k);
                model3.addElement(k);
                model4.addElement(k);
                model5.addElement(k);
            }

            cboKhoLT.setModel(model1);
            cboKhoNhap.setModel(model2);
            cboKhoXuat.setModel(model3);
            cboKhoTH.setModel(model4);
            cboKhoTQ.setModel(model5);

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // Đổ dữ liệu vào ComboBox kho
    private void fillToComboBoxLoaiHangHoa() {
        DefaultComboBoxModel model1 = new DefaultComboBoxModel();
        DefaultComboBoxModel model2 = new DefaultComboBoxModel();
        DefaultComboBoxModel model3 = new DefaultComboBoxModel();
        DefaultComboBoxModel model4 = new DefaultComboBoxModel();
        DefaultComboBoxModel model5 = new DefaultComboBoxModel();

        model1.removeAllElements();
        model2.removeAllElements();
        model3.removeAllElements();
        model4.removeAllElements();
        model5.removeAllElements();

        try {
            List<LoaiHangHoa> list = lhhDAO.selectAll();
            model1.addElement(new String("Tất cả"));
            model2.addElement(new String("Tất cả"));
            model3.addElement(new String("Tất cả"));
            model4.addElement(new String("Tất cả"));

            for (LoaiHangHoa lhh : list) {
                model1.addElement(lhh);
                model2.addElement(lhh);
                model3.addElement(lhh);
                model4.addElement(lhh);
            }

            cboLoaiHangHoaLT.setModel(model1);
            cboLoaiHangHoaNhap.setModel(model2);
            cboLoaiHangHoaXuat.setModel(model3);
            cboLoaiHangHoaTH.setModel(model4);

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // Đổ dữ liệu vào ComboBox năm tháng    
    private void fillToComboBoxNamNhap() {
        DefaultComboBoxModel model = new DefaultComboBoxModel();

        model.removeAllElements();

        try {
            List<Object[]> list = tkDAO.getListNamNhap();

            for (Object[] nam : list) {
                model.addElement((Integer) nam[0]);

            }
            cboNamNhap.setModel(model);

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void fillToComboBoxThangNhap() {
        DefaultComboBoxModel model = new DefaultComboBoxModel();
        model.removeAllElements();
        if(cboNamNhap.getItemCount() == 0) return;
        int nam = (Integer) cboNamNhap.getSelectedItem();
        try {
            List<Object[]> list = tkDAO.getListThangNhap(nam);
            model.addElement(new String("Cả năm"));

            for (Object[] thang : list) {
                model.addElement((Integer) thang[0]);
            }
            cboThangNhap.setModel(model);

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void fillToComboBoxNamXuat() {
        DefaultComboBoxModel model = new DefaultComboBoxModel();

        model.removeAllElements();

        try {
            List<Object[]> list = tkDAO.getListNamXuat();

            for (Object[] nam : list) {
                model.addElement((Integer) nam[0]);
            }
            cboNamXuat.setModel(model);

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void fillToComboBoxThangXuat() {
        DefaultComboBoxModel model = new DefaultComboBoxModel();

        model.removeAllElements();
        if(cboNamXuat.getItemCount() == 0) return;
        int nam = (Integer) cboNamXuat.getSelectedItem();

        try {
            List<Object[]> list = tkDAO.getListThangXuat(nam);
            model.addElement(new String("Cả năm"));

            for (Object[] thang : list) {
                model.addElement((Integer) thang[0]);
            }
            cboThangXuat.setModel(model);

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void fillToComboBoxNamTQ() {
        DefaultComboBoxModel model = new DefaultComboBoxModel();

        model.removeAllElements();

        try {
            List<Object[]> list = tkDAO.getListNamNhapXuat();

            for (Object[] nam : list) {
                model.addElement((Integer) nam[0]);
            }
            cboNamTQ.setModel(model);

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void fillToComboBoxNamTongHop() {
        DefaultComboBoxModel model = new DefaultComboBoxModel();

        model.removeAllElements();

        try {
            List<Object[]> list = tkDAO.getListNamTongHop();

            for (Object[] nam : list) {
                model.addElement((Integer) nam[0]);
            }
            cboNamTH.setModel(model);

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void fillToComboBoxThangTongHop() {
        DefaultComboBoxModel model = new DefaultComboBoxModel();

        model.removeAllElements();
        if(cboNamTH.getItemCount() == 0) return;
        int nam = (Integer) cboNamTH.getSelectedItem();

        try {
            List<Object[]> list = tkDAO.getListThangTongHop(nam);
            model.addElement(new String("Cả năm"));

            for (Object[] thang : list) {
                model.addElement((Integer) thang[0]);
            }
            cboThangTH.setModel(model);

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // Đổ dữ liệu vào combo box tìm kiếm
    private void fillToComboBoxTimKiem() {
        DefaultComboBoxModel modelLT = new DefaultComboBoxModel();
        DefaultComboBoxModel modelNhap = new DefaultComboBoxModel();
        DefaultComboBoxModel modelXuat = new DefaultComboBoxModel();
        DefaultComboBoxModel modelTH = new DefaultComboBoxModel();

        modelLT.removeAllElements();
        modelNhap.removeAllElements();
        modelXuat.removeAllElements();
        modelTH.removeAllElements();

        //int nam = (Integer) cboNamNhap.getSelectedItem();

        for (int i = 1; i < tblLuuTru.getColumnCount(); i++) {
            modelLT.addElement(tblLuuTru.getColumnName(i));
        }

        for (int i = 1; i < tblTKnhap.getColumnCount(); i++) {
            modelNhap.addElement(tblTKnhap.getColumnName(i));
        }

        for (int i = 1; i < tblTKxuat.getColumnCount(); i++) {
            modelXuat.addElement(tblTKxuat.getColumnName(i));
        }

        for (int i = 1; i < tblTongHop.getColumnCount(); i++) {
            modelTH.addElement(tblTongHop.getColumnName(i));
        }

        cboTimKiemLT.setModel(modelLT);
        cboTimKiemNhap.setModel(modelNhap);
        cboTimKiemXuat.setModel(modelXuat);
        cboTimKiemTH.setModel(modelTH);
    }

    // Đỗ dữ liệu vào bảng danh sách lưu trữ
    private void fillToTableLuuTru() {

        tblLuuTruModel.setRowCount(0);

        String keyword = txtTimKiemLT.getText();
        int index = cboTimKiemLT.getSelectedIndex();

        String maKho;
        int indexKho = cboKhoLT.getSelectedIndex();
        String maLHH;
        int indexLHH = cboLoaiHangHoaLT.getSelectedIndex();

        if (indexKho > 0) {
            maKho = ((Kho) cboKhoLT.getSelectedItem()).toString();
        } else {
            maKho = "";
        }

        if (indexLHH > 0) {
            maLHH = String.valueOf(((LoaiHangHoa) cboLoaiHangHoaLT.getSelectedItem()).getMaLHH());
        } else {
            maLHH = "";
        }

        try {
            List<Object[]> list = tkDAO.getListLuuTru(maKho, maLHH, keyword, index);
            int i = 1;
            double sumMoney = 0;
            double sumSoLuong = 0;
            for (Object[] rs : list) {
                Object[] row = {
                    i++,
                    rs[0],
                    rs[1]
                };
                sumMoney += (Double) rs[1] * (Double) rs[2];
                sumSoLuong += (Double) rs[1];
                tblLuuTruModel.addRow(row);
            }
            lblSumTongGiaTri.setText(XNumber.toString(sumMoney, numFormat));
            lblSoLuongTKLT.setText(XNumber.toString(sumSoLuong, numFormat));
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // Đỗ dữ liệu vào bảng danh sách hàng nhập
    private void fillToTableNhap() {
        tblNhapModel.setRowCount(0);

        String keyword = txtTimKiemNhap.getText().trim();
        int index = cboTimKiemNhap.getSelectedIndex();

        String maKho;
        int indexKho = cboKhoNhap.getSelectedIndex();
        String maLHH;
        int indexLHH = cboLoaiHangHoaNhap.getSelectedIndex();
        String nam;
        String thang;
        int indexThang = cboThangNhap.getSelectedIndex();

        if (indexKho > 0) {
            maKho = ((Kho) cboKhoNhap.getSelectedItem()).toString();
        } else {
            maKho = "";
        }

        if (indexLHH > 0) {
            maLHH = String.valueOf(((LoaiHangHoa) cboLoaiHangHoaNhap.getSelectedItem()).getMaLHH());
        } else {
            maLHH = "";
        }

        nam = String.valueOf((Integer) cboNamNhap.getSelectedItem());

        if (indexThang > 0) {
            thang = String.valueOf((Integer) cboThangNhap.getSelectedItem());
        } else {
            thang = "";
        }

        try {
            List<Object[]> list = tkDAO.getListNhap(maKho, maLHH, thang, nam, keyword, index);
            int i = 1;
            double sumMoney = 0;
            double sumSoLuong = 0;
            for (Object[] rs : list) {
                Object[] row = {
                    i++,
                    rs[0],
                    rs[1],
                    rs[2],
                    rs[3],
                    rs[4]
                };
                sumMoney += (Double) rs[4];
                sumSoLuong += (Double) rs[1];
                tblNhapModel.addRow(row);
            }
            lblTongSoGTN.setText(XNumber.toString(sumMoney, numFormat));
            lblTongSoLN.setText(XNumber.toString(sumSoLuong, numFormat));
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // Đỗ dữ liệu vào bảng danh sách hàng xuất
    private void fillToTableXuat() {
        tblXuatModel.setRowCount(0);

        String keyword = txtTimKiemXuat.getText().trim();
        int index = cboTimKiemXuat.getSelectedIndex();

        String maKho;
        int indexKho = cboKhoXuat.getSelectedIndex();
        String maLHH;
        int indexLHH = cboLoaiHangHoaXuat.getSelectedIndex();
        String nam;
        String thang;
        int indexThang = cboThangXuat.getSelectedIndex();

        if (indexKho > 0) {
            maKho = ((Kho) cboKhoXuat.getSelectedItem()).toString();
        } else {
            maKho = "";
        }

        if (indexLHH > 0) {
            maLHH = String.valueOf(((LoaiHangHoa) cboLoaiHangHoaXuat.getSelectedItem()).getMaLHH());
        } else {
            maLHH = "";
        }

        nam = String.valueOf((Integer) cboNamXuat.getSelectedItem());

        if (indexThang > 0) {
            thang = String.valueOf((Integer) cboThangXuat.getSelectedItem());
        } else {
            thang = "";
        }

        try {
            List<Object[]> list = tkDAO.getListXuat(maKho, maLHH, thang, nam, keyword, index);
            int i = 1;
            double sumMoney = 0;
            double sumSoLuong = 0;
            for (Object[] rs : list) {
                Object[] row = {
                    i++,
                    rs[0],
                    rs[1],
                    rs[2],
                    rs[3],
                    rs[4]
                };
                sumMoney += (Double) rs[4];
                sumSoLuong += (Double) rs[1];
                tblXuatModel.addRow(row);
            }
            lblTongSoGTX.setText(XNumber.toString(sumMoney, numFormat));
            lblTongSoLX.setText(XNumber.toString(sumSoLuong, numFormat));
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // Đỗ dữ liệu vào bảng danh sách hàng xuất
    private void fillToTableTongHop() {
        tblTongHopModel.setRowCount(0);

        String keyword = txtTimKiemTH.getText();
        int index = cboTimKiemTH.getSelectedIndex();

        String maKho;
        int indexKho = cboKhoTH.getSelectedIndex();
        if (indexKho > 0) {
            maKho = ((Kho) cboKhoTH.getSelectedItem()).toString();
        } else {
            maKho = "";
        }

        String maLHH;
        int indexLHH = cboLoaiHangHoaTH.getSelectedIndex();
        if (indexLHH > 0) {
            maLHH = String.valueOf(((LoaiHangHoa) cboLoaiHangHoaTH.getSelectedItem()).getMaLHH());
        } else {
            maLHH = "";
        }

        String thang;
        int indexThang = cboThangTH.getSelectedIndex();
        if (indexThang > 0) {
            thang = String.valueOf((Integer) cboThangTH.getSelectedItem());
        } else {
            thang = "";
        }

        String nam = String.valueOf(cboNamTH.getSelectedItem());

        Double sumXuatNhap = 0.0;
        Double sumXuat = 0.0;
        Double sumNhap = 0.0;

        try {
            int i = 1;
            List<Object[]> list = tkDAO.getListTongHop(maKho, maLHH, thang, nam, keyword, index);

            for (Object[] rs : list) {
                Object[] row = {
                    i++,
                    rs[0],
                    rs[1],
                    rs[2]
                };
                sumXuatNhap += (Double) rs[2];
                sumXuat += (Double) rs[4];
                sumNhap += (Double) rs[5];
                tblTongHopModel.addRow(row);
            }
            lblTongSoGTXTH.setText(XNumber.toString(sumXuat, numFormat));
            lblTongSoGTNTH.setText(XNumber.toString(sumNhap, numFormat));
            lblTongSoGTXN.setText(XNumber.toString(sumXuatNhap, numFormat));

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // đổ dữ liệu bảng top 10 
    // đổ dữ liệu top 10 loại hàng hóa theo từng bảng thống kê
    private void fillToTableTop10LHHLT() {
        tblTopLHHModel.setRowCount(0);

        String maKho;
        int indexKho = cboKhoLT.getSelectedIndex();
        if (indexKho > 0) {
            maKho = ((Kho) cboKhoLT.getSelectedItem()).toString();
        } else {
            maKho = "";
        }

        try {
            int i = 1;
            List<Object[]> list = tkDAO.getListTop10LTLHH(maKho);
            for (Object[] rs : list) {
                Object[] row = {
                    i++,
                    rs[0],
                    rs[1]};
                tblTopLHHModel.addRow(row);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void fillToTableTop10LHHnhap() {
        tblTopLHHNhapModel.setRowCount(0);

        String maKho;
        int indexKho = cboKhoNhap.getSelectedIndex();
        if (indexKho > 0) {
            maKho = ((Kho) cboKhoNhap.getSelectedItem()).toString();
        } else {
            maKho = "";
        }

        String thang;
        int indexThang = cboThangNhap.getSelectedIndex();
        if (indexThang > 0) {
            thang = String.valueOf((Integer) cboThangNhap.getSelectedItem());
        } else {
            thang = "";
        }

        String nam = String.valueOf(cboNamNhap.getSelectedItem());

        try {
            int i = 1;
            List<Object[]> list = tkDAO.getListTop10NLHH(maKho, thang, nam);
            for (Object[] rs : list) {
                Object[] row = {
                    i++,
                    rs[0],
                    rs[1]};
                tblTopLHHNhapModel.addRow(row);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void fillToTableTop10LHHxuat() {
        tblTopLHHXuatModel.setRowCount(0);

        String maKho;
        int indexKho = cboKhoXuat.getSelectedIndex();
        if (indexKho > 0) {
            maKho = ((Kho) cboKhoXuat.getSelectedItem()).toString();
        } else {
            maKho = "";
        }

        String thang;
        int indexThang = cboThangXuat.getSelectedIndex();
        if (indexThang > 0) {
            thang = String.valueOf((Integer) cboThangXuat.getSelectedItem());
        } else {
            thang = "";
        }

        String nam = String.valueOf(cboNamXuat.getSelectedItem());

        try {
            int i = 1;
            List<Object[]> list = tkDAO.getListTop10XLHH(maKho, thang, nam);
            for (Object[] rs : list) {
                Object[] row = {
                    i++,
                    rs[0],
                    rs[1]};
                tblTopLHHXuatModel.addRow(row);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // đổ dữ liệu top 10 hàng hóa theo từng bảng thống kê
    private void fillToTableTop10HHLT() {
        tblTopHHModel.setRowCount(0);

        String maKho;
        int indexKho = cboKhoLT.getSelectedIndex();
        if (indexKho > 0) {
            maKho = ((Kho) cboKhoLT.getSelectedItem()).toString();
        } else {
            maKho = "";
        }

        String maLHH;
        int indexLHH = cboLoaiHangHoaLT.getSelectedIndex();
        if (indexLHH > 0) {
            maLHH = String.valueOf(((LoaiHangHoa) cboLoaiHangHoaLT.getSelectedItem()).getMaLHH());
        } else {
            maLHH = "";
        }

        try {
            int i = 1;
            List<Object[]> list = tkDAO.getListTop10LTHH(maKho, maLHH);
            for (Object[] rs : list) {
                Object[] row = {
                    i++,
                    rs[0],
                    rs[1]};
                tblTopHHModel.addRow(row);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void fillToTableTop10HHnhap() {
        tblTopHHNhapModel.setRowCount(0);

        String maKho;
        int indexKho = cboKhoNhap.getSelectedIndex();
        if (indexKho > 0) {
            maKho = ((Kho) cboKhoNhap.getSelectedItem()).toString();
        } else {
            maKho = "";
        }

        String maLHH;
        int indexLHH = cboLoaiHangHoaNhap.getSelectedIndex();
        if (indexLHH > 0) {
            maLHH = String.valueOf(((LoaiHangHoa) cboLoaiHangHoaNhap.getSelectedItem()).getMaLHH());
        } else {
            maLHH = "";
        }

        String thang;
        int indexThang = cboThangNhap.getSelectedIndex();
        if (indexThang > 0) {
            thang = String.valueOf((Integer) cboThangNhap.getSelectedItem());
        } else {
            thang = "";
        }

        String nam = String.valueOf(cboNamXuat.getSelectedItem());

        try {
            int i = 1;
            List<Object[]> list = tkDAO.getListTop10NHH(maKho, maLHH, thang, nam);
            for (Object[] rs : list) {
                Object[] row = {
                    i++,
                    rs[0],
                    rs[1]};
                tblTopHHNhapModel.addRow(row);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void fillToTableTop10HHxuat() {
        tblTopHHXuatModel.setRowCount(0);

        String maKho;
        int indexKho = cboKhoXuat.getSelectedIndex();
        if (indexKho > 0) {
            maKho = ((Kho) cboKhoXuat.getSelectedItem()).toString();
        } else {
            maKho = "";
        }

        String maLHH;
        int indexLHH = cboLoaiHangHoaXuat.getSelectedIndex();
        if (indexLHH > 0) {
            maLHH = String.valueOf(((LoaiHangHoa) cboLoaiHangHoaXuat.getSelectedItem()).getMaLHH());
        } else {
            maLHH = "";
        }

        String thang;
        int indexThang = cboThangXuat.getSelectedIndex();
        if (indexThang > 0) {
            thang = String.valueOf((Integer) cboThangXuat.getSelectedItem());
        } else {
            thang = "";
        }

        String nam = String.valueOf(cboNamXuat.getSelectedItem());

        try {
            int i = 1;
            List<Object[]> list = tkDAO.getListTop10XHH(maKho, maLHH, thang, nam);
            for (Object[] rs : list) {
                Object[] row = {
                    i++,
                    rs[0],
                    rs[1],};
                tblTopHHXuatModel.addRow(row);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void fillToTableTop10LHHTH() {
        tblTopLHHTHModel.setRowCount(0);

        String maKho;
        int indexKho = cboKhoTH.getSelectedIndex();
        if (indexKho > 0) {
            maKho = ((Kho) cboKhoTH.getSelectedItem()).toString();
        } else {
            maKho = "";
        }

        String thang;
        int indexThang = cboThangTH.getSelectedIndex();
        if (indexThang > 0) {
            thang = String.valueOf((Integer) cboThangTH.getSelectedItem());
        } else {
            thang = "";
        }

        String nam = String.valueOf(cboNamTH.getSelectedItem());

        try {
            int i = 1;
            List<Object[]> list = tkDAO.getListTop10THLHH(maKho, thang, nam);
            for (Object[] rs : list) {
                Object[] row = {
                    i++,
                    rs[0],
                    rs[1],
                    rs[2]};
                tblTopLHHTHModel.addRow(row);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void fillToTableTop10HHTH() {
        tblTopHHTHModel.setRowCount(0);

        String maKho;
        int indexKho = cboKhoTH.getSelectedIndex();
        if (indexKho > 0) {
            maKho = ((Kho) cboKhoTH.getSelectedItem()).toString();
        } else {
            maKho = "";
        }

        String maLHH;
        int indexLHH = cboLoaiHangHoaTH.getSelectedIndex();
        if (indexLHH > 0) {
            maLHH = String.valueOf(((LoaiHangHoa) cboLoaiHangHoaTH.getSelectedItem()).getMaLHH());
        } else {
            maLHH = "";
        }

        String thang;
        int indexThang = cboThangTH.getSelectedIndex();
        if (indexThang > 0) {
            thang = String.valueOf((Integer) cboThangTH.getSelectedItem());
        } else {
            thang = "";
        }

        String nam = String.valueOf(cboNamXuat.getSelectedItem());

        try {
            int i = 1;
            List<Object[]> list = tkDAO.getListTop10THHH(maKho, maLHH, thang, nam);
            for (Object[] rs : list) {
                Object[] row = {
                    i++,
                    rs[0],
                    rs[1],
                    rs[2]};
                tblTopHHTHModel.addRow(row);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // Đỗ lại dữ liệu 
    public void refreshForm() {
        tblLuuTru.setRowSorter(null);
        tblTKnhap.setRowSorter(null);
        tblTKxuat.setRowSorter(null);
        tblTongHop.setRowSorter(null);

        this.fillToComboBoxTimKiem();
        this.fillToComboBoxKho();
        this.fillToComboBoxLoaiHangHoa();
        this.fillToComboBoxNamTQ();
        this.fillToComboBoxNamNhap();
        this.fillToComboBoxThangNhap();
        this.fillToComboBoxNamXuat();
        this.fillToComboBoxThangXuat();
        this.fillToComboBoxNamTongHop();
        this.fillToComboBoxThangTongHop();

        this.fillToChartTongQuan();
        this.fillToTableLuuTru();
        this.fillToTableNhap();
        this.fillToTableXuat();
        this.fillToTableTongHop();

        this.fillToTableTop10LHHLT();
        this.fillToTableTop10LHHnhap();
        this.fillToTableTop10LHHxuat();
        this.fillToTableTop10LHHTH();
        this.fillToTableTop10HHLT();
        this.fillToTableTop10HHnhap();
        this.fillToTableTop10HHxuat();
        this.fillToTableTop10HHTH();

        // Kiểm tra dữ liệu bảng, chỉ bật bộ sắp xếp khi bảng có dữ liệu
        tblLuuTru.setAutoCreateRowSorter(tblLuuTru.getRowCount() > 0);
        tblTKnhap.setAutoCreateRowSorter(tblTKnhap.getRowCount() > 0);
        tblTKxuat.setAutoCreateRowSorter(tblTKxuat.getRowCount() > 0);
        tblTongHop.setAutoCreateRowSorter(tblTongHop.getRowCount() > 0);

        this.timer.restart();
    }

    // sau hai phút tải lại dữ liệu
    private Timer timer = new Timer(120000, (e) -> {
        refreshForm();
    });

}
